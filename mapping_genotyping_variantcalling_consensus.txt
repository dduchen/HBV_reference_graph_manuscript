# HBV PanGenome Reference
# Dylan Duchen
##
# Mapping and Alignment Testing
# Testing using raw reads from CHB infected patients/individuals.
# CHB samples from: Cheng Y, Zhu YO, Hibberd ML, Becht E, Lim SG, de Sessions PF, et al. Multifactorial heterogeneity of virus-specific T cells and association with the progression of human chronic hepatitis B infection. Sci Immunol. 2019;4(32):eaau6905.
##


###############################################
#-- Linear reference alignment --#
###############################################
#-- Reference to use
REFB=~/work/dduchen3/projects/HBV/GENBANK_HBV/HBV_B_100percentfull_No-Ns_Consensus.fasta
REFB_core=~/work/dduchen3/projects/HBV/reference/core12_refs/HBV_B_core12.fasta
~/code/dduchen_tools/minimap2/minimap2 $REFB $REFB_core #Approximate per-base sequence divergence= 0.0057
ml blast ;blastn -query $REFB -subject $REFB_core | less
# Identities = 3201/3215 (99%), Gaps = 0/3215 (0%) # $REFB contains some non-specific nucleotides (N,R,M)
REFC=~/work/dduchen3/projects/HBV/GENBANK_HBV/HBV_C_100percentfull_No-Ns_Consensus.fasta
REFC_core=~/work/dduchen3/projects/HBV/reference/core12_refs/HBV_C_core12.fasta
~/code/dduchen_tools/minimap2/minimap2 $REFC $REFC_core #Approximate per-base sequence divergence= 0.0072
blastn -query $REFC -subject $REFC_core | less
#  Identities = 3191/3214 (99%), Gaps = 0/3214 (0%) # $REFC contains some non-specific nucleotides (N,R,S,W)
################################################################################
# ----- GENBANK-consensus reference sequences - has some ambiguous bases ----- #
################################################################################
#--->  use McNaughton defined references rather than consensus sequences with ambiguous bases
#--
#################
#-- Raw reads --#
#################
# BWA MEM
# -- check coverage, first on raw unassembled then qc-processed
module load bwa;module load samtools
# -- script: raw_reads_mapping_stats_qc.sh
# align with bwa, convert to bam and sort:
# C4:
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/raw_reads/linear_ref/
# /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/raw_reads/linear_ref/
# qualimap reports + multiqc
#Qualimap options:
#   -ip Activate this option to collect statistics of overlapping paired-end reads
#   -sd Activate this option to skip duplicate alignments from the analysis. If the duplicates are not flagged in BAM file, then they will be detected by Qualimap and can be selected for skipping.
#   -oc file to save per base non-zero coverage... include?
#
module load java
for each in *.bam;do export BASE="${each##*/}"; echo $BASE;~/code/dduchen_tools/qualimap_v2.2.1/qualimap bamqc -bam $BASE -gd HUMAN -ip -outfile ${BASE%.bam}"_qualimap_report";done
# -- multiqc report # ./qualimap_reports/
multiqc .
#--
ls *.bam > C4_mapped_bams.txt
# R
dat<-fread("C4_mapped_bams.txt",header=F)
dat$V2<-gsub("_raw_","_",dat$V1)
dat$V2<-gsub(".bam","",dat$V2)
dat<-dat[,c(2,1)]
#fwrite(dat,file="Qualimap_Raw_LinearAlns.txt",sep="\t",col.names=F,row.names=F,quote=F)
#
module load java
unset DISPLAY
~/work/dduchen3/tools/qualimap_v2.2.1/qualimap multi-bamqc -d ./Qualimap_Raw_LinearAlns.txt -r -outdir Qualimap_Raw_LinearAlns -outformat PDF:HTML -outfile Qualimap_Raw_LinearAlns
# maybe perform this for the B2 ref that matches the gff
multiqc ./
mv multiqc_report.html Raw_LinearAlns_Multiqc_Report.html
#--
###################################################
# Note: will use position + gff for the relevant reference to plot distrubtion of mapped reads
#
# Downloaded GFF file for B2_2_GU815637 from GENBANK, process/edit
ml bioperl
~/work/dduchen3/tools/gfftools/genbank2gff.pl ~/work/dduchen3/projects/HBV/reference/HBV_reference_B2_2_GU815637.gb > ~/work/dduchen3/projects/HBV/reference/HBV_reference_B2_2_GU815637.gff
~/work/dduchen3/tools/gfftools/gffsort.pl ~/work/dduchen3/projects/HBV/reference/HBV_reference_B2_2_GU815637.gff > ~/work/dduchen3/projects/HBV/reference/HBV_reference_B2_2_GU815637_edit.gff
# change locus/header of gff file to: 'B2_2_GU815637'
# manual edits to wrap gene/cds regions around origin --> HBV_reference_B2_2_GU815637_manual_edit.gff
###################################################
#
gff="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/HBV_reference_B2_2_GU815637_edit.gff"
# list of the B2 subtypes - later find out its the best linear reference
ls *_raw_B2_2_GU815637.bam > C4_B2_2_GU815637_mapped_bams.txt
# R
dat<-fread("C4_B2_2_GU815637_mapped_bams.txt",header=F)
dat$V2<-gsub("_raw_","_",dat$V1)
dat$V2<-gsub(".bam","",dat$V2)
dat<-dat[,c(2,1)]
#fwrite(dat,file="Qualimap_Raw_C4_BestRef_LinearAlns.txt",sep="\t",col.names=F,row.names=F,quote=F)
~/work/dduchen3/tools/qualimap_v2.2.1/qualimap multi-bamqc -d ./Qualimap_Raw_C4_BestRef_LinearAlns.txt -r -gff $gff -outdir Qualimap_Raw_C4_BestRef_LinearAlns -outformat PDF:HTML -outfile Qualimap_Raw_C4_BestRef_LinearAlns
# Number of samples 	5
# Total number of mapped reads 	39,969,765
# Mean samples coverage 	209,824.95
# Mean samples GC-content 	51.77
# Mean samples mapping quality 	58.98
# Mean samples insert size 	99.4
#
################
#-- QC reads --#
################
#-- adaptor trimmed reads:
#2) QC on reads
# -- remove TruSeq adapters and poor-quality bases #	https://cutadapt.readthedocs.io/en/stable/guide.html#illumina-truseq
# The -q (or --quality-cutoff) parameter can be used to trim low-quality ends from reads before adapter removal. For this to work correctly, the quality values must be encoded as ascii(phred quality + 33).
#cutadapt -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT -o SRR{Output}_1.trimmed.fastq -p SRR{Output}_2.trimmed.fastq SRR{Input}_1.fastq SRR{Input}_2.fastq >SRR{Output}_CutadaptOutput.txt
# -- trim poor quality bases, remove adapters, minimum read length
#module load cutadapt # version 1.18.... instead download much updated version ==>3.2
conda activate cutadaptenv # can now multi-core to speed things up with: -j #cores
#cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C2/C2_qc
for each in ../*_1.fastq;do export BASE="${each##*/}"; echo $BASE; cutadapt -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCA -A AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT --minimum-length 36 -o ${BASE%.fastq}"_qc.fastq" -p ${BASE%_1.fastq}"_2_qc.fastq" ../$BASE ../${BASE%1.fastq}"2.fastq" -j 8;done >cutadapt_output.txt
#--
#---- Alignment Tests
#--
module load bwa;module load samtools
REFB_core=~/work/dduchen3/projects/HBV/reference/core12_refs/HBV_B_core12.fasta
REFC_core=~/work/dduchen3/projects/HBV/reference/core12_refs/HBV_C_core12.fasta
#C4
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/linear_ref
#- testing alignments to McNaughton et. al.'s core Genotype B/C Reference
# -- test to remove duplicates, can't in graph methods so... ignore
#ml picard
#picard MarkDuplicates I=SRR7471499_raw_qc_RefB.bam O=SRR7471499_raw_qc_RefB_dedup.bam M=SRR7471499_raw_qc_RefB_dedup_metrics.txt
#picard BuildBamIndex I=SRR7471499_raw_qc_RefB_dedup.bam
#--
#samtools flagstat SRR7471499_raw_qc_RefB_dedup.bam > SRR7471499_raw_qc_RefB_dedup.stats
# Alignment stats
#picard CollectAlignmentSummaryMetrics R=$REFB_core I=SRR7471499_raw_qc_RefB.bam O=SRR7471499_raw_qc_RefB_AlignmentStats.txt
#picard CollectQualityYieldMetrics I=SRR7471499_raw_qc_RefB.bam O=SRR7471499_raw_qc_RefB_QualityYieldMetrics.txt
#--
# Samtools flagstat summary stats - then combine into a table
# -- script: 'map_summary_stats.sh'
#for each in *.bam; do export FNAME="${each##*/}"; export fullBASE="${each}"; export BASE="${FNAME}"; echo $fullBASE; samtools flagstat $fullBASE  > ${BASE%*.bam}".stats"; done
# - combine into table:
echo file num_reads mapped_reads secondary_aln mapped_percent > map_summary.txt
for each in *.stats; do sh ~/work/dduchen3/projects/HBV/reference/linear_mapping_stats.sh $each >> map_summary.txt; done
#
#--
#-- qualimap reports
ml java
for each in *.bam;do export BASE="${each##*/}"; echo $BASE;~/code/dduchen_tools/qualimap_v2.2.1/qualimap bamqc -bam $BASE -gd HUMAN -ip -outfile ${BASE%.bam}"_qualimap_report" -outformat PDF;done
# -- multiqc report
multiqc .
#--
#-- Shell scripts to do it all - align using each of the 44 identified genotype/subgenotype references:
# -- C4 raw, qc-passed, and merged 150bp+ reads: ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/
# -- all 44 refs (FASTA seq) found here: ~/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/
#--
# ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/
# shell script --> qc_reads_mapping_stats_qc.sh
# /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/
#-
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref
#
##################################################################################################
# -- Align simulated illumina short reads from an assortment of HBV genomes to each linear ref + the graph
OUTPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/"
REFSPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/"
DATAPATH=$OUTPATH
cd $OUTPATH
non44seq_R1=~/work/dduchen3/projects/HBV/reference/allqc_refs/HBV_no44refs_simreads_MODELhiseq_R1.fastq
non44seq_R2=~/work/dduchen3/projects/HBV/reference/allqc_refs/HBV_no44refs_simreads_MODELhiseq_R2.fastq
#
# previous version - 50 sequences without represnation across all genotypes
#echo file num_reads mapped_reads secondary_aln mapped_percent > "Simulations_map_summary.txt"
# 59 sequences - representative sequences from each genotype + 50 randoms
echo file num_reads mapped_reads secondary_aln mapped_percent > "Simulations_map_summary_hiseq.txt"
# also want the time it takes to do all of this:
#time (for i in {1..10}; do sleep 1 ; done)
ml bwa ; ml samtools ; ml java
time (for each in $REFSPATH*.fasta;
  do export REF="${each##*/}"; echo $REF;
  export specificRef=${REF##*Sequence_}; export specificRef=${specificRef%*.fasta};
#  bwa mem -t 16 -M $REFSPATH${REF} $non44seq_R1 $non44seq_R2 | samtools view -Sb - | samtools sort - > "Simulations_non44."${specificRef}.bam;
  bwa mem -t 16 -M $REFSPATH${REF} $non44seq_R1 $non44seq_R2 | samtools view -Sb - | samtools sort - > "Simulations_non44_hiseq."${specificRef}.bam;
# stats
#  samtools flagstat "Simulations_non44."${specificRef}.bam > "Simulations_non44."${specificRef}.stats;
  samtools flagstat "Simulations_non44_hiseq."${specificRef}.bam > "Simulations_non44_hiseq."${specificRef}.stats;
done)
#
# Real time: 27.054 sec; CPU: 57.211 sec
# real    25m2.218s
# user    50m54.150s
# sys     2m15.645s
#
# redoing this commenting out the samtools stats:
time (for each in $REFSPATH*.fasta;
  do export REF="${each##*/}"; echo $REF;
  export specificRef=${REF##*Sequence_}; export specificRef=${specificRef%*.fasta};
  bwa mem -t 16 -M $REFSPATH${REF} $non44seq_R1 $non44seq_R2 > test_timing.sam;
done)
#
# Real time: 17.647 sec; CPU: 52.151 sec
# real    12m53.436s
# user    34m41.022s
# sys     2m17.612s

#
########################################################################################
#- Novel mapping stats for the linear reference - - all reads + simulated reads:
echo file num_reads mapped_reads secondary_aln mapped_percent > C4_linear_alignments_mapping_summary.txt
for each in *.stats; do sh ~/work/dduchen3/projects/HBV/reference/linear_mapping_stats.sh $each >> C4_linear_alignments_mapping_summary.txt; done
########################################################################################
# C4_linear_alignments_mapping_summary.txt   # <----- all reads aligned to linear references
cp C4_linear_alignments_mapping_summary.txt ~/
########################################################################################
########################################################################################
########################################################################################
# ----------------------- GRAPH-BASED MAPPING ----------------------------------#
# --- demonstrate improvement of vg map vs. linear mapping  --- #
# subsample the reads - more manageable -->
# -- so should demonstrate no sig difference between subsetted reads / full reads to linear refs
conda activate /home-1/dduchen3@jhu.edu/code/dduchen_tools/miniconda3/envs/simulation
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons
# for i in $(ls *1_qc.fastq);do echo $i; echo ${i%1_qc.fastq}'2_qc.fastq';
# rasusa -i $i -i ${i%1_qc.fastq}'2_qc.fastq' --coverage 20000 --genome-size 3.2kb -s 1234 -o ./vgmap_comparisons/${i%1_qc.fastq}'1_qc_subset.fastq' -o ./vgmap_comparisons/${i%1_qc.fastq}'2_qc_subset.fastq';
# done
for i in $(ls *1_qc_subset.fastq);do echo $i; echo ${i%1_qc_subset.fastq}'2_qc_subset.fastq'; # again - lower coverage
rasusa -i $i -i ${i%1_qc_subset.fastq}'2_qc_subset.fastq' --coverage 5000 --genome-size 3.2kb -s 1234 -o ./${i%1_qc_subset.fastq}'1_qc_5k_subset.fastq' -o ./${i%_1_qc_subset.fastq}'_2_qc_5k_subset.fastq';
done
##### ---- 5,000X coverage for GRAMTOOLS personal reference
ml bwa
ml samtools
ml java
#
OUTPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/"
REFSPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/"
#BASE=SRR7471499_1_qc_subset.fastq
#BASE=SRR7471500_1_qc_subset.fastq
#BASE=SRR7471501_1_qc_subset.fastq
#BASE=SRR7471502_1_qc_subset.fastq
#BASE=SRR7471513_1_qc_subset.fastq
#
echo file num_reads mapped_reads secondary_aln mapped_percent > ${BASE%*_1_qc_subset.fastq}"_map_summary.txt"
#
for each in $REFSPATH*.fasta;
do export REF="${each##*/}"; echo $REFSPATH${REF};
export specificRef=${REF##*Sequence_}; export specificRef=${specificRef%*.fasta};
cd $OUTPATH;
export fullBASE="${BASE}"; echo $fullBASE;cd $OUTPATH; bwa mem -t 16 -M $REFSPATH${REF} $fullBASE ${fullBASE%1_qc_subset.fastq}"2_qc_subset.fastq" | samtools view -Sb - | samtools sort - > ${BASE%*_1_qc_subset.fastq}"_raw_qc_subset_"${specificRef}.bam;
# stats
samtools flagstat ${BASE%*_1_qc_subset.fastq}"_raw_qc_subset_${specificRef}.bam" > ${BASE%*_1_qc_subset.fastq}"_raw_qc_subset_"${specificRef}.stats;
done
#
ls *raw_qc_B2_2_GU815637.bam > B2_2_GU815637_mapped_bams.txt
ls ./vgmap_comparisons/*B2_2_GU815637.bam >> B2_2_GU815637_mapped_bams.txt
#ls Simulations_non44.*.bam > Simulations_mapped_bams.txt
ls Simulations_non44_hiseq*.bam > Simulations_hiseq_mapped_bams.txt
gff="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/HBV_reference_B2_2_GU815637_edit.gff"
# R
dat<-fread("B2_2_GU815637_mapped_bams.txt",header=F)
dat$V2<-gsub("_raw_qc_","_",dat$V1)
dat$V2<-gsub("./vgmap_comparisons/","",dat$V2)
dat$V2<-gsub(".bam","",dat$V2)
dat<-dat[,c(2,1)]
#fwrite(dat,file="Qualimap_C4_QC_BestRef_wSubsets_LinearAlns.txt",sep="\t",col.names=F,row.names=F,quote=F)
~/work/dduchen3/tools/qualimap_v2.2.1/qualimap multi-bamqc -d ./Qualimap_C4_QC_BestRef_wSubsets_LinearAlns.txt -r -gff $gff -outdir Qualimap_C4_QC_BestRef_wSubsets_LinearAlns -outformat PDF:HTML -outfile Qualimap_C4_QC_BestRef_wSubsets_LinearAlns
#dat<-fread("Simulations_mapped_bams.txt",header=F)
#dat$V2<-gsub("_non44.","_",dat$V1)
dat<-fread("Simulations_hiseq_mapped_bams.txt",header=F)
dat$V2<-gsub("_non44_hiseq.","_",dat$V1)
dat$V2<-gsub(".bam","",dat$V2)
dat<-dat[,c(2,1)]
#fwrite(dat,file="Qualimap_Simulations_LinearAlns.txt",sep="\t",col.names=F,row.names=F,quote=F)
~/work/dduchen3/tools/qualimap_v2.2.1/qualimap multi-bamqc -d ./Qualimap_Simulations_LinearAlns.txt -r -outdir ./vgmap_comparisons/Qualimap_Simulations_LinearAlns -outformat PDF:HTML -outfile Qualimap_Simulations_LinearAlns
# just use samtools depth for updated version
#
# -- also use samtools depth to estimate coverage across the genome
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/
ml samtools
#samtools depth -aa -d 0 -f Simulations_mapped_bams.txt > Simulations_non44.coverage_depth.tsv
samtools depth -aa -d 0 -f Simulations_hiseq_mapped_bams.txt > Simulations_non44_hiseq.coverage_depth.tsv
#
R
#coverage=read.table("Simulations_non44.coverage_depth.tsv", sep="\t", header=F)
coverage=read.table("Simulations_non44_hiseq.coverage_depth.tsv", sep="\t", header=F)
#bams<-read.table("Simulations_mapped_bams.txt",header=F)
bams<-read.table("Simulations_hiseq_mapped_bams.txt",header=F)
colnames(coverage)<-c("ref","locus",bams$V1)
#colnames(coverage)<-gsub("Simulations_non44.","",colnames(coverage))
colnames(coverage)<-gsub("Simulations_non44_hiseq.","",colnames(coverage))
colnames(coverage)<-gsub(".bam","",colnames(coverage))
#fwrite(coverage,file="Simulations_non44.coverage_depth.tsv",sep="\t",col.names=T,row.names=F,quote=F)
#fwrite(coverage,file="Simulations_non44_HiSeq.coverage_depth.tsv",sep="\t",col.names=T,row.names=F,quote=F)
#
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads")
coverage<-fread("Simulations_non44_HiSeq.coverage_depth.tsv")
coverage<-data.frame(coverage)
library(reshape)
dat<-melt(coverage, id.vars = c('ref','locus'))
dat<-dat[,-1]
dat$genotype<-sub("^(\\w).*$", "\\1", dat$variable)
#
coverage_variation<-ggplot(dat, aes(x=locus, y=value, color=genotype)) +
                            geom_point(size=1, alpha=0.05) + geom_line(alpha=0.5) +
                            ylab("Coverage") + xlab("Reference Position") + theme_bw() +
                            xlim(c(0,3247))
# want a simplified version for manuscript figure - rolling average by genotype
cov_smoothed<-data.frame(1:3247)
library(zoo)
for(i in seq(unique(dat$genotype))){
  genotype<-unique(dat$genotype)[i]
  print(genotype)
  temp_dat<-dat[dat$genotype==genotype,] ; temp_dat<-droplevels(temp_dat)
# rolling average for each sequence
  for(j in seq(unique(temp_dat$variable))){
    subgeno<-as.character(unique(temp_dat$variable)[j])
    test<-rollapply(dat[dat$variable==subgeno,]$value, width = 50, by = 1, FUN = mean, na.rm = TRUE, align = "left")
    test<-data.frame(test)
    colnames(test)<-subgeno
    if(j==1){
    test2<-test
    }
    if(j>1){
      test2<-cbind(test2,test)
      }
    }
# get average for each genotype
  geno<-rowMeans(test2)
  geno<-data.frame(geno); colnames(geno)<-genotype
  if(i==1){
    genotype_averages<-geno
  }
  if(i>1){
    genotype_averages<-cbind(genotype_averages,geno)
    }
}
#
library(reshape)
genotype_averages$locus<-1:nrow(genotype_averages)
dat_genotype<-melt(genotype_averages, id.vars = c('locus'))
#
coverage_variation_geno<-ggplot(dat_genotype, aes(x=locus, y=value, color=variable)) +
                            geom_point(size=1, alpha=0.05) + geom_line(alpha=0.5) +
                            ylab("Coverage") + xlab("Reference Position") + theme_bw() +
                            xlim(c(0,3247))

# coverage variation + GFF of genome diversity

# -- combine with average nucleotide diversity across the genome -- add this to graph rescue plot
library(Biostrings);library(data.table);options(stringsAsFactors=F);library(assertthat)
seq_aln<-readDNAStringSet("~/JHSPH/Research/HBV/Reference_Testing/McNaughton_alignment_HBV_references.fasta")
#
window_size <- 150 ; window_jump <- 20
window_start <- seq(from = 1, to = max(width(seq_aln)), by = window_jump)
window_stop <- window_start + window_size
# remove windows from the start and stop vectors
window_start <- window_start[which(window_stop < max(width(seq_aln)))]
window_stop <- window_stop[which(window_stop < max(width(seq_aln)))]
windows <- data.frame(start = window_start, stop = window_stop,
                      mid = window_start + (window_stop-window_start)/2)
windows$hamming_dist_mean<-NA ; windows$hamming_dist_sd<-NA
windows$nucleotide_diversity<-NA ; windows$nucleotide_diversity_variance<-NA
windows$gc<-NA
library(pegas)
# methods for classes "DNAbin" and "haplotype". The first method uses the sum of the number of differences between pairs of sequences divided by the number of comparisons (i.e. n(n - 1)/2, where n is the number of sequences). The second method uses haplotype frequencies. It could be that both methods give (slightly) different results because of missing or ambiguous nucleotides: this is generally solved by setting pairwise.deletion = TRUE.
# The variance of the estimated diversity uses formula (10.9) from Nei (1987). This applies only if all sequences are of the same lengths, and cannot be used if pairwise.deletion = TRUE. A bootstrap estimate may be in order if you insist on using the latter option.
for(i in 1:nrow(windows)){
  tmp<-subseq(seq_aln,start = windows$start[i],end=windows$stop[i])
  tmp2<-stringDist(tmp, method = "hamming", diag = FALSE, upper = FALSE, type="global")
  windows[i,]$hamming_dist_mean<-mean(tmp2)
  windows[i,]$hamming_dist_sd<-sd(tmp2)
  tmp2<-as.DNAbin(tmp)
  windows[i,]$gc<-GC.content(tmp2)
  tmp2<-nuc.div(tmp2, variance = TRUE, pairwise.deletion = FALSE)
  windows[i,]$nucleotide_diversity<-tmp2[1]
  windows[i,]$nucleotide_diversity_variance<-tmp2[2]
  rm(tmp2)
}
#
diversity<-ggplot(data=windows,aes(x=mid,y=nucleotide_diversity)) + geom_line(color="red") + theme_bw() +
      geom_ribbon(aes(ymin=nucleotide_diversity-nucleotide_diversity_variance, ymax=nucleotide_diversity+nucleotide_diversity_variance,fill = " "),fill = "red", alpha = 0.3) +
      ylab("Nucleotide Diversity\nReference Graph (N=44)") + xlab(NULL) +
#      scale_y_reverse() + #don't do this, makes explaining y axis harder
      theme(axis.title.x=element_blank(),
             axis.text.x=element_blank(),
             axis.ticks.x=element_blank()) +
       xlim(c(0,3247))
#
#p <- ggplot_build(coverage_variation)
coverage_variation<-coverage_variation_geno
p <- ggplot_build(coverage_variation)
p<-p$data[[2]]
# get average density value across each group at each position x
library(plyr)
mu_maxima <- ddply(p, .(x), summarize,
            mean_density=mean(y))
mu_maxima$mean_density<-scale(log(mu_maxima$mean_density))
library(ggpmisc)
valleys<-ggplot(mu_maxima, aes(x=x,y=mean_density)) +
              stat_valleys(data=mu_maxima,span=251, strict=TRUE, colour = "red") +
              theme_bw() +
              stat_valleys(data=mu_maxima,span=251, strict=TRUE, geom = "rug", colour = "red", sides = "b")
#
annotations_lines<-ggplot_build(valleys)
annotations_lines<-as.numeric(annotations_lines[[1]][[2]]$label)
# -- add vertical lines to both plots!
diversity<-diversity+geom_vline(xintercept = annotations_lines,alpha=0.5,size=1,color="grey80") + theme_classic()
coverage_variation<-coverage_variation+geom_vline(xintercept = annotations_lines,alpha=0.5,size=1,color="grey80") + theme_classic()
#--
library(patchwork) # to align graphs of different areas
pl<-diversity + coverage_variation + plot_layout(ncol = 1,heights=c(0.3,0.7))
#
pl
#ggsave(filename="PairwiseNucleotideDiversity_SimualtedReads_Non44_AlignmentCoverage.png", plot=pl, device="png",width = 10,height=8,units=c("in"),dpi=500)
ggsave(filename="PairwiseNucleotideDiversity_SimualtedReads_Non44_AlignmentCoverage_simplified.png", plot=pl, device="png",width = 10,height=8,units=c("in"),dpi=500)
# --- add the gff to the bottom
# manual edits to wrap gene/cds regions around origin
gff<-fread("~/JHSPH/Research/HBV/Reference_Testing/HBV_reference_B2_2_GU815637_manual_edit.gff",header=F)
colnames(gff)<-c("seqname","source","feature","start","end","strand","frame","score","attribute")
gff$gene<-gsub("^.*gene=","",gff$attribute)
gff$gene<-gsub(" .*$","",gff$gene)
gff$gene[1]<-NA
gff$orientation<-ifelse(gff$start<gff$end,1,-1)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205"),"-",gff$strand)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205","1374"),"-",gff$strand)
#
#
library("gggenes") # https://github.com/wilkox/gggenes
library(gggenomes);library(MetBrewer)
gff$seq_id<-"HBV"
ref_genome<-gggenomes(genes=gff[gff$feature=="gene",]) +
    geom_gene(aes(fill=gene), position="pile",size=5,stroke=0.5) + #position="sixframe", position="pile"
    scale_fill_manual(name="",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
    scale_y_continuous(limits=c(0.8, 1.3), expand = c(0, 0)) +
    scale_x_continuous(limits=c(0, 3247), n.breaks=20) +
    guides(linetype="none",color="none") +
    theme(legend.position="bottom")
#top: theme(plot.margin=unit(c(1,1,0,1), "cm"))
#middle: theme(plot.margin=unit(c(-0.05,1,0,1), "cm"))
#bottom: theme(plot.margin=unit(c(-0.05,1,1,1), "cm"))
#
diversity<-diversity+theme(plot.margin=unit(c(1,1,0,1), "cm"))+
        theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
coverage_variation<- coverage_variation+ theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) +
        theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
# add vertical lines to reference gff
ref_genome<-ref_genome +theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) + #theme_classic() +
                              theme(axis.title.y=element_blank(),
                              axis.text.y=element_blank(),
                              axis.ticks.y=element_blank()) + xlab("HBV Genome (Position)") +
                              geom_vline(xintercept = annotations_lines,alpha=0.5,size=1,color="grey80")

#
pl2<-diversity + coverage_variation + ref_genome + plot_layout(ncol = 1,heights=c(0.3,0.6,0.1))
#
#ggsave(filename="PairwiseNucleotideDiversity_SimualtedReads_Non44_AlignmentCoverage.png", plot=pl2, device="png",width = 10,height=8,units=c("in"),dpi=1000)
ggsave(filename="PairwiseNucleotideDiversity_SimualtedReads_Non44_AlignmentCoverage_simplified.png", plot=pl2, device="png",width = 10,height=8,units=c("in"),dpi=1000)
########################
#
# pairwise diversity - genotyping script + '~/JHSPH/Research/HBV/Reference_Testing'
#
# add coverage across graph reference to the coverage plot above
#save(seq_aln,dat_genotype,coverage,diversity,coverage_variation,ref_genome,file="~/JHSPH/Research/HBV/Reference_Testing/real_reads/Simulated_HighDiversity_linear_coverage_materials.R")
#
##############################################################################################
#-- map each subsetted set of reads to the extended best performing linear reference:
##############################################################################################
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/
ml bwa;ml samtools
# first 120bp concatenated to end of ref
graphdir=~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/HBV_44refs_msga_extended/
for i in $(vg paths -Lv ${graphdir}'McNaughton_HBV_44refs_norm.vg');do echo ${i}'_extended.fasta';
vg paths -FQ $i -v $graphdir'McNaughton_HBV_44refs_norm.vg' > ${i}'_extended.fasta';
bwa index ${i}'_extended.fasta';
done
# # --- extended reference, subsampled reads
for j in $(ls *_extended.fasta);do echo ${j};
  for i in $(ls *_1_qc_subset.fastq);do echo $i;
    bwa mem -t 16 -M $j $i ${i%_1_qc_subset.fastq}"_2_qc_subset.fastq" | samtools view -Sb - | samtools sort - > ${i%*_1_qc_subset.fastq}'_raw_qc_subset_'${j%.fasta}'.bam';
    # stats
    samtools flagstat ${i%*_1_qc_subset.fastq}'_raw_qc_subset_'${j%.fasta}'.bam' > ${i%*_1_qc_subset.fastq}'_raw_qc_subset_'${j%.fasta}'.stats';
done
# -- combine all the subsampled linear reference alignments + extended ref aln stats -->
echo file num_reads mapped_reads secondary_aln mapped_percent > Summary_linear_mapping_stats.txt
for each in *_raw_qc_subset_*.stats; do sh ~/work/dduchen3/projects/HBV/reference/linear_mapping_stats.sh $each >> Summary_linear_mapping_stats.txt; done
# -- for saving/analysis
cp Summary_linear_mapping_stats.txt ~/Summary_subset_extended_linear_mapping_stats.txt
#
#
####################################################################
# -- VG MAP to linear ref (subsampled sequences) -- #
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/
# #
graphdir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/"
for i in $(ls SRR7471501_1_qc_subset.fastq);do echo $i; echo ${i%_1_qc_subset.fastq};
vg map -x $graphdir'HBV_44refs.seqwish_norm.xg' -g $graphdir'HBV_44refs.seqwish_norm.gcsa' -1 $graphdir'HBV_44refs.seqwish_norm.augmented.gbwt' -f $i -f ${i%_1_qc_subset.fastq}'_2_qc_subset.fastq' -t 16 > ${i%_1_qc_subset.fastq}'_subset_map.gam'
vg stats -a ${i%_1_qc_subset.fastq}'_subset_map.gam' > ${i%_1_qc_subset.fastq}'_subset_map.stats'
done
#
#
#--- VG map to circular reference!
graphdir=~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/HBV_44refs_msga/
#graph: McNaughton_HBV_44refs_circ_norm.vg/.xg...
srr1=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471499_1_qc_subset.fastq
srr2=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471499_2_qc_subset.fastq
vg giraffe -Z $graphdir'McNaughton_HBV_44refs_circ_norm.giraffe.gbz' -H $graphdir'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -m $graphdir'McNaughton_HBV_44refs_circ_norm.min' -d $graphdir'McNaughton_HBV_44refs_circ_norm.dist' -f $srr1 -f $srr2 -o gam --paired-distance-limit 3 > SRR7471499_circ_ref_giraffe.gam
srr1=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471500_1_qc_subset.fastq
srr2=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471500_2_qc_subset.fastq
vg giraffe -Z $graphdir'McNaughton_HBV_44refs_circ_norm.giraffe.gbz' -H $graphdir'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -m $graphdir'McNaughton_HBV_44refs_circ_norm.min' -d $graphdir'McNaughton_HBV_44refs_circ_norm.dist' -f $srr1 -f $srr2 -o gam --paired-distance-limit 3 > SRR7471500_circ_ref_giraffe.gam
srr1=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471501_1_qc_subset.fastq
srr2=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471501_2_qc_subset.fastq
vg giraffe -Z $graphdir'McNaughton_HBV_44refs_circ_norm.giraffe.gbz' -H $graphdir'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -m $graphdir'McNaughton_HBV_44refs_circ_norm.min' -d $graphdir'McNaughton_HBV_44refs_circ_norm.dist' -f $srr1 -f $srr2 -o gam --paired-distance-limit 3 > SRR7471501_circ_ref_giraffe.gam
srr1=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471502_1_qc_subset.fastq
srr2=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471502_2_qc_subset.fastq
vg giraffe -Z $graphdir'McNaughton_HBV_44refs_circ_norm.giraffe.gbz' -H $graphdir'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -m $graphdir'McNaughton_HBV_44refs_circ_norm.min' -d $graphdir'McNaughton_HBV_44refs_circ_norm.dist' -f $srr1 -f $srr2 -o gam --paired-distance-limit 3 > SRR7471502_circ_ref_giraffe.gam
srr1=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471513_1_qc_subset.fastq
srr2=~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/SRR7471513_2_qc_subset.fastq
vg giraffe -Z $graphdir'McNaughton_HBV_44refs_circ_norm.giraffe.gbz' -H $graphdir'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -m $graphdir'McNaughton_HBV_44refs_circ_norm.min' -d $graphdir'McNaughton_HBV_44refs_circ_norm.dist' -f $srr1 -f $srr2 -o gam --paired-distance-limit 3 > SRR7471513_circ_ref_giraffe.gam
#
for i in $(ls *giraffe.gam); do echo $i;
vg stats -a $i > ${i%.gam}'.graph_stats';
#
######## VG MAP to circular reference :
graphdir=~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/HBV_44refs_msga/
for i in $(ls *1_qc_subset.fastq);do echo $i; echo ${i%_1_qc_subset.fastq};
vg map -x $graphdir'McNaughton_HBV_44refs_circ_norm.xg' -g $graphdir'McNaughton_HBV_44refs_circ_norm.gcsa' -1 $graphdir'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -f $i -f ${i%_1_qc_subset.fastq}'_2_qc_subset.fastq' -t 16 > ${i%_1_qc_subset.fastq}'_subset_circ_map.gam'
vg stats -a ${i%_1_qc_subset.fastq}'_subset_circ_map.gam' > ${i%_1_qc_subset.fastq}'_subset_circ_map.stats'
done
###########################
# -- concatenate stats -- #
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons
echo file reads primary_aln secondary_aln aligned perfect_aln paired_reads proper_pair mapped_percent perfect_percent> graph_mapping_summary_stats.txt
# giraffe full reads
for each in /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref/*seqwish_giraffe.stats;
  do sh ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/giraffe_map_summary_stats.sh $each >> graph_mapping_summary_stats.txt;done
# giraffe subset circular reference
for each in *.graph_stats; do sh ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/giraffe_map_summary_stats.sh $each >> graph_mapping_summary_stats.txt; done
# vg map stats
for each in *_map.stats; do sh ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/giraffe_map_summary_stats.sh $each >> graph_mapping_summary_stats.txt; done
cp graph_mapping_summary_stats.txt ~/graph_mapping_summary_stats.txt

###############################################################################################
#
########################################
# -- merged / merged & >150bp reads -- #
########################################
#
# after cutadapt QC --> PEAR to merge reads
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/C4_pear/linear_ref_coverage/
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/C4_pear
# -- additional PEAR QC: merged paired end reads
# The assembled reads will remain the same - PAIR already utilizes the base quality thresholds when merging, -q option only affects the single-end reads [PEAR user group-google.
# Not much difference - use relatively lax/not too low cutoff, -q 20 AND set the minimum length of the read: 1/2 length of raw read = 50.
## -- ## -- ## -- ## -- ## -- ## -- ## -- ## --
# ---- PAIR QC step applied for each sample: ---- # #min. base quality for single-end (unassembled reads)=30, min length=50
for each in ../*_1_qc.fastq;do export BASE="${each##*/}"; echo $BASE; ~/code/dduchen_tools/pear-0.9.11-linux-x86_64/bin/pear -f ../$BASE -r ../${BASE%1_qc.fastq}"2_qc.fastq" -q 20 -t 50 -o ${BASE%1_qc.fastq}"pear";done >
# - Filter by reads > 150bp long
module load bbmap
for each in *assembled.fastq;do export BASE="${each##*/}"; echo $BASE; reformat.sh $BASE out=${BASE%.fastq}".150bp.fastq" minlength=150; done
~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/C4_pear
# moved
########################
########################
SRR7471499_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471499_pear.assembled.150bp.fastq'
SRR7471500_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471500_pear.assembled.150bp.fastq'
SRR7471501_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471501_pear.assembled.150bp.fastq'
SRR7471502_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471502_pear.assembled.150bp.fastq'
SRR7471513_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471513_pear.assembled.150bp.fastq'
#
REF="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/HBV_Ref_Sequence_B2_2_GU815637.fasta"
ml bwa ; ml samtools
bwa mem -t 16 -M $REF $SRR7471499_150bp | samtools view -Sb - | samtools sort - > SRR7471499_pear_assembled_150bp_B2_2_GU815637.bam
bwa mem -t 16 -M $REF $SRR7471500_150bp | samtools view -Sb - | samtools sort - > SRR7471500_pear_assembled_150bp_B2_2_GU815637.bam
bwa mem -t 16 -M $REF $SRR7471501_150bp | samtools view -Sb - | samtools sort - > SRR7471501_pear_assembled_150bp_B2_2_GU815637.bam
bwa mem -t 16 -M $REF $SRR7471502_150bp | samtools view -Sb - | samtools sort - > SRR7471502_pear_assembled_150bp_B2_2_GU815637.bam
bwa mem -t 16 -M $REF $SRR7471513_150bp | samtools view -Sb - | samtools sort - > SRR7471513_pear_assembled_150bp_B2_2_GU815637.bam
#
# stats
for i in $(ls *_150bp_B2_2_GU815637.bam);do echo $i; echo ${i%.bam};
samtools flagstat $i > ${i%.bam}'.stats'
done
echo file num_reads mapped_reads secondary_aln mapped_percent > merged_150bp_map_summary.txt
for each in *.stats; do sh ~/work/dduchen3/projects/HBV/reference/linear_mapping_stats.sh $each >> merged_150bp_map_summary.txt;
done
#### ---- ALL LINEAR MAPPING REFERENCES ------ ####
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref
echo file num_reads mapped_reads secondary_aln mapped_percent > merged_150bp_map_summary.txt
for each in *.stats; do sh ~/work/dduchen3/projects/HBV/reference/linear_mapping_stats.sh $each >> merged_150bp_map_summary.txt;
done
#
cp merged_150bp_map_summary.txt ~/merged_150bp_map_summary.txt
#
# full shell script --> merged_150bp_reads_mapping_stats_qc.sh
##########################################
# -- should also compare to consensus-based mapping?
#- https://sourceforge.net/projects/virtools/files/
##########################################
# -- graph mapping | multiple methods -- #
# - vg (giraffe, mpmap, map)             #
##########################################
#
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref/
#
#for each in /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/*1_qc.fastq;
do export FNAME="${each##*/}";export BASE="${FNAME%_1_qc.fastq}"; qsub -N "graph_${BASE}" ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/graph_mapping_and_stats.sh /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/${FNAME}; done
#
# mpmap, map, and giraffe for each sample
#
#############################
#--- Merged 150bp+ reads ---#
#---   Align to graph    ---#
#############################
SRR7471499_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471499_pear.assembled.150bp.fastq'
SRR7471500_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471500_pear.assembled.150bp.fastq'
SRR7471501_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471501_pear.assembled.150bp.fastq'
SRR7471502_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471502_pear.assembled.150bp.fastq'
SRR7471513_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471513_pear.assembled.150bp.fastq'
#
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/
ALL44DIR=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
#
## GIRAFFE mapping with default setting
for each in ${ALL44DIR}/HBV_44refs.seqwish_norm.vg;do export FNAME="${each##*/}";export BASE="${FNAME%.vg}"; echo $FNAME; echo $BASE;
#
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $SRR7471499_150bp -o gam -p > ${BASE}"_SRR7471499_150bp.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $SRR7471500_150bp -o gam -p > ${BASE}"_SRR7471500_150bp.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $SRR7471501_150bp -o gam -p > ${BASE}"_SRR7471501_150bp.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $SRR7471502_150bp -o gam -p > ${BASE}"_SRR7471502_150bp.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $SRR7471513_150bp -o gam -p > ${BASE}"_SRR7471513_150bp.gam"
done
#
# also use vg map for the 150bp+ reads, improvement over linear mappers?
SRR7471501_150bp='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/SRR7471501_pear.assembled.150bp.fastq'
graphdir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/"
vg map -x $graphdir'HBV_44refs.seqwish_norm.xg' -g $graphdir'HBV_44refs.seqwish_norm.gcsa' -f $SRR7471501_150bp --log-time > ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/HBV_44refs.SRR7471501_150bp_seqwish_map.gam
##
#
#####################################################
############ Graph alignment comparisons ############
#####################################################
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/
# -- ./pggb_ref/all44_wfmash
#
#----------------------
# -- file locations
#----------------------
#-- 12 genotypes --#
# core 12: 2 sets of randomly subsampled reads, 25k coverage
coreseq1=~/work/dduchen3/projects/HBV/reference/simulated_reads/core12/core12_random1234.fastq.gz
coreseq1_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/core12/core12_random1234_R1.fastq.gz
coreseq1_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/core12/core12_random1234_R2.fastq.gz
coreseq2=~/work/dduchen3/projects/HBV/reference/simulated_reads/core12/core12_random321.fastq.gz
coreseq2_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/core12/core12_random321_R1.fastq.gz
coreseq2_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/core12/core12_random321_R2.fastq.gz
#-- 44 genotypes --#
# miseq error model:
all44seq1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random1234.fastq
all44seq1_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random1234_R1.fastq.gz
all44seq1_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random1234_R2.fastq.gz
all44seq2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random321.fastq
all44seq2_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random321_R1.fastq.gz
all44seq2_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random321_R2.fastq.gz
all44seq3=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random999.fastq
all44seq3_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random999_R1.fastq.gz
all44seq3_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random999_R2.fastq.gz
all44seq4=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random729.fastq
all44seq4_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random729_R1.fastq.gz
all44seq4_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random729_R2.fastq.gz
all44seq5=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random109.fastq
all44seq5_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random109_R1.fastq.gz
all44seq5_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random109_R2.fastq.gz
all44seq6=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random2021.fastq
all44seq6_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random2021_R1.fastq.gz
all44seq6_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random2021_R2.fastq.gz
all44seq7=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random2.fastq
all44seq7_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random2_R1.fastq.gz
all44seq7_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_random2_R2.fastq.gz
# hiseq error model:
all44seq1_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random1234_R1.fastq.gz
all44seq1_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random1234_R2.fastq.gz
all44seq2_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random321_R1.fastq.gz
all44seq2_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random321_R2.fastq.gz
all44seq3_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random999_R1.fastq.gz
all44seq3_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random999_R2.fastq.gz
all44seq4_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random729_R1.fastq.gz
all44seq4_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random729_R2.fastq.gz
all44seq5_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random109_R1.fastq.gz
all44seq5_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random109_R2.fastq.gz
all44seq6_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random2021_R1.fastq.gz
all44seq6_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random2021_R2.fastq.gz
all44seq7_R1=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random2_R1.fastq.gz
all44seq7_R2=~/work/dduchen3/projects/HBV/reference/simulated_reads/all44_hiseq_random2_R2.fastq.gz
#-- simulated reads from non-44 reference sequences (hiseq error, every genotype + 50 randoms) --#
#non44seq_R1=~/work/dduchen3/projects/HBV/reference/allqc_refs/HBV_no44refs_simreads_MODELmiseq_R1.fastq #50 random only
#non44seq_R2=~/work/dduchen3/projects/HBV/reference/allqc_refs/HBV_no44refs_simreads_MODELmiseq_R2.fastq #50 random only
non44seq_R1=~/work/dduchen3/projects/HBV/reference/allqc_refs/HBV_no44refs_simreads_MODELhiseq_R1.fastq #59 seqs
non44seq_R2=~/work/dduchen3/projects/HBV/reference/allqc_refs/HBV_no44refs_simreads_MODELhiseq_R2.fastq #59 seqs
# # to split these into individual fastq files:
conda activate seqkit
cd ~/work/dduchen3/projects/HBV/reference/allqc_refs/indiv_fastq
awk -F '\t' '{print $1}' ../HBV_no44refs_simreads_MODELmiseq_abundance.txt > non44_hiseq_sample_ids.txt
for i in $(cat non44_hiseq_sample_ids.txt);do seqkit grep -r -p $i ../HBV_no44refs_simreads_MODELmiseq_R1.fastq > ./hiseq_model/$i\_R1.fastq ;
seqkit grep -r -p $i ../HBV_no44refs_simreads_MODELmiseq_R2.fastq > ./hiseq_model/$i\_R2.fastq ; done
#
#
#------------------------------------------------------------------------------------------#
################################################
####### ----- PGGB Reference Graph ----- #######
################################################
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/
ALL44DIR=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
#ALL44DIR=~/work/dduchen3/projects/HBV/reference/all44_refs/HBV_44refs_minwish
#
#
## GIRAFFE mapping with default setting
for each in ${ALL44DIR}/*norm.vg;do export FNAME="${each##*/}";export BASE="${FNAME%.vg}"; echo $FNAME; echo $BASE;
# miseq error models:
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq1_R1 -f $all44seq1_R2 -o gam -p > ${BASE}"_sim44_1.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq2_R1 -f $all44seq2_R2 -o gam -p > ${BASE}"_sim44_2.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq3_R1 -f $all44seq3_R2 -o gam -p > ${BASE}"_sim44_3.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq4_R1 -f $all44seq4_R2 -o gam -p > ${BASE}"_sim44_4.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq5_R1 -f $all44seq5_R2 -o gam -p > ${BASE}"_sim44_5.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq6_R1 -f $all44seq6_R2 -o gam -p > ${BASE}"_sim44_6.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq7_R1 -f $all44seq7_R2 -o gam -p > ${BASE}"_sim44_7.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $non44seq_R1 -f $non44seq_R2 -o gam -p > ${BASE}"_sim44_Non44.gam"
done
#
# hiseq error model
# - use normalized seqish graph
BASE="HBV_44refs.seqwish_norm";echo $BASE;
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq1_R1 -f $all44seq1_R2 -o gam -p > ${BASE}"_hiseq_sim44_1.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq2_R1 -f $all44seq2_R2 -o gam -p > ${BASE}"_hiseq_sim44_2.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq3_R1 -f $all44seq3_R2 -o gam -p > ${BASE}"_hiseq_sim44_3.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq4_R1 -f $all44seq4_R2 -o gam -p > ${BASE}"_hiseq_sim44_4.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq5_R1 -f $all44seq5_R2 -o gam -p > ${BASE}"_hiseq_sim44_5.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq6_R1 -f $all44seq6_R2 -o gam -p > ${BASE}"_hiseq_sim44_6.gam"
~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $all44seq7_R1 -f $all44seq7_R2 -o gam -p > ${BASE}"_hiseq_sim44_7.gam"
for i in *_hiseq_*gam; do echo $i;
~/work/dduchen3/tools/vg stats -a $i >$i\.stats
done
# all ~100% mapped
# time this - along with getting stats:
BASE="HBV_44refs.seqwish_norm";echo $BASE;
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/
ALL44DIR=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
# time this for comparisons:
time (~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $non44seq_R1 -f $non44seq_R2 -o gam -t 16 -p > Simulations_Non44_HiSeq_giraffe.gam
~/tools/vg stats -a Simulations_Non44_HiSeq_giraffe.gam >Simulations_Non44_HiSeq_giraffe.stats)
# illumina HiSeq error model, simulated from 59 HBV genomes
# Memory footprint: 0.424103 GB
# time:
# real    11m38.255s
# user    53m55.414s
# sys     3m2.916s
# -- timing with no stats:
time (~/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $non44seq_R1 -f $non44seq_R2 -o gam -t 16 -p > test_time.gam)
# Memory footprint: 0.424919 GB
# real    11m16.401s
# user    51m47.210s
# sys     3m37.237s
#
time (~/tools/vg giraffe -b fast -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $non44seq_R1 -f $non44seq_R2 -o gam -t 16 -p > Simulations_Non44_HiSeq_giraffe_fast.gam
~/tools/vg stats -a Simulations_Non44_HiSeq_giraffe_fast.gam >Simulations_Non44_HiSeq_giraffe_fast.stats)
# method = fast - same exact number of reads mapped
# real    11m35.783s
# user    53m58.471s
# sys     2m37.162s
# 499984/500002 reads aligned
# 87731/499984 perfect alignments
# -- timing with no stats:
time (~/tools/vg giraffe -b fast -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $non44seq_R1 -f $non44seq_R2 -o gam -t 16 -p > test_time.gam)
# Memory footprint: 0.424919 GB
# real    11m16.401s
# user    51m47.210s
# sys     3m37.237s
#
time (~/tools/vg map -x $ALL44DIR'HBV_44refs.seqwish_norm.xg' -g $ALL44DIR'HBV_44refs.seqwish_norm.gcsa' -1 $ALL44DIR'HBV_44refs.seqwish_norm.augmented.gbwt' -f $non44seq_R1 -f $non44seq_R2 -t 16 > Simulations_Non44_HiSeq_map.gam
~/tools/vg stats -a Simulations_Non44_HiSeq_map.gam >Simulations_Non44_HiSeq_map.stats)
#real    877m34.525s
#user    1689m27.318s
#sys     65m37.446s <---- baaaaaad
# 498757/500002 reads aligned, slightly less than giraffe -
# 221539/498757 perfect alignments - MANY more perfectly aligned reads
#
########################
# Figure for manuscript
#########################
# -- get depth across graph for the giraffe mapping of the hiseq reads
#
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/
ALL44DIR=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
#~/work/dduchen3/tools/vg gamsort Simulations_Non44_HiSeq_giraffe.gam -p > Simulations_Non44_HiSeq_giraffe.sorted.gam
#~/work/dduchen3/tools/vg pack -x ${ALL44DIR}'HBV_44refs.seqwish_norm.xg' -b 1 -g Simulations_Non44_HiSeq_giraffe.sorted.gam -o Simulations_Non44_HiSeq_giraffe.pack ;
#~/work/dduchen3/tools/vg depth ${ALL44DIR}'HBV_44refs.seqwish_norm.vg' -m 10 -k Simulations_Non44_HiSeq_giraffe.pack > Simulations_Non44_HiSeq_giraffe.depth
# play with -b?
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/")
dat<-read.delim("Simulations_Non44_HiSeq_giraffe.depth",header=F)
colnames(dat)<-c("ref","pos","depth")
# take the highest reference-specific coverage for each locus
depthmax<-ddply(dat, c("pos"), summarise,
           coverage_median = median(depth),
           coverage_max = max(depth))
#
library(zoo)
depth_rolling_max<-rollapply(depthmax$coverage_max, width = 125, by = 1, FUN = max, na.rm = FALSE, align = "left")
depth_rolling_median<-rollapply(depthmax$coverage_median, width = 125, by = 1, FUN = median, na.rm = FALSE, align = "left")
# average between max/median across all the 44 refs
depth_rolling_est<-(depth_rolling_max+depth_rolling_median)/2
plot(depth_rolling_est)
#
# exclude extreme outliers
depthmax_filt<-depthmax[depthmax$coverage_max<30000,]
depth_rolling_max<-rollapply(depthmax_filt$coverage_max, width = 125, by = 1, FUN = max, na.rm = FALSE, align = "left")
depth_rolling_median<-rollapply(depthmax_filt$coverage_median, width = 125, by = 1, FUN = median, na.rm = FALSE, align = "left")
# average between max/median across all the 44 refs
depth_rolling_est<-(depth_rolling_max+depth_rolling_median)/2
plot(depth_rolling_est)
#
#
# alternatively - base coverage on some inference using start site of mapping position to linear ref...
#worst case - annotate with respect to a specific linear reference sequence
~/work/dduchen3/tools/vg annotate -a Simulations_Non44_HiSeq_giraffe.sorted.gam -x $ALL44DIR'HBV_44refs.seqwish_norm.xg' -p >Simulations_Non44_HiSeq_giraffe.sorted.annotated.gam
~/work/dduchen3/tools/vg view -aj Simulations_Non44_HiSeq_giraffe.sorted.annotated.gam | jq -r '[.name] + if .refpos != null then [.refpos[] | .name, if .offset != null then .offset else 0 end] else [] end | @tsv' > Simulations_Non44_HiSeq_giraffe.sorted.annotated.positions.tsv
#
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/")
library(dplyr);library(plyr)
dat<-read.delim(file="Simulations_Non44_HiSeq_giraffe.sorted.annotated.positions.tsv",sep="\t",header=F)
dat_filt<-dat[!is.na(dat$V57),] # B2_2_GU815637 reference
# unaligned reads align elsewhere?
dat_unaligned<-dat[is.na(dat$V57),] # B2_2_GU815637 reference
dat_unaligned<-dat_unaligned[rowSums(is.na(dat_unaligned[ ,2:ncol(dat_unaligned)])) < 44, ]
dat_unaligned$geno<-sub(".*?_","",dat_unaligned$V1)
dat_unaligned$geno<-gsub("_.*$","",dat_unaligned$geno)
dat_unaligned<-dat_unaligned[,c("V1","V3","geno")]
colnames(dat_unaligned)<-c("read","pos","geno")
#
dat_filt$geno<-sub(".*?_","",dat_filt$V1)
dat_filt$geno<-gsub("_.*$","",dat_filt$geno)
dat_filt<-dat_filt[,c("V1","V57","geno")]
colnames(dat_filt)<-c("read","pos","geno")
#
dat<-rbind(dat_filt,dat_unaligned)
dat<-dat[order(dat$pos),]
#
datsum<-ddply(dat, c("pos"), summarise,
           coverage = length(pos))
datsum$pos<-datsum$pos+1 # start pos = 1
# add missing rows + fill in
hbv_index<-data.frame(1:max(datsum$pos)); colnames(hbv_index)<-"pos"
joined_df <- merge(hbv_index, datsum, by.x = "pos", by.y = "pos", all.x = TRUE)#, all.y = FALSE)
#
library(tidyr)
joined_df<-joined_df %>% fill(coverage)
#
#
library(zoo)
# obtain approximate coverages
# HiSeq reads=125bp
# median start sites across the reads, then derive coverage
#datsum_avg<-rollapply(datsum$coverage, width = 125, by = 1, FUN = mean, na.rm = FALSE, align = "left")
datsum_avg<-rollapply(datsum$coverage, width = 125, by = 1, FUN = median, na.rm = FALSE, align = "left")
#test<-rollapply(datsum$coverage, width = 125, by = 1, FUN = sum, na.rm = FALSE, align = "left") ; plot(test)
test<-rollapply(datsum_avg, width = 125, by = 1, FUN = sum, na.rm = FALSE, align = "left") ; plot(test)
# # average distribution across genome, technically values starting from ~100bp
#
# from above:
#save(seq_aln,dat_genotype,coverage,diversity,coverage_variation,ref_genome,file="~/JHSPH/Research/HBV/Reference_Testing/real_reads/Simulated_HighDiversity_linear_coverage_materials.R")
load("~/JHSPH/Research/HBV/Reference_Testing/real_reads/Simulated_HighDiversity_linear_coverage_materials.R")
# -- from estimated average graph depth
int_value<-max(dat_genotype$locus)/length(depth_rolling_est)
coverage_positions<-1:length(depth_rolling_est)%o%int_value
coverage_positions<-round(coverage_positions,0)
graph_coverage<-data.frame(cbind(coverage_positions,depth_rolling_est))
# -- from annotated positions of each read
int_value<-max(dat_genotype$locus)/length(test)
coverage_positions<-1:length(test)%o%int_value
coverage_positions<-round(coverage_positions,0)
graph_coverage<-data.frame(cbind(coverage_positions,test))
#
colnames(graph_coverage)<-c("pos","coverage")
graph_coverage$variable<-"Graph"
#
#
library(ggplot2)
library(MetBrewer)
library(reshape)
coverage_variation_geno<-ggplot(dat_genotype, aes(x=locus, y=value, color=variable)) +
                            geom_line(size=1.5,alpha=0.5) + #geom_point(size=1, alpha=0.05) +
                            ylab("Coverage") + xlab("") + theme_bw() +
                            xlim(c(0,3247)) +
                            geom_point(data=graph_coverage,aes(x=pos,y=coverage),size=1, alpha=0.75) +
                            #geom_smooth(data=graph_coverage,aes(x=pos,y=coverage),method = "loess", span = 0.05, method.args = list(degree=1),se=T) +
                            theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) +
                                    theme(axis.title.x=element_blank(),
                                    axis.text.x=element_blank(),
                                    axis.ticks.x=element_blank()) +
                            theme(legend.position="none") +
                            scale_y_continuous(position = "right")
                            #scale_color_discrete(name="HBV Reference") #+
                            #scale_color_manual(name="",values=c(met.brewer("Hiroshige", n=11,type="continuous")))
#
gff<-fread("~/JHSPH/Research/HBV/Reference_Testing/HBV_reference_B2_2_GU815637_manual_edit.gff",header=F)
colnames(gff)<-c("seqname","source","feature","start","end","strand","frame","score","attribute")
gff$gene<-gsub("^.*gene=","",gff$attribute)
gff$gene<-gsub(" .*$","",gff$gene)
gff$gene[1]<-NA
gff$orientation<-ifelse(gff$start<gff$end,1,-1)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205"),"-",gff$strand)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205","1374"),"-",gff$strand)
#
#
library("gggenes") # https://github.com/wilkox/gggenes
library(gggenomes);library(MetBrewer)
gff$seq_id<-"HBV"
ref_genome<-gggenomes(genes=gff[gff$feature=="gene",]) +
    geom_gene(aes(fill=gene), position="pile",size=5,stroke=0.5) + #position="sixframe", position="pile"
    scale_fill_manual(name="",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
    scale_y_continuous(limits=c(0.8, 1.3), expand = c(0, 0)) +
    scale_x_continuous(limits=c(0, 3215), n.breaks=20) +
    guides(linetype="none",color="none") +
    theme(legend.position="bottom") +
    theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) + #theme_classic() +
                                  theme(axis.title.y=element_blank(),
                                  axis.text.y=element_blank(),
                                  axis.ticks.y=element_blank()) + xlab("HBV Genome (Position)")
#
load("~/JHSPH/Research/HBV/Reference_Testing/mapping/alignment_stats/HiSeq_non44_SimulationResults.R")
library(ggrepel)
test<-simulated %>%
  group_by(group) %>%
  mutate(label = ifelse(mapped_percent %in% range(mapped_percent), paste0(mapped_percent,":",subgenotype), ''))
test$label<-ifelse(test$genotype=="Graph",paste0(test$mapped_percent,":",test$subgenotype),test$label)
# unique labels only
test$label<-gsub(":","%:",test$label)
#
simulation_results<-ggplot(test,aes(x=group,y=mapped_percent,fill=genotype,label=label)) +
  theme_bw() + geom_dotplot(aes(fill=genotype),dotsize=2,color="black", alpha=0.75,binaxis='y',method="histodot",
                            stackdir='center',position=position_dodge(width=0.5),stackratio=0.5, binwidth=0.15) +
  ylab("% Reads Aligned") + xlab("Simulated reads (N=500k)\n59 diverse HBV Genomes") +
  geom_label_repel(show.legend = FALSE,max.overlaps=20,min.segment.length = Inf,fill="transparent",size=3) +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) + scale_fill_discrete(name="Reference") +
  theme(legend.position="right")
simulation_results
#--
library(patchwork)
#coverage_variation_geno + simulation_results+ref_genome + plot_layout(ncol = 2, widths=c(0.7,0.3), heights=c(0.925,0.075))
p2<-simulation_results + plot_spacer() + coverage_variation_geno +
    plot_spacer() +plot_spacer() +ref_genome + plot_layout(ncol=3,widths = c(2.5, -0.225 ,6.5),heights=c(0.925,0.075))
#ggsave(filename="SimulatedReads_Non44_AlignmentCoverage_wGraph.png", plot=p2, device="png",width = 10,height=6,units=c("in"),dpi=1000)
###########################################################
######################--- Figure 1 ---#####################
ggsave(filename="SimulatedReads_Non44_AlignmentCoverage_wGraph.svg", plot=p2, device="svg",width = 10,height=6,units=c("in"),dpi=1000)
###########################################################
#
#
# add vertical lines
#
coverage_variation_tmp<-ggplot(dat_genotype, aes(x=locus, y=value, color=variable)) +
                            geom_point(size=1, alpha=0.05) + geom_line(alpha=0.5) +
                            ylab("Coverage") + xlab("Reference Position") + theme_bw() +
                            xlim(c(0,3247))
#
p <- ggplot_build(coverage_variation_tmp)
p<-p$data[[2]]
# get average density value across each group at each position x
library(plyr)
mu_maxima <- ddply(p, .(x), summarize,
            mean_density=mean(y))
mu_maxima$mean_density<-scale(log(mu_maxima$mean_density))
library(ggpmisc)
valleys<-ggplot(mu_maxima, aes(x=x,y=mean_density)) +
              stat_valleys(data=mu_maxima,span=201, strict=TRUE, colour = "red") +
              theme_bw() +
              stat_valleys(data=mu_maxima,span=201, strict=TRUE, geom = "rug", colour = "red", sides = "b")
#
annotations_lines<-ggplot_build(valleys)
annotations_lines<-as.numeric(annotations_lines[[1]][[2]]$label)
# -- add vertical lines to both plots!
diversity_lines<-diversity+geom_vline(xintercept = annotations_lines,alpha=0.5,size=1,color="grey80") + theme_classic()
coverage_variation<-coverage_variation_geno+geom_vline(xintercept = annotations_lines,alpha=0.5,size=1,color="grey80") + theme_classic()
#
gff<-fread("~/JHSPH/Research/HBV/Reference_Testing/HBV_reference_B2_2_GU815637_manual_edit.gff",header=F)
colnames(gff)<-c("seqname","source","feature","start","end","strand","frame","score","attribute")
gff$gene<-gsub("^.*gene=","",gff$attribute)
gff$gene<-gsub(" .*$","",gff$gene)
gff$gene[1]<-NA
gff$orientation<-ifelse(gff$start<gff$end,1,-1)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205"),"-",gff$strand)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205","1374"),"-",gff$strand)
#
#
library("gggenes") # https://github.com/wilkox/gggenes
library(gggenomes);library(MetBrewer)
gff$seq_id<-"HBV"
ref_genome<-gggenomes(genes=gff[gff$feature=="gene",]) +
    geom_gene(aes(fill=gene), position="pile",size=5,stroke=0.5) + #position="sixframe", position="pile"
    scale_fill_manual(name="",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
    scale_y_continuous(limits=c(0.8, 1.3), expand = c(0, 0)) +
    scale_x_continuous(limits=c(0, 3247), n.breaks=20) +
    guides(linetype="none",color="none") +
    theme(legend.position="bottom")
#top: theme(plot.margin=unit(c(1,1,0,1), "cm"))
#middle: theme(plot.margin=unit(c(-0.05,1,0,1), "cm"))
#bottom: theme(plot.margin=unit(c(-0.05,1,1,1), "cm"))
#
diversity_lines<-diversity_lines+theme(plot.margin=unit(c(1,1,0,1), "cm"))+
        theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
coverage_variation<- coverage_variation+ theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) +
        theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
        scale_y_continuous(position = "left") +
        scale_color_discrete(name="HBV Reference")
# add vertical lines to reference gff
ref_genome<-ref_genome+theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) + #theme_classic() +
                              theme(axis.title.y=element_blank(),
                              axis.text.y=element_blank(),
                              axis.ticks.y=element_blank()) + xlab("HBV Genome (Position)") +
                              geom_vline(xintercept = annotations_lines,alpha=0.5,size=1,color="grey80")
#
pl2<-diversity_lines + coverage_variation + ref_genome + plot_layout(ncol = 1,heights=c(0.3,0.6,0.1))
#ggsave(filename="PairwiseNucleotideDiversity_SimualtedReads_Non44_AlignmentCoverage_wGraph_simplified.png", plot=pl2, device="png",width = 10,height=8,units=c("in"),dpi=1000)
#--
#
##########################################################
# -- Simulated reads from non-graph HBV genotypes B/C -- #
cd /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/allqc_refs/simulated_bc
#
ALL44DIR=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
simBC_R1='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/allqc_refs/indiv_fastq/hiseq_model/geno_BC_R1.fastq'
simBC_R2='/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/allqc_refs/indiv_fastq/hiseq_model/geno_BC_R2.fastq'
REFSPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/"
OUTPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/allqc_refs/simulated_bc/"
# linear reference alignments
#echo file num_reads mapped_reads secondary_aln mapped_percent > Simulated_BC_mapping_summary.txt
#
ml bwa
ml samtools
for each in $REFSPATH*.fasta;
do export REF="${each##*/}"; echo $REFSPATH${REF};
export specificRef=${REF##*Sequence_}; export specificRef=${specificRef%*.fasta};
cd $OUTPATH;
bwa mem -t 16 -M $REFSPATH${REF} $simBC_R1 $simBC_R2 | samtools view -Sb - | samtools sort - > sim_BC_${specificRef}.bam;
# stats
samtools flagstat sim_BC_${specificRef}.bam > sim_BC_${specificRef}.stats;
done
#
for each in *.stats; do sh ~/work/dduchen3/projects/HBV/reference/linear_mapping_stats.sh $each >> Simulated_BC_mapping_summary.txt;
done
#
# graph mapping
BASE=HBV_44refs.seqwish_norm
~/work/dduchen3/tools/vg giraffe -Z $ALL44DIR/${BASE}'.giraffe.gbz' -x $ALL44DIR/${BASE}'.xg' -H $ALL44DIR/${BASE}'.augmented.gbwt' -m $ALL44DIR/${BASE}'.min' -d $ALL44DIR/${BASE}'.dist' -f $simBC_R1 -f $simBC_R2 -o gam -t 16 -p > simBC.gam
~/work/dduchen3/tools/vg stats -a simBC.gam > simBC_giraffe.stats
echo file reads primary_aln secondary_aln aligned perfect_aln paired_reads proper_pair mapped_percent perfect_percent > simBC_giraffe_stats.txt
sh ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/giraffe_map_summary_stats.sh simBC_giraffe.stats >> simBC_giraffe_stats.txt
#
# linear alignment coverage:
ls *.bam > Simulations_hiseq_BC_mapped_bams.txt
samtools depth -aa -d 0 -f Simulations_hiseq_BC_mapped_bams.txt > Simulations_hiseq_BC_coverage_depth.tsv
#
# graph alignment - coverage
~/work/dduchen3/tools/vg gamsort simBC.gam -p > simBC.sorted.gam
~/work/dduchen3/tools/vg annotate -a simBC.sorted.gam -x $ALL44DIR'HBV_44refs.seqwish_norm.xg' -p >simBC.sorted.annotated.gam
~/work/dduchen3/tools/vg view -aj simBC.sorted.annotated.gam | jq -r '[.name] + if .refpos != null then [.refpos[] | .name, if .offset != null then .offset else 0 end] else [] end | @tsv' > simBC.sorted.annotated.positions.tsv
#
# proportion reads aligned for B/C references
R
options(stringsAsFactors=F);library(data.table)
linearmap<-fread("Simulated_BC_mapping_summary.txt")
linearmap$subgenotype<-gsub("sim_BC_","",linearmap$file) ; linearmap$subgenotype<-gsub("_.*$","",linearmap$subgenotype)
linearmap$genotype<-sub("^(\\w).*$", "\\1", linearmap$subgenotype)
linearmap<-linearmap[linearmap$genotype %in% c("B","C"),]
graph<-fread("simBC_giraffe_stats.txt")
graph$genotype<-"Graph" ; graph$subgenotype<-"Graph"
graph$mapped_percent<-graph$mapped_percent*100
#
dat<-rbind(graph[,c("file","mapped_percent","genotype","subgenotype")],
           linearmap[,c("file","mapped_percent","genotype","subgenotype")])
#fwrite(dat,file="Simulation_genoBC_PropAligned.txt",quote=F,col.names=T,row.names=F,sep="\t")
setwd("~/JHSPH/Research/HBV/Reference_Testing/simulated_reads_mash/")
dat<-fread("~/JHSPH/Research/HBV/Reference_Testing/simulated_reads_mash/Simulation_genoBC_PropAligned.txt")
#
graph<-dat %>%
    subset(genotype %in% c("Graph")) %>%
    mutate(label = ifelse(mapped_percent %in% max(mapped_percent), paste0(mapped_percent,":",genotype), ''))
dat_C<-dat %>%
    subset(genotype %in% c("C")) %>%
    mutate(label = ifelse(mapped_percent %in% range(mapped_percent), paste0(mapped_percent,":",genotype), ''))
dat_B<-dat %>%
    subset(genotype %in% c("B")) %>%
    mutate(label = ifelse(mapped_percent %in% range(mapped_percent), paste0(mapped_percent,":",genotype), ''))
test<-rbind(graph,dat_C,dat_B)
test$label<-gsub(":","%:",test$label)
#
test$sample<-"Simulation"
graph_results<-ggplot(test,aes(x=sample,y=mapped_percent,fill=genotype,label=label)) +
  theme_bw() + geom_dotplot(aes(fill=genotype),dotsize=0.25,color="black", alpha=0.75,binaxis='y',
                            stackdir='center',position=position_dodge(width=0),stackratio=0.5, binwidth=0.25) +
  ylab("% Reads Aligned") + xlab("") + labs(fill="Reference") + ylim(c(97,100.1)) +
  geom_label_repel(x=1,show.legend = FALSE,min.segment.length = Inf,fill="transparent",size=3)
graph_results
#ggsave(filename="Simulated_GenoBC_Alignment_Comparisons_05282022.png", plot=graph_results, device="png",width = 4,height=6,units=c("in"),dpi=500)
############################################
#### --- Coverage across the genome --- ####
setwd("~/JHSPH/Research/HBV/Reference_Testing/simulated_reads_mash/")
#
coverage<-read.table("Simulations_hiseq_BC_coverage_depth.tsv", sep="\t", header=F)
bams<-read.table("Simulations_hiseq_BC_mapped_bams.txt",header=F)
colnames(coverage)<-c("ref","locus",bams$V1)
colnames(coverage)<-gsub("sim_BC_","",colnames(coverage))
colnames(coverage)<-gsub(".bam","",colnames(coverage))
library(reshape)
dat<-melt(coverage, id.vars = c('ref','locus'))
dat<-dat[,-1]
dat$genotype<-sub("^(\\w).*$", "\\1", dat$variable)
#
# want a simplified version for manuscript figure - rolling average by genotype
cov_smoothed<-data.frame(1:3247)
library(zoo)
for(i in seq(unique(dat$genotype))){
  genotype<-unique(dat$genotype)[i]
  print(genotype)
  temp_dat<-dat[dat$genotype==genotype,] ; temp_dat<-droplevels(temp_dat)
# rolling average for each sequence
  for(j in seq(unique(temp_dat$variable))){
    subgeno<-as.character(unique(temp_dat$variable)[j])
    test<-rollapply(dat[dat$variable==subgeno,]$value, width = 50, by = 1, FUN = mean, na.rm = TRUE, align = "left")
    test<-data.frame(test)
    colnames(test)<-subgeno
    if(j==1){
    test2<-test
    }
    if(j>1){
      test2<-cbind(test2,test)
      }
    }
# get average for each genotype
  geno<-rowMeans(test2)
  geno<-data.frame(geno); colnames(geno)<-genotype
  if(i==1){
    genotype_averages<-geno
  }
  if(i>1){
    genotype_averages<-cbind(genotype_averages,geno)
    }
}
#
library(reshape)
genotype_averages$locus<-1:nrow(genotype_averages)
dat_genotype_bc<-melt(genotype_averages, id.vars = c('locus'))
#
coverage_variation_genoBC<-ggplot(dat_genotype_bc, aes(x=locus, y=value, color=variable)) +
                            geom_point(size=1, alpha=0.05) + geom_line(size=1.25,alpha=0.5) +
                            ylab("Coverage") + xlab("Reference Position") + theme_bw() +
                            xlim(c(0,3247))
# + graph
library(dplyr);library(plyr)
dat<-fread(file="simBC.sorted.annotated.positions.tsv",header=F)
dat_filt<-dat[!is.na(dat$V57),] # B2_2_GU815637 reference
# unaligned reads align elsewhere?
dat_unaligned<-dat[is.na(dat$V57),] # B2_2_GU815637 reference
dat_unaligned<-dat_unaligned[rowSums(is.na(dat_unaligned[ ,2:ncol(dat_unaligned)])) < 44, ]
dat_unaligned$geno<-sub(".*?_","",dat_unaligned$V1)
dat_unaligned$geno<-gsub("_.*$","",dat_unaligned$geno)
dat_unaligned<-dat_unaligned[,c("V1","V3","geno")]
colnames(dat_unaligned)<-c("read","pos","geno")
#
dat_filt$geno<-sub(".*?_","",dat_filt$V1)
dat_filt$geno<-gsub("_.*$","",dat_filt$geno)
dat_filt<-dat_filt[,c("V1","V57","geno")]
colnames(dat_filt)<-c("read","pos","geno")
#
dat<-rbind(dat_filt,dat_unaligned)
dat<-dat[order(dat$pos),]
#
datsum<-ddply(dat, c("pos"), summarise,
           coverage = length(pos))
datsum$pos<-datsum$pos+1 # start pos = 1
# add missing rows + fill in
hbv_index<-data.frame(1:max(datsum$pos)); colnames(hbv_index)<-"pos"
joined_df <- merge(hbv_index, datsum, by.x = "pos", by.y = "pos", all.x = TRUE)#, all.y = FALSE)
#
library(tidyr)
joined_df<-joined_df %>% fill(coverage)
#
library(zoo)
# obtain approximate coverages
# HiSeq reads=125bp
# median start sites across the reads, then derive coverage
#datsum_avg<-rollapply(datsum$coverage, width = 125, by = 1, FUN = mean, na.rm = FALSE, align = "left")
datsum_avg<-rollapply(datsum$coverage, width = 125, by = 1, FUN = median, na.rm = FALSE, align = "left")
#test<-rollapply(datsum$coverage, width = 125, by = 1, FUN = sum, na.rm = FALSE, align = "left") ; plot(test)
test<-rollapply(datsum_avg, width = 125, by = 1, FUN = sum, na.rm = FALSE, align = "left") ; plot(test)
# # average distribution across genome, technically values starting from ~100bp
# from above:
#save(seq_aln,dat_genotype_bc,diversity,coverage_variation_genoBC,file="~/JHSPH/Research/HBV/Reference_Testing/simulated_reads_mash/Simulated_BC_linear_coverage_materials.R")
load("~/JHSPH/Research/HBV/Reference_Testing/simulated_reads_mash/Simulated_BC_linear_coverage_materials.R")
#
int_value<-max(dat_genotype_bc$locus)/length(test)
coverage_positions<-1:length(test)%o%int_value
coverage_positions<-round(coverage_positions,0)
graph_coverage<-data.frame(cbind(coverage_positions,test))
colnames(graph_coverage)<-c("pos","coverage")
graph_coverage$variable<-"Graph"
#
#
library(ggplot2)
library(MetBrewer)
library(reshape)
coverage_variation_geno_bc<-ggplot(dat_genotype_bc, aes(x=locus, y=value, color=variable)) +
                            geom_line(size=1.5,alpha=0.5) + #geom_point(size=1, alpha=0.05) +
                            ylab("Coverage") + xlab("") + theme_bw() +
                            xlim(c(0,3247)) +
                            geom_point(data=graph_coverage,aes(x=pos,y=coverage),size=1, alpha=0.75) +
                            theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) +
                                    theme(axis.title.x=element_blank(),
                                    axis.text.x=element_blank(),
                                    axis.ticks.x=element_blank())
#
gff<-fread("~/JHSPH/Research/HBV/Reference_Testing/HBV_reference_B2_2_GU815637_manual_edit.gff",header=F)
colnames(gff)<-c("seqname","source","feature","start","end","strand","frame","score","attribute")
gff$gene<-gsub("^.*gene=","",gff$attribute)
gff$gene<-gsub(" .*$","",gff$gene)
gff$gene[1]<-NA
gff$orientation<-ifelse(gff$start<gff$end,1,-1)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205"),"-",gff$strand)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205","1374"),"-",gff$strand)
#
#
library("gggenes") # https://github.com/wilkox/gggenes
library(gggenomes);library(MetBrewer)
gff$seq_id<-"HBV"
ref_genome<-gggenomes(genes=gff[gff$feature=="gene",]) +
    geom_gene(aes(fill=gene), position="pile",size=5,stroke=0.5) + #position="sixframe", position="pile"
    scale_fill_manual(name="",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
    scale_y_continuous(limits=c(0.8, 1.3), expand = c(0, 0)) +
    scale_x_continuous(limits=c(0, 3215), n.breaks=20) +
    guides(linetype="none",color="none") +
    theme(legend.position="bottom") +
    theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) + #theme_classic() +
                                  theme(axis.title.y=element_blank(),
                                  axis.text.y=element_blank(),
                                  axis.ticks.y=element_blank()) + xlab("HBV Genome (Position)")
#
coverage_variation_geno_bc<- coverage_variation_geno_bc+ theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) +
        theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
        scale_color_discrete(name="HBV Reference")
# add vertical lines to reference gff
ref_genome<-ref_genome+theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) + #theme_classic() +
                              theme(axis.title.y=element_blank(),
                              axis.text.y=element_blank(),
                              axis.ticks.y=element_blank()) + xlab("HBV Genome (Position)")
#
pl2b<-coverage_variation_geno_bc + ref_genome + plot_layout(ncol = 1,heights=c(0.9,0.1))
#ggsave(filename="SimulatedReads_GenoBC_Non44_AlignmentCoverage_wGraph_simplified.png", plot=pl2b, device="png",width = 10,height=6,units=c("in"),dpi=1000)
#--
graph_results<- graph_results+theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
        theme(legend.position="bottom") +
        scale_fill_discrete(name="")
#
coverage_variation_geno_bc<-coverage_variation_geno_bc + scale_y_continuous(position = "right") +
                            theme(legend.position="right")
#
p2b<-graph_results + plot_spacer() + coverage_variation_geno_bc +
    plot_spacer() +plot_spacer() +ref_genome + plot_layout(ncol=3,widths = c(2.5, -0.225 ,6.5),heights=c(0.925,0.075))
#ggsave(filename="SimulatedReads_genoBC_Non44_AlignmentCoverage_wGraph.png", plot=p2b, device="png",width = 10,height=6,units=c("in"),dpi=1000)
#ggsave(filename="SimulatedReads_genoBC_Non44_AlignmentCoverage_wGraph.svg", plot=p2b, device="svg",width = 10,height=6,units=c("in"),dpi=1000)
#
#
#
# VG MAP these
# exploratory:
# map to circular reference graph
graphdir=~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/HBV_44refs_msga/
~/tools/vg map -x $graphdir'McNaughton_HBV_44refs_circ_norm.xg' -g $graphdir'McNaughton_HBV_44refs_circ_norm.gcsa' -1 $graphdir'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -f $non44seq_R1_hiseq -f $non44seq_R2_hiseq -t 16 > Simulations_Non44_HiSeq_circ_map.gam
# calc stats
# add to giraffe mapping? -- no for now, just use default settings. Consensus graph - - will revert to single-end
# --hit-cap 100 --hard-hit-cap 5000 --max-extensions 1000 --max-alignments 44
#
for i in *.gam; do echo $i;
~/work/dduchen3/tools/vg stats -a $i >$i\.stats
done
#
echo file reads primary_aln secondary_aln aligned perfect_aln paired_reads proper_pair mapped_percent perfect_percent> wfmash_pggb_sim_eval_real150bp_stats.txt
for each in *.stats; do sh ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/giraffe_map_summary_stats.sh $each >> wfmash_pggb_sim_eval_real150bp_stats.txt;
done
# # -- additional work on this below
cp wfmash_pggb_sim_eval_real150bp_stats.txt ~/wfmash_pggb_sim_eval_real150bp_stats.txt
#######################################
#######################################
# VG MAP -- all the reads
OUTPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref/"
graphdir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/"
DATAPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/"
#
cd $OUTPATH
FNAME=SRR7471501_1_qc.fastq
vg map -x $graphdir'HBV_44refs.seqwish_norm.xg' -g $graphdir'HBV_44refs.seqwish_norm.gcsa' -f $DATAPATH${FNAME} -f $DATAPATH${FNAME%_1_qc.fastq}"_2_qc.fastq" -t 16 -S 0 -u 1 --log-time > $OUTPATH${FNAME%_1_qc.fastq}"_seqwish_map.gam"
vg stats -a $OUTPATH${FNAME%_1_qc.fastq}"_seqwish_map.gam" > $OUTPATH${FNAME%_1_qc.fastq}"_seqwish_map.stats"
# SRR7471501_seqwish_map.gam --> 3214954/3415420 =0.941
#########################################################################################
#########################################################################################
#########################################################################################
#-------------------------------- Alignment comparisons --------------------------------#
#########################################################################################
#########################################################################################
#########################################################################################
#
# R script for plotting/analysis of mapping statistics
# ~/JHSPH/Research/HBV/Reference_Testing/mapping/graph_comparisons_script.R
#
#
#########################################################################################
#########################################################################################
#########################################################################################
# -- align simulated reads from 44 refs to the reference graph:
####for each in ${ALL44DIR}/*.vg;do export FNAME="${each##*/}";export BASE="${FNAME%.vg}"; echo $FNAME; echo $BASE;
# -- COMPARE TO LINEAR REFS
# -- THEN LOOK AT MAPPING VS. REAL SAMPLES - COMPARE TO LINEAR REFS
#
# --- Where are the unmapped reads distributed across the genome?
# can the unmapped reads map to the graph?
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads
ls ../SRR*bam > unmapped_bams.txt
#
ml samtools
for i in `cat unmapped_bams.txt`; do echo $i;
export i_cwd=${i##../};
#
# 1) An unmapped read whose mate is mapped.
# 2) A mapped read who’s mate is unmapped
# 3) Both reads of the pair are unmapped
#
samtools view -u -f 4 -F264 $i > tmps1.bam
samtools view -u -f 8 -F 260 $i > tmps2.bam
samtools view -u -f 12 -F 256 $i > tmps3.bam
samtools merge -u - tmps[123].bam | samtools sort -n -O BAM > ${i_cwd%.bam}'_unmapped.bam'
rm tmps[123].bam
done
#
# Best performing subgenotype -- linear references -> map to graph
ls *qc_B2_*.bam > best_linear_unmapped_bams.txt
#
graphdir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/"
# vg map can take bam files as input -- do this for best performing linear references
for i in `cat best_linear_unmapped_bams.txt`; do echo $i;
vg map -x $graphdir'HBV_44refs.seqwish_norm.xg' -g $graphdir'HBV_44refs.seqwish_norm.gcsa' -b $i -t 16 -S 0 -u 1 > ${i%.bam}'.gam'
done
# add positions of the read alignments
for i in `ls *_unmapped.gam`; do echo $i;
vg annotate -a $i -x $graphdir'HBV_44refs.seqwish_norm.xg' -p >${i%.gam}.annotated.gam;
done
for i in `ls *annotated.gam`; do echo $i;
vg view -aj $i | jq -r '[.name] + if .refpos != null then [.refpos[] | .name, if .offset != null then .offset else 0 end] else [] end | @tsv' > ${i%.gam}.positions.tsv
done
#
# -- R plot
#gff<-fread("~/JHSPH/Research/HBV/Reference_Testing/HBV_reference_B2_2_GU815637.gff",header=F)
# manual edits to wrap gene/cds regions around origin
gff<-fread("~/JHSPH/Research/HBV/Reference_Testing/HBV_reference_B2_2_GU815637_manual_edit.gff",header=F)
colnames(gff)<-c("seqname","source","feature","start","end","strand","frame","score","attribute")
gff$gene<-gsub("^.*gene=","",gff$attribute)
gff$gene<-gsub(" .*$","",gff$gene)
gff$gene[1]<-NA
gff$orientation<-ifelse(gff$start<gff$end,1,-1)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205"),"-",gff$strand)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205","1374"),"-",gff$strand)
#
#
library("gggenes") # https://github.com/wilkox/gggenes
library(gggenomes)
#
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/unmapped_reads_from_alignments")
# initial manuscript version:
graph_alns<-list.files(pattern="B2_1_JQ801514_unmapped.annotated.positions.tsv")
#graph_alns<-list.files(pattern="B2_2_GU815637_unmapped.annotated.positions.tsv")
fulldat<-data.frame()
library(dplyr);library(plyr)
for(i in 1:length(graph_alns)){
  dat<-read.delim(file=graph_alns[i],sep="\t",header=F)
  dat_filt<-dat[!is.na(dat$V57),] # B2_2_GU815637 reference
  dat_filt$sample<-gsub("\\..*$","",dat_filt$V1)
  dat_filt$read<-gsub("^.*\\.","",dat_filt$V1);
  dat_filt$read<-gsub("/.*$","",dat_filt$read)
  dat_filt$readpair<-gsub("^.*/","",dat_filt$V1)
  dat_filt$PE<-ifelse(duplicated(dat_filt$read),1,0)
  fulldat<-rbind(fulldat,dat_filt)
}
# sample-specific maxima
mu <- ddply(fulldat, "sample", summarise, grp.max=density(V57,adjust=1/10)$x[which.max(density(V57,adjust=1/10)$y)])
#
library(ggplot2)
library(ggpmisc)
library(ggrepel)
library(broom)
test<-ggplot(fulldat, aes(x=V57)) +
 geom_density(alpha=.4,aes(fill=sample), adjust=1/15) + theme_bw() +
 theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) + #geom_density(aes(x=V57)) + #will add lines for all unmapped reads, not just when both pairs are unmapped
 theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
        xlim(c(0,3225)) +
  scale_fill_manual(name="",values=c(met.brewer("Isfahan2", n=5,type="continuous"))) +
  theme(legend.position="top")
p <- ggplot_build(test)
p<-p$data[[1]]
# get average density value across each group at each position x
library(dplyr)
mu_maxima <- ddply(p, .(x), summarize,
            mean_density=mean(density))
#
mu_maxima$V57<-mu_maxima$x
mu_maxima$density<-mu_maxima$mean_density
peaks<-ggplot(mu_maxima, aes(x=V57,y=density)) + #geom_line() +
  stat_peaks(data=mu_maxima[mu_maxima$mean_density>0.0005,], colour = "red") +
  stat_peaks(data=mu_maxima[mu_maxima$mean_density>0.0005,], geom = "text", colour = "red", angle = 66,
             hjust = -0.1) + xlim(c(0,3225)) + theme_bw() +
  stat_peaks(data=mu_maxima[mu_maxima$mean_density>0.0005,], geom = "rug", colour = "red", sides = "b")
peaks
#
annotations_lines<-ggplot_build(peaks)
annotations_lines<-as.numeric(annotations_lines[[1]][[3]]$label)
#
#
test<-ggplot(fulldat, aes(x=V57)) +
 geom_density(alpha=.4,aes(fill=sample), adjust=1/10) + theme_bw() +
 theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
 theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
        geom_vline(xintercept=annotations_lines, color="red",
           linetype="dashed") + guides(linetype="none",color="none") +
           xlim(c(0,3225)) +
  scale_fill_manual(name="",values=c(met.brewer("Isfahan2", n=5,type="continuous"))) +
  theme(legend.position="top")  +
  stat_peaks(aes(y=density), data=mu_maxima[mu_maxima$mean_density>0.0005,], colour = "red", geom = "text", angle = 45,hjust=-0.1) #   stat_peaks(aes(y=density), data=mu_maxima[mu_maxima$mean_density>0.00075,], geom = "rug", colour = "red", sides = "b")
#
#
library(gggenomes);library(MetBrewer)
gff$seq_id<-"HBV"
ref_genome<-gggenomes(genes=gff[gff$feature=="gene",]) +
    geom_gene(aes(fill=gene), position="pile",size=5,stroke=0.5) + #position="sixframe", position="pile"
    scale_fill_manual(name="HBV",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
    scale_y_continuous(limits=c(0.8, 1.3), expand = c(0, 0)) +
    scale_x_continuous(limits=c(0, 3225), n.breaks=20) +
    geom_vline(xintercept=annotations_lines, color="red",
       linetype="dashed") + guides(linetype="none",color="none") +
    theme(legend.position="bottom")
#
#
library(gridExtra);library(grid)
bottom <- textGrob("VG MAP Rescued Mapped Reads\n", gp = gpar(fontsize = 15))
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/unmapped_reads_from_alignments")
# manuscript:
#png("VG_Map_remapped_reads_from_best_alignments_PE.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
# B2_2_GU815637 -->
#png("VG_Map_remapped_reads_from_B2_2_GU815637_PE.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  grid.arrange(test,ref_genome, nrow=2,heights=c(0.8, 0.25))
#dev.off()
# -- add pairwise diversity
#
library(Biostrings);library(data.table);options(stringsAsFactors=F);library(assertthat)
seq_aln<-readDNAStringSet("~/JHSPH/Research/HBV/Reference_Testing/McNaughton_alignment_HBV_references.fasta")
#
window_size <- 150 ; window_jump <- 20 ; window_start <- seq(from = 1, to = max(width(seq_aln)), by = window_jump) ; window_stop <- window_start + window_size
window_start <- window_start[which(window_stop < max(width(seq_aln)))] ; window_stop <- window_stop[which(window_stop < max(width(seq_aln)))]
windows <- data.frame(start = window_start, stop = window_stop,
                      mid = window_start + (window_stop-window_start)/2)
windows$hamming_dist_mean<-NA ; windows$hamming_dist_sd<-NA
windows$nucleotide_diversity<-NA ; windows$nucleotide_diversity_variance<-NA ; windows$gc<-NA
library(pegas)
# methods for classes "DNAbin" and "haplotype". The first method uses the sum of the number of differences between pairs of sequences divided by the number of comparisons (i.e. n(n - 1)/2, where n is the number of sequences). The second method uses haplotype frequencies. It could be that both methods give (slightly) different results because of missing or ambiguous nucleotides: this is generally solved by setting pairwise.deletion = TRUE.
# The variance of the estimated diversity uses formula (10.9) from Nei (1987). This applies only if all sequences are of the same lengths, and cannot be used if pairwise.deletion = TRUE. A bootstrap estimate may be in order if you insist on using the latter option.
for(i in 1:nrow(windows)){
  tmp<-subseq(seq_aln,start = windows$start[i],end=windows$stop[i])
  tmp2<-stringDist(tmp, method = "hamming", diag = FALSE, upper = FALSE, type="global")
  windows[i,]$hamming_dist_mean<-mean(tmp2)
  windows[i,]$hamming_dist_sd<-sd(tmp2)
  tmp2<-as.DNAbin(tmp)
  windows[i,]$gc<-GC.content(tmp2)
  tmp2<-nuc.div(tmp2, variance = TRUE, pairwise.deletion = FALSE)
  windows[i,]$nucleotide_diversity<-tmp2[1]
  windows[i,]$nucleotide_diversity_variance<-tmp2[2]
  rm(tmp2)
}
#
diversity<-ggplot(data=windows,aes(x=mid,y=nucleotide_diversity)) + geom_line(color="red") + theme_bw() +
      geom_ribbon(aes(ymin=nucleotide_diversity-nucleotide_diversity_variance, ymax=nucleotide_diversity+nucleotide_diversity_variance,fill = " "),fill = "red", alpha = 0.3) +
      ylab("Nucleotide Diversity\nReference Graph (N=44)") + xlab(NULL) +
#      scale_y_reverse() + #don't do this, makes explaining y axis harder
      theme(axis.title.x=element_blank(),
             axis.text.x=element_blank(),
             axis.ticks.x=element_blank()) +
       xlim(c(0,3247))
#
# -- add vertical lines to both plots!
diversity_lines<-diversity+geom_vline(xintercept=annotations_lines, color="red",
   linetype="dashed") + theme_classic()
coverage_variation<-test + theme_classic() + theme(legend.position="bottom")
#--
library(patchwork) # to align graphs of different areas
#
diversity_lines<-diversity_lines+theme(plot.margin=unit(c(1,1,0,1), "cm"))+
        theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
coverage_variation<- coverage_variation+ theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) +
        theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) + ylab("Graph-alignment:\nDensity of rescued alignments")
# add vertical lines to reference gff
ref_genome<-ref_genome +theme(plot.margin=unit(c(-0.05,1,0,1), "cm")) +
                              theme(axis.title.y=element_blank(),
                              axis.text.y=element_blank(),
                              axis.ticks.y=element_blank()) + xlab("HBV Genome (Position)")
#
pl2<-diversity_lines + coverage_variation + ref_genome + plot_layout(ncol = 1,heights=c(0.3,0.6,0.1))
#png("VG_Map_remapped_reads_from_best_alignments_PE_final.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
png("VG_Map_remapped_reads_from_B2_2_GU815637_PE_final.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  diversity_lines + coverage_variation + ref_genome + plot_layout(ncol = 1,heights=c(0.3,0.6,0.1))
dev.off()
#
########################################################
### --- graph rescued alignments ---
#ggsave(filename="VG_Map_remapped_reads_from_best_alignments_PE_final.svg", plot=pl2, device="svg",width = 12.5, height = 8.5,units=c("in"),dpi=1000)
#ggsave(filename="VG_Map_remapped_reads_from_B2_2_GU815637_PE_final.svg", plot=pl2, device="svg",width = 12.5, height = 8.5,units=c("in"),dpi=1000)
########################################################








#########################
# I have read positions for the path of interest - use the reference graph node mapping info now
load("~/JHSPH/Research/HBV/Reference_Testing/HBV_44Refs_pggb_wfmash_norm_Path_Specific_Nodes_wWeights.R")

# -- reads mapping to these regions:
# extract in R
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/unmapped_reads_from_alignments")
length(unique(paste0(fulldat[fulldat$PE==1,]$read,fulldat[fulldat$PE==1,]$sample)))
# 159,172 unique paired-end reads aligned successfully across the samples from second B2 subgenotype
# 115,253 unique paired-end reads aligned successfully across the samples from best performing linear B2 reference
# reads mapping to regions of interest
loci_interest<-round(annotations_lines)
#for(i in 1:length(annotations_lines)){
#  loci_interest<-c(loci_interest,c(c(round(annotations_lines)[i]-5):c(round(annotations_lines)[i]+5)))
#}
loci_interest<-unique(loci_interest)
# filter
dat_filt<-fulldat[fulldat$V57 %in% c(loci_interest) & fulldat$PE==1,] #49k reads with +/-50, 26k (~5k/sample) with +/- 5
# no range- still 500-1k reads per sample
#
# save sample-specific files --- narrow version
write.table(unique(dat_filt[dat_filt$sample=="SRR7471499",]$V1),file="VG_Map_remapped_PE_reads_ids_exact_SRR7471499.txt",quote=F,row.names=F,col.names=F)
write.table(unique(dat_filt[dat_filt$sample=="SRR7471500",]$V1),file="VG_Map_remapped_PE_reads_ids_exact_SRR7471500.txt",quote=F,row.names=F,col.names=F)
write.table(unique(dat_filt[dat_filt$sample=="SRR7471501",]$V1),file="VG_Map_remapped_PE_reads_ids_exact_SRR7471501.txt",quote=F,row.names=F,col.names=F)
write.table(unique(dat_filt[dat_filt$sample=="SRR7471502",]$V1),file="VG_Map_remapped_PE_reads_ids_exact_SRR7471502.txt",quote=F,row.names=F,col.names=F)
write.table(unique(dat_filt[dat_filt$sample=="SRR7471513",]$V1),file="VG_Map_remapped_PE_reads_ids_exact_SRR7471513.txt",quote=F,row.names=F,col.names=F)
#write.table(unique(dat_filt[dat_filt$sample=="SRR7471499",]$V1),file="VG_Map_remapped_PE_reads_ids_SRR7471499.txt",quote=F,row.names=F,col.names=F)
#write.table(unique(dat_filt[dat_filt$sample=="SRR7471500",]$V1),file="VG_Map_remapped_PE_reads_ids_SRR7471500.txt",quote=F,row.names=F,col.names=F)
#write.table(unique(dat_filt[dat_filt$sample=="SRR7471501",]$V1),file="VG_Map_remapped_PE_reads_ids_SRR7471501.txt",quote=F,row.names=F,col.names=F)
#write.table(unique(dat_filt[dat_filt$sample=="SRR7471502",]$V1),file="VG_Map_remapped_PE_reads_ids_SRR7471502.txt",quote=F,row.names=F,col.names=F)
#write.table(unique(dat_filt[dat_filt$sample=="SRR7471513",]$V1),file="VG_Map_remapped_PE_reads_ids_SRR7471513.txt",quote=F,row.names=F,col.names=F)
#
#
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads
#
graphdir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/"
#
i="SRR7471513_raw_qc_B2_2_GU815637_unmapped.annotated.gam"
# list read id then all of the nodes for that read
#vg view -aj $i | jq -cr '.name, [.path["mapping"] | .[]? | [.position] | .[]? | [.node_id]? | .[]?]' | less
#vg view -aj $i | jq -r '"\(.name)\t\(.path["mapping"] | .[]? | [.position] | .[]? | [.node_id]? | .[]?)"' | less
#3 cols, with sequence - for blast with circular ref?
# make files, then filter
for i in `ls *annotated.gam`; do echo $i;
vg view -aj $i | jq -r '"\(.name)\t\(.sequence)\t\(.path["mapping"] | .[]? | [.position] | .[] | [.node_id] | .[])"' > ${i%.annotated.gam}'.reads.alignments_wSequence_nodes.txt'
done
gzip *wSequence_nodes.txt
ll *wSequence_nodes.txt.gz
# filter down to reads of interest using the text files above -- visualize in Bandage on reference graph using list of nodes
ml R; R
options(stringsAsFactors=F);library(data.table)
pe_reads_SRR7471499="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_SRR7471499.txt"
pe_reads_SRR7471500="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_SRR7471500.txt"
pe_reads_SRR7471501="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_SRR7471501.txt"
pe_reads_SRR7471502="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_SRR7471502.txt"
pe_reads_SRR7471513="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_SRR7471513.txt"
#
pe_reads_SRR7471499_exact="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_exact_SRR7471499.txt"
pe_reads_SRR7471500_exact="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_exact_SRR7471500.txt"
pe_reads_SRR7471501_exact="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_exact_SRR7471501.txt"
pe_reads_SRR7471502_exact="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_exact_SRR7471502.txt"
pe_reads_SRR7471513_exact="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_exact_SRR7471513.txt"
#
sample<-"SRR7471499"
# 130154 aligned, 255026 total alignments
#MARCC
load("~/work/dduchen3/projects/HBV/genotyping/pangenome_ref/HBV_44Refs_pggb_wfmash_norm_Path_Specific_Nodes_wWeights.R")
load("~/JHSPH/Research/HBV/Reference_Testing/HBV_44Refs_pggb_wfmash_norm_Path_Specific_Nodes_wWeights.R")
str(hbv_44ref_complete)
hbv_44ref_complete<-hbv_44ref_complete[["B2_2_GU815637"]]
hbv_44ref_complete$nodes #1680 nodes for this path
# limit to the nodes in B2_2_GU815637, as the read position etc. was based on this?
dat499<-fread(file="SRR7471499_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz",sep="\t")
dat499<-dat499[dat499$V3 %in% hbv_44ref_complete$nodes,]
dat500<-fread(file="SRR7471500_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz",sep="\t")
dat500<-dat500[dat500$V3 %in% hbv_44ref_complete$nodes,]
dat501<-fread(file="SRR7471501_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz",sep="\t")
dat501<-dat501[dat501$V3 %in% hbv_44ref_complete$nodes,]
dat502<-fread(file="SRR7471502_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz",sep="\t")
dat502<-dat502[dat502$V3 %in% hbv_44ref_complete$nodes,]
dat513<-fread(file="SRR7471513_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz",sep="\t")
dat513<-dat513[dat513$V3 %in% hbv_44ref_complete$nodes,]
#
reads499<-fread(file=pe_reads_SRR7471499_exact,header=F)
reads500<-fread(file=pe_reads_SRR7471500_exact,header=F)
reads501<-fread(file=pe_reads_SRR7471501_exact,header=F)
reads502<-fread(file=pe_reads_SRR7471502_exact,header=F)
reads513<-fread(file=pe_reads_SRR7471513_exact,header=F)
#
# prep for csv file of nodes where reads align
dat499$graph<-ifelse(dat499$V1 %in% reads499$V1,1,0)
dat499$color<-ifelse(dat499$graph==1,"red","blue")
dat499<-dat499[order(dat499$graph,decreasing=T),]
dat499<-dat499[!duplicated(dat499$V3),]
table(dat499$graph)
#SRR7471499: 117/1667 nodes = 7% of nodes
dat500$graph<-ifelse(dat500$V1 %in% reads500$V1,1,0)
dat500$color<-ifelse(dat500$graph==1,"red","blue")
dat500<-dat500[order(dat500$graph,decreasing=T),]
dat500<-dat500[!duplicated(dat500$V3),]
table(dat500$graph)
#SRR7471500: 77/1667 nodes = 4.6% of nodes
dat501$graph<-ifelse(dat501$V1 %in% reads501$V1,1,0)
dat501$color<-ifelse(dat501$graph==1,"red","blue")
dat501<-dat501[order(dat501$graph,decreasing=T),]
dat501<-dat501[!duplicated(dat501$V3),]
table(dat501$graph)
#SRR7471501: 63/1667 nodes = 3.8% of nodes
dat502$graph<-ifelse(dat502$V1 %in% reads502$V1,1,0)
dat502$color<-ifelse(dat502$graph==1,"red","blue")
dat502<-dat502[order(dat502$graph,decreasing=T),]
dat502<-dat502[!duplicated(dat502$V3),]
table(dat502$graph)
#SRR7471502: 90/1667 nodes = 5.4% of nodes
dat513$graph<-ifelse(dat513$V1 %in% reads513$V1,1,0)
dat513$color<-ifelse(dat513$graph==1,"red","blue")
dat513<-dat513[order(dat513$graph,decreasing=T),]
dat513<-dat513[!duplicated(dat513$V3),]
table(dat513$graph)
#SRR7471513: 101/1667 nodes = 6.1% of nodes
#
#######################################
# make a csv file with nodes and colors
colnames(dat499)[1:4]<-c("read","read_sequence","node","rescued")
bandage499<-dat499[,c("node","rescued","color")]
node_weights_499<-node_weights[node_weights$node %in% setdiff(node_weights$node,bandage499$node),]
node_weights_499$rescued<-0
node_weights_499$color<-"grey"
node_weights_499<-node_weights_499[,c("node","rescued","color")]
bandage499<-rbind(bandage499,node_weights_499)
# fwrite(bandage499,file="Graph_Rescued_reads_SRR7471499.csv",sep=",",col.names=T,row.names=F,quote=F)
#
colnames(dat500)[1:4]<-c("read","read_sequence","node","rescued")
bandage500<-dat500[,c("node","rescued","color")]
node_weights_500<-node_weights[node_weights$node %in% setdiff(node_weights$node,bandage500$node),]
node_weights_500$rescued<-0
node_weights_500$color<-"grey"
node_weights_500<-node_weights_500[,c("node","rescued","color")]
bandage500<-rbind(bandage500,node_weights_500)
# fwrite(bandage500,file="Graph_Rescued_reads_SRR7471500.csv",sep=",",col.names=T,row.names=F,quote=F)
#
colnames(dat501)[1:4]<-c("read","read_sequence","node","rescued")
bandage501<-dat501[,c("node","rescued","color")]
node_weights_501<-node_weights[node_weights$node %in% setdiff(node_weights$node,bandage501$node),]
node_weights_501$rescued<-0
node_weights_501$color<-"grey"
node_weights_501<-node_weights_501[,c("node","rescued","color")]
bandage501<-rbind(bandage501,node_weights_501)
# fwrite(bandage501,file="Graph_Rescued_reads_SRR7471501.csv",sep=",",col.names=T,row.names=F,quote=F)
#
colnames(dat502)[1:4]<-c("read","read_sequence","node","rescued")
bandage502<-dat502[,c("node","rescued","color")]
node_weights_502<-node_weights[node_weights$node %in% setdiff(node_weights$node,bandage502$node),]
node_weights_502$rescued<-0
node_weights_502$color<-"grey"
node_weights_502<-node_weights_502[,c("node","rescued","color")]
bandage502<-rbind(bandage502,node_weights_502)
# fwrite(bandage502,file="Graph_Rescued_reads_SRR7471502.csv",sep=",",col.names=T,row.names=F,quote=F)
#
colnames(dat513)[1:4]<-c("read","read_sequence","node","rescued")
bandage513<-dat513[,c("node","rescued","color")]
node_weights_513<-node_weights[node_weights$node %in% setdiff(node_weights$node,bandage513$node),]
node_weights_513$rescued<-0
node_weights_513$color<-"grey"
node_weights_513<-node_weights_513[,c("node","rescued","color")]
bandage513<-rbind(bandage513,node_weights_513)
# fwrite(bandage513,file="Graph_Rescued_reads_SRR7471513.csv",sep=",",col.names=T,row.names=F,quote=F)
#
#######################
#####################################################################
#####################################################################
#######################
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/
#
# rest - map to best linear reference
REF=/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/HBV_Ref_Sequence_B2_2_GU815637.fasta
ml bedtools
ml bwa;ml samtools
#ls *.bam > all_unmapped_bams.txt
#grep -vf best_linear_unmapped_bams.txt all_unmapped_bams.txt >other_unmapped_bams.txt
#rm all_unmapped_bams.txt
#
for i in `cat other_unmapped_bams.txt`; do echo $i;
#bamToFastq -i $i -fq ${i%.bam}'_1.fastq' -fq2 ${i%.bam}'_2.fastq'
bwa mem -t 16 -M $REF ${i%.bam}'_1.fastq' ${i%.bam}'_2.fastq' | samtools view -Sb - | samtools sort - > ${i%.bam}'_remap.bam'
done
# Perform Qualimap for these - distribution of coverage across the reference
# Qualimap_MissingReads_LinearAlns.txt = 2 columns, 1: sample name, 2: path to BAM file (-r mode)
# 3rd column can provide condition
# R
ls *remap.bam > remapped_bams.txt
# R
dat<-fread("remapped_bams.txt",header=F)
dat$V2<-gsub("_raw_qc_","_",dat$V1)
dat$V2<-gsub("_unmapped_remap.bam","_remap",dat$V2)
dat<-dat[,c(2,1)]
#fwrite(dat,file="Qualimap_MissingReads_LinearAlns_remapped.txt",sep="\t",col.names=F,row.names=F,quote=F)
#
module load java
unset DISPLAY
# GFF file from above
# flip strand + start/end of relevant regions
gff=~/work/dduchen3/projects/HBV/reference/HBV_reference_B2_2_GU815637_edit.gff
#
~/work/dduchen3/tools/qualimap_v2.2.1/qualimap multi-bamqc -d ./Qualimap_MissingReads_LinearAlns_remapped.txt -gff $gff -r -outdir Qualimap_MissingReads_LinearAlns -outformat PDF:HTML -outfile Qualimap_MissingReads_LinearAlns
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/
multiqc ./ -o Qualimap_MultiQC_remap
################################################################
# instead calculate coverage using samtools depth, plot distributions in R
ml samtools
#output absolutely all positions
samtools depth -aa -f remapped_bams.txt > remapped_samtools_depth.tsv
# R -- add colmumn names:
# 1: reference, 2: position, 3-->remainder: remapped_bams.txt
setwd("~/JHSPH/Research/HBV/Reference_Testing/mapping/unmapped_reads_from_alignments")
remapped_cols<-fread("remapped_bams.txt",header=F)
remapped_cols$V1<-gsub("_unmapped_remap.bam","",remapped_cols$V1)
remapped_cols$V1<-gsub("_raw_qc_","_",remapped_cols$V1)
remapped_cols<-c("ref","pos",remapped_cols$V1)
dat<-fread("remapped_samtools_depth.tsv",header=F)
colnames(dat)<-remapped_cols
dat$ref<-NULL
dat<-t(dat)
dat<-dat[-1,]
dat<-data.frame(dat)
dat$genotype<-gsub("^.*?_","",rownames(dat))
dat$genotype<-sub("^(\\w).*$", "\\1", dat$genotype)
dat$sample<-gsub("_.*$","",rownames(dat))
dat$id<-rownames(dat)
library(reshape)
df_melted = melt(dat, id.vars = c('genotype','sample','id'))
df_melted$locus<-gsub("X","",df_melted$variable); df_melted$locus<-as.numeric(df_melted$locus)
####
#ggplot(data=df_melted,aes(x=locus,y=value,color=genotype)) + geom_line() +facet_wrap(.~sample) +
##### summarize by genotype
sumdat<-ddply(df_melted, c("sample","genotype","locus"), summarise,
           coverage = mean(value))
sumdat$rel_coverage<-sumdat$coverage/max(sumdat$coverage)
#
#
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/unmapped_reads_from_alignments")
# Plots
# FACET:
# add genotype to the lines!
library(geomtextpath)
remap_B2_2_GU815637<-ggplot(data=sumdat,aes(x=locus,y=rel_coverage,color=genotype)) +
            geom_smooth(aes(label=genotype), method = "gam", se=F, alpha=1) +
            facet_wrap(.~sample) + theme_bw() +
            theme(axis.title.x=element_blank(),
                   axis.text.x=element_blank(),
                   axis.ticks.x=element_blank()) +
                   xlim(c(0,3225)) + ylim(c(0,1.1)) + ylab("") +
             scale_color_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             theme(legend.position="top")
# sample specific plots:
library(scales)
ref_genome_remap_B2_2_GU815637<-gggenomes(genes=gff[gff$feature=="gene",]) +
    geom_gene(aes(fill=gene), position="pile",size=5,stroke=0.5) + #position="sixframe", position="pile"
    scale_fill_manual(name="HBV",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
    scale_y_continuous(limits=c(0.8, 1.3), expand = c(0, 0),breaks=scales::pretty_breaks(n = 10)) +
    scale_x_continuous(limits=c(-200, 3225), n.breaks=10) +
    guides(linetype="none",color="none") +
    theme(legend.position="bottom")
#
remap_B2_2_GU815637_SRR7471499<-ggplot(data=sumdat[sumdat$sample=="SRR7471499",],aes(x=locus,y=rel_coverage,color=genotype,fill=genotype)) +
            geom_labelsmooth(aes(label=genotype), hjust = "ymin", method = "gam", se=F, alpha=1,textcolour = "black") +
            theme_bw() +
            theme(axis.title.x=element_blank(),
                   axis.text.x=element_blank(),
                   axis.ticks.x=element_blank()) +
                   xlim(c(0,3225)) + ylim(c(0,1.1)) + ylab("") +
             scale_color_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             scale_fill_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             theme(legend.position="none")
png("SRR7471499_linear_alns_remapped_B2_2_GU815637.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  grid.arrange(remap_B2_2_GU815637_SRR7471499, ref_genome_remap_B2_2_GU815637, nrow=2, heights=c(0.8, 0.25))
dev.off()
#
remap_B2_2_GU815637_SRR7471500<-ggplot(data=sumdat[sumdat$sample=="SRR7471500",],aes(x=locus,y=rel_coverage,color=genotype,fill=genotype)) +
            geom_labelsmooth(aes(label=genotype), hjust = "ymin", method = "gam", se=F, alpha=1,textcolour = "black") +
            theme_bw() +
            theme(axis.title.x=element_blank(),
                   axis.text.x=element_blank(),
                   axis.ticks.x=element_blank()) +
                   xlim(c(0,3225)) + ylim(c(0,1.1)) + ylab("") +
             scale_color_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             scale_fill_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             theme(legend.position="none")
png("SRR7471500_linear_alns_remapped_B2_2_GU815637.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  grid.arrange(remap_B2_2_GU815637_SRR7471500, ref_genome_remap_B2_2_GU815637, nrow=2, heights=c(0.8, 0.25))
dev.off()
#
remap_B2_2_GU815637_SRR7471501<-ggplot(data=sumdat[sumdat$sample=="SRR7471501",],aes(x=locus,y=rel_coverage,color=genotype,fill=genotype)) +
            geom_labelsmooth(aes(label=genotype), hjust = "ymin", method = "gam", se=F, alpha=1,textcolour = "black") +
            theme_bw() +
            theme(axis.title.x=element_blank(),
                   axis.text.x=element_blank(),
                   axis.ticks.x=element_blank()) +
                   xlim(c(0,3225)) + ylim(c(0,1.1)) + ylab("") +
             scale_color_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             scale_fill_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             theme(legend.position="none")
png("SRR7471501_linear_alns_remapped_B2_2_GU815637.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  grid.arrange(remap_B2_2_GU815637_SRR7471501, ref_genome_remap_B2_2_GU815637, nrow=2, heights=c(0.8, 0.25))
dev.off()
#
remap_B2_2_GU815637_SRR7471502<-ggplot(data=sumdat[sumdat$sample=="SRR7471502",],aes(x=locus,y=rel_coverage,color=genotype,fill=genotype)) +
            geom_labelsmooth(aes(label=genotype), hjust = "ymin", method = "gam", se=F, alpha=1,textcolour = "black") +
            theme_bw() +
            theme(axis.title.x=element_blank(),
                   axis.text.x=element_blank(),
                   axis.ticks.x=element_blank()) +
                   xlim(c(0,3225)) + ylim(c(0,1.1)) + ylab("") +
             scale_color_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             scale_fill_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             theme(legend.position="none")
png("SRR7471502_linear_alns_remapped_B2_2_GU815637.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  grid.arrange(remap_B2_2_GU815637_SRR7471502, ref_genome_remap_B2_2_GU815637, nrow=2, heights=c(0.8, 0.25))
dev.off()
#
remap_B2_2_GU815637_SRR7471513<-ggplot(data=sumdat[sumdat$sample=="SRR7471513",],aes(x=locus,y=rel_coverage,color=genotype,fill=genotype)) +
            geom_labelsmooth(aes(label=genotype), hjust = "ymin", method = "gam", se=F, alpha=1,textcolour = "black") +
            theme_bw() +
            theme(axis.title.x=element_blank(),
                   axis.text.x=element_blank(),
                   axis.ticks.x=element_blank()) +
                   xlim(c(0,3225)) + ylim(c(0,1.1)) + ylab("") +
             scale_color_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             scale_fill_manual(name="",values=c(met.brewer("VanGogh2", n=10,type="continuous"))) +
             theme(legend.position="none")
png("SRR7471513_linear_alns_remapped_B2_2_GU815637.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  grid.arrange(remap_B2_2_GU815637_SRR7471513, ref_genome_remap_B2_2_GU815637, nrow=2, heights=c(0.8, 0.25))
dev.off()
#
legend_b <- get_legend(ref_genome_remap_B2_2_GU815637 + theme(legend.position="bottom"))
# add titles, remove legend (will add the common one above as its own grob), eliminate space between individual plots
s499<-grid.arrange(remap_B2_2_GU815637_SRR7471499 + ggtitle("SRR7471499") + theme(plot.title = element_text(hjust = 0.5), plot.margin=unit(c(1,1,0,1), "cm")), ref_genome_remap_B2_2_GU815637+theme(legend.position = "none",plot.margin=unit(c(-0.05,1,1,1), "cm")), nrow=2, heights=c(0.8, 0.25))
s500<-grid.arrange(remap_B2_2_GU815637_SRR7471500 + ggtitle("SRR7471500") + theme(plot.title = element_text(hjust = 0.5), plot.margin=unit(c(1,1,0,1), "cm")), ref_genome_remap_B2_2_GU815637+theme(legend.position = "none",plot.margin=unit(c(-0.05,1,1,1), "cm")), nrow=2, heights=c(0.8, 0.25))
s501<-grid.arrange(remap_B2_2_GU815637_SRR7471501 + ggtitle("SRR7471501") + theme(plot.title = element_text(hjust = 0.5), plot.margin=unit(c(1,1,0,1), "cm")), ref_genome_remap_B2_2_GU815637+theme(legend.position = "none",plot.margin=unit(c(-0.05,1,1,1), "cm")), nrow=2, heights=c(0.8, 0.25))
s502<-grid.arrange(remap_B2_2_GU815637_SRR7471502 + ggtitle("SRR7471502") + theme(plot.title = element_text(hjust = 0.5), plot.margin=unit(c(1,1,0,1), "cm")), ref_genome_remap_B2_2_GU815637+theme(legend.position = "none",plot.margin=unit(c(-0.05,1,1,1), "cm")), heights=c(0.8, 0.25))
s513<-grid.arrange(remap_B2_2_GU815637_SRR7471513 + ggtitle("SRR7471513") + theme(plot.title = element_text(hjust = 0.5), plot.margin=unit(c(1,1,0,1), "cm")), ref_genome_remap_B2_2_GU815637+theme(legend.position = "none",plot.margin=unit(c(-0.05,1,1,1), "cm")), nrow=2, heights=c(0.8, 0.25))
#
top_row = cowplot::plot_grid(s499, s500, s501, ncol=3)
bottom_row = cowplot::plot_grid(NULL, s502,s513, NULL, ncol=4, rel_widths=c(0.17,0.33,0.33,0.17))
plot_grid(top_row, bottom_row, legend_b, ncol=1, rel_heights=c(1,1,0.1))
#
png("AllSamples_linear_rescue_remapped_B2_2_GU815637_05052022.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  plot_grid(top_row, bottom_row, legend_b, ncol=1, rel_heights=c(1,1,0.1))
dev.off()
#
#
#
#
#########################################################################################
# where do the peaks occur on the graph
vg filter - reads at peak locations
vg pack --> view regions of graph

#########################################################################################




#################################################
#################################################
## ---- Plot alignment/mapping stats ---- ##
#################################################
#################################################
# mapping stats moved to desktop
R
setwd("~/JHSPH/Research/HBV/Reference_Testing/pggb_testing/HBV_44Refs_wfmash_pggb/")
dat<-fread("wfmash_pggb_stats.txt")
dat$sim<-gsub("^.*sim","sim",dat$file);dat$sim<-gsub(".gam.stats","",dat$sim)
dat$sim<-gsub("sim44_","44 References, Simulation: ",dat$sim)
#
ggplot(dat,aes(x=sim,y=mapped_percent,color=sim)) + geom_point(position = position_dodge(width = 0.5)) + theme_bw() + ylab("Total Reads Aligned")
#
# best performing graph --> map to real samples
#
for each in /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/SRR7471500_1_qc.fastq;
do export FNAME="${each##*/}";export BASE="${FNAME%_1_qc.fastq}"; qsub -N "graph_${BASE}" ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/graph_mapping_and_stats.sh /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/${FNAME}; done
#
#
# --- use 'graph_mapping_and_stats.sh' script, above
#
# concatenate stats:
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref
# did this above
#echo file reads primary_aln secondary_aln aligned perfect_aln paired_reads proper_pair mapped_percent perfect_percent> pggb_wfmash_giraffe_map_summary.txt
#for each in *giraffe.stats; do sh ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/giraffe_map_summary_stats.sh $each >> pggb_wfmash_giraffe_map_summary.txt; done



#
#
################################################################################################################################
################################################################################################################################
############ ---- Variant calling --> consensus generation, comparisons between consensus + haplotypes + QC-passed mapped reads
################################################################################################################################
################################################################################################################################
#
# real reads
#### Convert GAMs to BAMs --> mpileup + consensus
# Giraffe GAMs from the graph-based alignment shell script
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref
ml bcftools;ml samtools
ALL44DIR=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
# best performing path via giraffe alignment (see de novo assembly below)
# SRR7471499: B2_2_GU815637
# SRR7471501: B2_2_GU815637
# SRR7471502: B2_2_GU815637
# SRR7471513: B2_2_GU815637
#
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b SRR7471499_seqwish_giraffe.gam > SRR7471499_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b SRR7471500_seqwish_giraffe.gam > SRR7471500_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b SRR7471501_seqwish_giraffe.gam > SRR7471501_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b SRR7471502_seqwish_giraffe.gam > SRR7471502_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b SRR7471513_seqwish_giraffe.gam > SRR7471513_seqwish_giraffe.bam
#
conda activate ivar
samtools sort SRR7471499_seqwish_giraffe.bam -O BAM -o SRR7471499_seqwish_giraffe_sorted.bam
samtools sort SRR7471500_seqwish_giraffe.bam -O BAM -o SRR7471500_seqwish_giraffe_sorted.bam
samtools sort SRR7471501_seqwish_giraffe.bam -O BAM -o SRR7471501_seqwish_giraffe_sorted.bam
samtools sort SRR7471502_seqwish_giraffe.bam -O BAM -o SRR7471502_seqwish_giraffe_sorted.bam
samtools sort SRR7471513_seqwish_giraffe.bam -O BAM -o SRR7471513_seqwish_giraffe_sorted.bam
#
samtools index SRR7471499_seqwish_giraffe_sorted.bam
samtools index SRR7471500_seqwish_giraffe_sorted.bam
samtools index SRR7471501_seqwish_giraffe_sorted.bam
samtools index SRR7471502_seqwish_giraffe_sorted.bam
samtools index SRR7471513_seqwish_giraffe_sorted.bam
#
samtools mpileup -aa -A -d 0 -Q 0 SRR7471499_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471499_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471500_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471500_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471501_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471501_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471502_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471502_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471513_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471513_seqwish_giraffe_ivar_consensus
#
# Minimum Quality: 20
# Threshold: 0
# Minimum depth: 10
# Regions with depth less than minimum depth covered by: N
#
# -- different from vg map?
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b SRR7471501_seqwish_map.gam > SRR7471501_seqwish_map.bam
samtools sort SRR7471501_seqwish_map.bam -O BAM -o SRR7471501_seqwish_map_sorted.bam
samtools index SRR7471501_seqwish_map_sorted.bam
#
# also compute depth for comparisons:
#
samtools depth -aa SRR7471501_seqwish_map_sorted.bam > SRR7471501_seqwish_map_sorted_depth.tsv
# R -- add colmumn names:
# 1: reference, 2: position, 3-->remainder: remapped_bams.txt
dat<-fread("SRR7471501_seqwish_map_sorted_depth.tsv",header=F)
colnames(dat)<-c("ref","pos","depth")
dat<-dat[dat$ref %in% c("B2_2_GU815637"),]
#fwrite(dat,file="~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref/SRR7471501_seqwish_map_sorted_depth.tsv",quote=F,col.names=T,row.names=F,sep="\t")
#
# also make consensus sequence:
samtools mpileup -aa -A -d 0 -Q 0 SRR7471501_seqwish_map_sorted.bam | ivar consensus -p SRR7471501_seqwish_map_ivar_consensus
#
R
library(stringi);library(Biostrings)
giraffe<-readDNAStringSet("SRR7471500_seqwish_giraffe_ivar_consensus.fa")
giraffe[[1]]<-stri_sub(gsub("N", "", giraffe));
writeXStringSet(giraffe, "SRR7471500_seqwish_giraffe_ivar_consensus_edit.fasta")
#
map<-readDNAStringSet("SRR7471501_seqwish_map_ivar_consensus.fa")
map[[1]]<-stri_sub(gsub("N", "", map));
writeXStringSet(map, "SRR7471501_seqwish_map_ivar_consensus_edit.fasta")
#
#
real_consensus_files<-list.files(pattern="giraffe_ivar_consensus.fa")
real_consensus<-readDNAStringSet(file=real_consensus_files[1], format="fasta")
real_consensus[[1]]<-stri_sub(gsub("N", "", real_consensus));
for(i in 2:length(real_consensus_files)){
  temp<-readDNAStringSet(file=real_consensus_files[i], format="fasta")
  temp[[1]]<-stri_sub(gsub("N", "", temp));
  real_consensus<-c(real_consensus,temp)
}
names(real_consensus)<-gsub("_seqwish_giraffe_ivar_consensus_threshold_0_quality_20","",names(real_consensus))
#
writeXStringSet(real_consensus,file="graph_real_longitudinal_samples_consensus.fasta")
#"/scratch/groups/pduggal2/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref"

##############################################################################
#############################
# CONSENSUS from 150bp alignments
##################
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/
##
# best performing path via giraffe alignment (see de novo assembly below)
# SRR7471499: B2_2_GU815637
# SRR7471501: B2_2_GU815637
# SRR7471502: B2_2_GU815637
# SRR7471513: B2_2_GU815637
#
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b HBV_44refs.seqwish_norm_SRR7471499_150bp.gam > SRR7471499_150bp_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b HBV_44refs.seqwish_norm_SRR7471500_150bp.gam > SRR7471500_150bp_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b HBV_44refs.seqwish_norm_SRR7471501_150bp.gam > SRR7471501_150bp_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b HBV_44refs.seqwish_norm_SRR7471502_150bp.gam > SRR7471502_150bp_seqwish_giraffe.bam
vg surject -x ${ALL44DIR}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b HBV_44refs.seqwish_norm_SRR7471513_150bp.gam > SRR7471513_150bp_seqwish_giraffe.bam
#
conda activate ivar
samtools sort SRR7471499_150bp_seqwish_giraffe.bam -O BAM -o SRR7471499_150bp_seqwish_giraffe_sorted.bam
samtools sort SRR7471500_150bp_seqwish_giraffe.bam -O BAM -o SRR7471500_150bp_seqwish_giraffe_sorted.bam
samtools sort SRR7471501_150bp_seqwish_giraffe.bam -O BAM -o SRR7471501_150bp_seqwish_giraffe_sorted.bam
samtools sort SRR7471502_150bp_seqwish_giraffe.bam -O BAM -o SRR7471502_150bp_seqwish_giraffe_sorted.bam
samtools sort SRR7471513_150bp_seqwish_giraffe.bam -O BAM -o SRR7471513_150bp_seqwish_giraffe_sorted.bam
#
samtools index SRR7471499_150bp_seqwish_giraffe_sorted.bam
samtools index SRR7471500_150bp_seqwish_giraffe_sorted.bam
samtools index SRR7471501_150bp_seqwish_giraffe_sorted.bam
samtools index SRR7471502_150bp_seqwish_giraffe_sorted.bam
samtools index SRR7471513_150bp_seqwish_giraffe_sorted.bam
#
samtools mpileup -aa -A -d 0 -Q 0 SRR7471499_150bp_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471499_150bp_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471500_150bp_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471500_150bp_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471501_150bp_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471501_150bp_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471502_150bp_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471502_150bp_seqwish_giraffe_ivar_consensus
samtools mpileup -aa -A -d 0 -Q 0 SRR7471513_150bp_seqwish_giraffe_sorted.bam | ivar consensus -p SRR7471513_150bp_seqwish_giraffe_ivar_consensus
#
# Minimum Quality: 20
# Threshold: 0
# Minimum depth: 10
# Regions with depth less than minimum depth covered by: N
#
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/
R
library(stringi);library(Biostrings);library(stringi)
giraffe<-readDNAStringSet("SRR7471499_150bp_seqwish_giraffe_ivar_consensus.fa")
names(giraffe)<-gsub("_seqwish_giraffe_ivar_consensus_threshold_0_quality_20","",names(giraffe))
giraffe[[1]]<-stri_sub(gsub("N", "", giraffe));
SRR7471499<-giraffe
writeXStringSet(giraffe, "SRR7471499_150bp_seqwish_giraffe_ivar_consensus_edit.fasta")
giraffe<-readDNAStringSet("SRR7471500_150bp_seqwish_giraffe_ivar_consensus.fa")
names(giraffe)<-gsub("_seqwish_giraffe_ivar_consensus_threshold_0_quality_20","",names(giraffe))
giraffe[[1]]<-stri_sub(gsub("N", "", giraffe));
SRR7471500<-giraffe
writeXStringSet(giraffe, "SRR7471500_150bp_seqwish_giraffe_ivar_consensus_edit.fasta")
giraffe<-readDNAStringSet("SRR7471501_150bp_seqwish_giraffe_ivar_consensus.fa")
names(giraffe)<-gsub("_seqwish_giraffe_ivar_consensus_threshold_0_quality_20","",names(giraffe))
giraffe[[1]]<-stri_sub(gsub("N", "", giraffe));
SRR7471501<-giraffe
writeXStringSet(giraffe, "SRR7471501_150bp_seqwish_giraffe_ivar_consensus_edit.fasta")
giraffe<-readDNAStringSet("SRR7471502_150bp_seqwish_giraffe_ivar_consensus.fa")
names(giraffe)<-gsub("_seqwish_giraffe_ivar_consensus_threshold_0_quality_20","",names(giraffe))
giraffe[[1]]<-stri_sub(gsub("N", "", giraffe));
SRR7471502<-giraffe
writeXStringSet(giraffe, "SRR7471502_150bp_seqwish_giraffe_ivar_consensus_edit.fasta")
giraffe<-readDNAStringSet("SRR7471513_150bp_seqwish_giraffe_ivar_consensus.fa")
names(giraffe)<-gsub("_seqwish_giraffe_ivar_consensus_threshold_0_quality_20","",names(giraffe))
giraffe[[1]]<-stri_sub(gsub("N", "", giraffe));
SRR7471513<-giraffe
writeXStringSet(giraffe, "SRR7471513_150bp_seqwish_giraffe_ivar_consensus_edit.fasta")
#
real_graph_150<-c(SRR7471499,SRR7471500,SRR7471501,SRR7471502,SRR7471513)
writeXStringSet(real_graph_150,file="real_longitudinal_samples_150bp_consensus.fasta")
# "/scratch/groups/pduggal2/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash"
#################################################################
#################################################################
# Method  performed best for highly diverse simulated reads:
# graph-based variant calling --> consensus sequences
#cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref
cd ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/
ALL44DIR=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
#
# get B2_2_GU815637.fasta sequence in dir
vg paths -Fx ${ALL44DIR}HBV_44refs.seqwish_norm.xg -Q B2_2_GU815637 > B2_2_GU815637.fasta
#
for i in HBV_44refs.seqwish_norm_*_150bp.gam; do echo $i;
vg augment ${ALL44DIR}HBV_44refs.seqwish_norm.vg $i -A aug_${i} > aug_${i%.gam}'.vg'
vg index aug_${i%.gam}'.vg' -x aug_${i%.gam}'.xg'
# Compute the read support from the augmented gam (ignoring qualitiy < 5, and 1st and last 5bp of each read)
vg pack -x aug_${i%.gam}'.xg' -g aug_${i} -Q 5 -o aug_${i%.gam}'.pack'
# Generate a VCF from the support
vg call aug_${i%.gam}'.xg' -k aug_${i%.gam}'.pack' -p B2_2_GU815637 -a -f B2_2_GU815637.fasta > ${i%.gam}'.vcf'
ml vcftools;
bgzip -c ${i%.gam}'.vcf' > ${i%.gam}'.vcf.gz';
tabix -p vcf ${i%.gam}'.vcf.gz'
bcftools norm -c w -f B2_2_GU815637.fasta -m-both -Oz -o ${i%.gam}'.norm.vcf.gz' ${i%.gam}'.vcf.gz';
tabix -f ${i%.gam}'.norm.vcf.gz'
bcftools consensus -H LR --fasta-ref B2_2_GU815637.fasta ${i%.gam}'.norm.vcf.gz' -o ${i%.gam}'_VG_calling_consensus.fasta'
ll *.fasta
done
#
# HBV_44refs.seqwish_norm_SRR7471499_150bp_VG_calling_consensus.fasta
# HBV_44refs.seqwish_norm_SRR7471500_150bp_VG_calling_consensus.fasta
# HBV_44refs.seqwish_norm_SRR7471501_150bp_VG_calling_consensus.fasta
# HBV_44refs.seqwish_norm_SRR7471502_150bp_VG_calling_consensus.fasta
# HBV_44refs.seqwish_norm_SRR7471513_150bp_VG_calling_consensus.fasta
#
########### --- compare these consensus sequences also!!!  --- ###########
##########################################################################
##########################################################################
##########################################################################
# Linear sequences
#
# -- Variant calling (Lofreq) followed by consensus generation using the normalized vcf file + relevant reference
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling
ml samtools
conda activate lofreq #v. 2.1.5
# call variants from bam files:
OUTPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/"
REFSPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/"
DATAPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/"
#
#ls $REFSPATH*.fasta >temp_refs
for i in `cat temp_refs`; do export REF="${i##*/}"; #echo $REFSPATH${REF};
#for each in $REFSPATH*.fasta;
#do export REF="${each##*/}"; #echo $REFSPATH${REF};
export specificRef=${REF##*Sequence_}; export specificRef=${specificRef%*.fasta};
cd $DATAPATH;
echo $specificRef;
echo "samtools sort, index"
#samtools sort ${DATAPATH}SRR7471513_m150_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471513_m150_sorted_${specificRef}.bam
samtools sort ${DATAPATH}SRR7471500_m150_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471500_m150_sorted_${specificRef}.bam
#samtools sort ${DATAPATH}SRR7471499_m150_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471499_m150_sorted_${specificRef}.bam
#samtools sort ${DATAPATH}SRR7471501_m150_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471501_m150_sorted_${specificRef}.bam
#samtools sort ${DATAPATH}SRR7471502_m150_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471502_m150_sorted_${specificRef}.bam
cd $OUTPATH
#samtools index ${OUTPATH}SRR7471513_m150_sorted_${specificRef}.bam
samtools index ${OUTPATH}SRR7471500_m150_sorted_${specificRef}.bam
#samtools index ${OUTPATH}SRR7471499_m150_sorted_${specificRef}.bam
#samtools index ${OUTPATH}SRR7471501_m150_sorted_${specificRef}.bam
#samtools index ${OUTPATH}SRR7471502_m150_sorted_${specificRef}.bam
#
echo "LoFreq variant calling"
#lofreq indelqual --dindel -f $REFSPATH${REF} ${OUTPATH}SRR7471513_m150_sorted_${specificRef}.bam -o ${OUTPATH}SRR7471513_lofreq_${specificRef}.bam
lofreq indelqual --dindel -f $REFSPATH${REF} ${OUTPATH}SRR7471500_m150_sorted_${specificRef}.bam -o ${OUTPATH}SRR7471500_lofreq_${specificRef}.bam
#lofreq indelqual --dindel -f $REFSPATH${REF} ${OUTPATH}SRR7471499_m150_sorted_${specificRef}.bam -o ${OUTPATH}SRR7471499_lofreq_${specificRef}.bam
#lofreq indelqual --dindel -f $REFSPATH${REF} ${OUTPATH}SRR7471501_m150_sorted_${specificRef}.bam -o ${OUTPATH}SRR7471501_lofreq_${specificRef}.bam
#lofreq indelqual --dindel -f $REFSPATH${REF} ${OUTPATH}SRR7471502_m150_sorted_${specificRef}.bam -o ${OUTPATH}SRR7471502_lofreq_${specificRef}.bam
# per lofreq documentation, don't need to also use 'alnqual' command as indel alignment qualities are computed on the fly during variant calling
#
#samtools sort ${OUTPATH}SRR7471513_lofreq_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471513_lofreq_${specificRef}.bam ; samtools index ${OUTPATH}SRR7471513_lofreq_${specificRef}.bam
samtools sort ${OUTPATH}SRR7471500_lofreq_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471500_lofreq_${specificRef}.bam ; samtools index ${OUTPATH}SRR7471500_lofreq_${specificRef}.bam
#samtools sort ${OUTPATH}SRR7471499_lofreq_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471499_lofreq_${specificRef}.bam ; samtools index ${OUTPATH}SRR7471499_lofreq_${specificRef}.bam
#samtools sort ${OUTPATH}SRR7471501_lofreq_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471501_lofreq_${specificRef}.bam ; samtools index ${OUTPATH}SRR7471501_lofreq_${specificRef}.bam
#samtools sort ${OUTPATH}SRR7471502_lofreq_${specificRef}.bam -O BAM -o ${OUTPATH}SRR7471502_lofreq_${specificRef}.bam ; samtools index ${OUTPATH}SRR7471502_lofreq_${specificRef}.bam
#
#rm  ${OUTPATH}SRR7471513_m150_sorted_${specificRef}.b*
#rm  ${OUTPATH}SRR7471499_m150_sorted_${specificRef}.b*
rm  ${OUTPATH}SRR7471500_m150_sorted_${specificRef}.b*
#rm  ${OUTPATH}SRR7471501_m150_sorted_${specificRef}.b*
#rm  ${OUTPATH}SRR7471502_m150_sorted_${specificRef}.b*
#
outVCF="${REF##HBV_Ref_Sequence_}";outVCF=${outVCF%.fasta}'.vcf'
#
cd $OUTPATH;
#lofreq call --call-indels -f $REFSPATH${REF} -o 'SRR7471513_'${outVCF} --verbose SRR7471513_lofreq_${specificRef}.bam
#lofreq call --call-indels -f $REFSPATH${REF} -o 'SRR7471499_'${outVCF} --verbose SRR7471499_lofreq_${specificRef}.bam
#lofreq call --call-indels -f $REFSPATH${REF} -o 'SRR7471500_'${outVCF} --verbose SRR7471500_lofreq_${specificRef}.bam
#lofreq call --call-indels -f $REFSPATH${REF} -o 'SRR7471501_'${outVCF} --verbose SRR7471501_lofreq_${specificRef}.bam
#lofreq call --call-indels -f $REFSPATH${REF} -o 'SRR7471502_'${outVCF} --verbose SRR7471502_lofreq_${specificRef}.bam
#
done
#
#
# Normalize and bgzip the vcf, index, create consensus sequence
#
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling
ml bcftools
OUTPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/"
REFSPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/"
DATAPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/"
#
for i in SRR7471500*.vcf; do export REF="${i#*_}"; echo $REF;
export REF="${REF%.vcf}";
export SAMPLE="${i%%_*}";
cd $OUTPATH;
bgzip -c $i > $i.gz;
tabix $i.gz;
# for non ACTGN bases, provide warning 'w' +skip site? -- approach used for SARS-CoV-2 https://genome.cshlp.org/content/30/12/1781.full
bcftools norm -c w -f $REFSPATH'HBV_Ref_Sequence_'${REF}'.fasta' -Oz -o $i.norm.gz $i.gz;
tabix -f $i.norm.gz;
# Apply those variants observed with AF>=50% to reference to create consensus sequence
bcftools consensus -i 'INFO/AF>=0.5' -f $REFSPATH'HBV_Ref_Sequence_'${REF}'.fasta' $i.norm.gz > ./consensus/${SAMPLE}_${REF}_consensus.fasta;
#
done
# --
# do the above for each sample, then compare to graph-based variant calling
# make multi-fasta files
#
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/consensus
R
library(Biostrings); library(data.table)
SRR7471499<-list.files(pattern="SRR7471499.*consensus.fasta")
SRR7471500<-list.files(pattern="SRR7471500.*consensus.fasta")
SRR7471501<-list.files(pattern="SRR7471501.*consensus.fasta")
SRR7471502<-list.files(pattern="SRR7471502.*consensus.fasta")
SRR7471513<-list.files(pattern="SRR7471513.*consensus.fasta")
#
seqs<-readDNAStringSet(SRR7471499)
names(seqs)<-paste0("SRR7471499_bcftools_",names(seqs))
# reassign names
writeXStringSet(seqs, "SRR7471499_bcftools_multifasta.fasta")
#####
seqs<-readDNAStringSet(SRR7471500)
names(seqs)<-paste0("SRR7471500_bcftools_",names(seqs))
# reassign names
writeXStringSet(seqs, "SRR7471500_bcftools_multifasta.fasta")
#####
seqs<-readDNAStringSet(SRR7471501)
names(seqs)<-paste0("SRR7471501_bcftools_",names(seqs))
# reassign names
writeXStringSet(seqs, "SRR7471501_bcftools_multifasta.fasta")
#####
seqs<-readDNAStringSet(SRR7471502)
names(seqs)<-paste0("SRR7471502_bcftools_",names(seqs))
# reassign names
writeXStringSet(seqs, "SRR7471502_bcftools_multifasta.fasta")
#####
seqs<-readDNAStringSet(SRR7471513)
names(seqs)<-paste0("SRR7471513_bcftools_",names(seqs))
writeXStringSet(seqs, "SRR7471513_bcftools_multifasta.fasta")
# in MEGAX Analysis
# Average diversity = 0.109221
# Tree saved: SRR7471513_ReferenceBias_Tree.svg
#
##########################################################################
##########################################################################
##########################################################################
# Alternative method - more appropriate - through iVar
# virus specific
# https://github.com/andersen-lab/ivar
# https://andersen-lab.github.io/ivar/html/manualpage.html
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling
ml bcftools;ml samtools
conda activate ivar
BAMPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/"
OUTPATH="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/consensus"
#
for i in $BAMPATH/SRR7471500*.bam; do export BASE="${i##*/}"; echo $BASE;
export BASEname="${BASE%.bam}";
cd $OUTPATH;
samtools mpileup -aa -A -d 0 -Q 0 ../$BASE | ivar consensus -p $BASEname\_ivar_consensus
done
#
cd $OUTPATH
R
library(Biostrings); library(data.table)
SRR7471499<-list.files(pattern="SRR7471499.*_ivar_consensus.fasta")
SRR7471500<-list.files(pattern="SRR7471500.*_ivar_consensus.fasta")
SRR7471501<-list.files(pattern="SRR7471501.*_ivar_consensus.fasta")
SRR7471502<-list.files(pattern="SRR7471502.*_ivar_consensus.fasta")
SRR7471513<-list.files(pattern="SRR7471513.*_ivar_consensus.fasta")
#
#################
# -- concatenate fasta files!
setwd("~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/consensus")
cons<-list.files(pattern="ivar_consensus.fa")
SRR7471499_cons<-cons[grep("SRR7471499",cons)]
SRR7471499_giraffe_cons<-readDNAStringSet(file=SRR7471499_cons[1], format="fasta")
for(i in 2:length(SRR7471499_cons)){
  temp<-readDNAStringSet(file=SRR7471499_cons[i], format="fasta")
  SRR7471499_giraffe_cons<-c(SRR7471499_giraffe_cons,temp)
}
names(SRR7471499_giraffe_cons)<-gsub("_ivar_consensus_.*$","",names(SRR7471499_giraffe_cons))
names(SRR7471499_giraffe_cons)<-gsub("Consensus_","",names(SRR7471499_giraffe_cons))
names(SRR7471499_giraffe_cons)<-gsub("lofreq","iVar",names(SRR7471499_giraffe_cons))
#
SRR7471500_cons<-cons[grep("SRR7471500",cons)]
SRR7471500_giraffe_cons<-readDNAStringSet(file=SRR7471500_cons[1], format="fasta")
for(i in 2:length(SRR7471500_cons)){
  temp<-readDNAStringSet(file=SRR7471500_cons[i], format="fasta")
  SRR7471500_giraffe_cons<-c(SRR7471500_giraffe_cons,temp)
}
names(SRR7471500_giraffe_cons)<-gsub("_ivar_consensus_.*$","",names(SRR7471500_giraffe_cons))
names(SRR7471500_giraffe_cons)<-gsub("Consensus_","",names(SRR7471500_giraffe_cons))
names(SRR7471500_giraffe_cons)<-gsub("lofreq","iVar",names(SRR7471500_giraffe_cons))
#
SRR7471501_cons<-cons[grep("SRR7471501",cons)]
SRR7471501_giraffe_cons<-readDNAStringSet(file=SRR7471501_cons[1], format="fasta")
for(i in 2:length(SRR7471501_cons)){
  temp<-readDNAStringSet(file=SRR7471501_cons[i], format="fasta")
  SRR7471501_giraffe_cons<-c(SRR7471501_giraffe_cons,temp)
}
names(SRR7471501_giraffe_cons)<-gsub("_ivar_consensus_.*$","",names(SRR7471501_giraffe_cons))
names(SRR7471501_giraffe_cons)<-gsub("Consensus_","",names(SRR7471501_giraffe_cons))
names(SRR7471501_giraffe_cons)<-gsub("lofreq","iVar",names(SRR7471501_giraffe_cons))
#
SRR7471502_cons<-cons[grep("SRR7471502",cons)]
SRR7471502_giraffe_cons<-readDNAStringSet(file=SRR7471502_cons[1], format="fasta")
for(i in 2:length(SRR7471502_cons)){
  temp<-readDNAStringSet(file=SRR7471502_cons[i], format="fasta")
  SRR7471502_giraffe_cons<-c(SRR7471502_giraffe_cons,temp)
}
names(SRR7471502_giraffe_cons)<-gsub("_ivar_consensus_.*$","",names(SRR7471502_giraffe_cons))
names(SRR7471502_giraffe_cons)<-gsub("Consensus_","",names(SRR7471502_giraffe_cons))
names(SRR7471502_giraffe_cons)<-gsub("lofreq","iVar",names(SRR7471502_giraffe_cons))
#
SRR7471513_cons<-cons[grep("SRR7471513",cons)]
SRR7471513_giraffe_cons<-readDNAStringSet(file=SRR7471513_cons[1], format="fasta")
for(i in 2:length(SRR7471513_cons)){
  temp<-readDNAStringSet(file=SRR7471513_cons[i], format="fasta")
  SRR7471513_giraffe_cons<-c(SRR7471513_giraffe_cons,temp)
}
names(SRR7471513_giraffe_cons)<-gsub("_ivar_consensus_.*$","",names(SRR7471513_giraffe_cons))
names(SRR7471513_giraffe_cons)<-gsub("Consensus_","",names(SRR7471513_giraffe_cons))
names(SRR7471513_giraffe_cons)<-gsub("lofreq","iVar",names(SRR7471513_giraffe_cons))
#
writeXStringSet(SRR7471499_giraffe_cons, "SRR7471499_ivar_multifasta.fasta")
writeXStringSet(SRR7471500_giraffe_cons, "SRR7471500_ivar_multifasta.fasta")
writeXStringSet(SRR7471501_giraffe_cons, "SRR7471501_ivar_multifasta.fasta")
writeXStringSet(SRR7471502_giraffe_cons, "SRR7471502_ivar_multifasta.fasta")
writeXStringSet(SRR7471513_giraffe_cons, "SRR7471513_ivar_multifasta.fasta")
#
#
#
alphabetFrequency(SRR7471499_giraffe_cons)
# could use distribution of N's
############################
# BCFtools consensus
bcfcons<-list.files(pattern="_consensus.fasta")
SRR7471499_bcfcons<-bcfcons[grep("SRR7471499",bcfcons)]
SRR7471500_bcfcons<-bcfcons[grep("SRR7471500",bcfcons)]
SRR7471501_bcfcons<-bcfcons[grep("SRR7471501",bcfcons)]
SRR7471502_bcfcons<-bcfcons[grep("SRR7471502",bcfcons)]
SRR7471513_bcfcons<-bcfcons[grep("SRR7471513",bcfcons)]
#
SRR7471499_giraffe_bcfcons<-readDNAStringSet(file="~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref/SRR7471501_seqwish_giraffe_ivar_consensus_edit.fasta", format="fasta")
for(i in 1:length(bcfcons)){
  temp<-readDNAStringSet(file=bcfcons[i], format="fasta")
  SRR7471499_giraffe_bcfcons<-c(SRR7471499_giraffe_bcfcons,temp)
}
alphabetFrequency(SRR7471499_giraffe_bcfcons)
#
#
#######################################################################################
#--- consensus accuracy  -  compare to de novo assembled sample-specific haplotypes/consensus
# spades/metaspades
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/spades_c4/
~/work/dduchen3/tools/SPAdes-3.15.4-Linux/bin/spades.py --isolate --metaviral --pe1-1 ../SRR7471501_1.fastq \
    --pe1-2 ../SRR7471501_2.fastq \
    -o spades_SRR7471501
#    --trusted-contigs contigs.fastq \
##############################
# run savage + vg-flow
# JHPCE
cd /fastscratch/myscratch/dduchen/hbeag_referencetest
#printf "SRR7471499\nSRR7471501\nSRR7471502\nSRR7471513" > Longitudinal_SRP152039_longitudinal_C4.txt
while read line; do ~/tools/sratoolkit.2.11.3-centos_linux64/bin/fasterq-dump "$line" -t /fastscratch/myscratch/dduchen/hbeag_referencetest/; done < Longitudinal_SRP152039_longitudinal_C4.txt
#
gzip *.fastq
conda activate fastp
for i in `cat Longitudinal_SRP152039_longitudinal_C4.txt`; do echo $i;
fastp -i $i\_1.fastq.gz -I $i\_2.fastq.gz -o $i\_1_clean.fastq.gz -O $i\_2_clean.fastq.gz --detect_adapter_for_pe -c -j $i\_report_fastp.json;
done
#
# multiqc report
conda activate py3.7
# multiqc will look for '*fastp.json'
multiqc ./ -n Quasi_HBV_Longitudinal_HBeAg_C4 -f
#
# merge PE reads via PEAR, keep only the assembled fastq file per sample
for i in `cat Longitudinal_SRP152039_longitudinal_C4.txt`; do echo $i;
~/tools/pear/pear-0.9.11-linux-x86_64/bin/pear -f $i\_1_clean.fastq.gz -r $i\_2_clean.fastq.gz -o ${i} -j 4; rm $i\.unassembled* ; rm $i\.discarded.fastq;
done
#
# create tar.gz file of QC'd data
#tar -czvf C4_QC.tar.gz ./*clean.fastq.gz Quasi_HBV_Longitudinal_HBeAg_C4* *.assembled.fastq
#cp C4_QC.tar.gz ~/Data/HBV/Longitudinal_SRP152039/
##
###############################################
##
cd /fastscratch/myscratch/dduchen/hbeag_referencetest
module load java
unset DISPLAY
for i in `cat Longitudinal_SRP152039_longitudinal_C4.txt`; do echo $i;
~/tools/bbmap/bbnorm.sh -Xmx40g in=$i\.assembled.fastq out=$i\.assembled.10knorm.fastq target=10000 mindepth=2 2>$i\.normalization_log.txt
done
#########################################################
# patches important: goal of depth between 500-1000
# Read depth from bbnorm =/= real sequencing depth, estimate from graph alignment + best ref -->
# patches important: goal of depth between 500-1000
# Read depth from bbnorm =/= real sequencing depth, estimate from graph alignment + best ref -->
# JHPCE:
pggb_refdir=~/Data/HBV/reference/pggb_wfmash/
for i in `cat Longitudinal_SRP152039_longitudinal_C4.txt`; do echo $i;
~/tools/vg giraffe -b fast -Z $pggb_refdir'HBV_44refs.seqwish_norm.giraffe.gbz' -H $pggb_refdir'HBV_44refs.seqwish_norm.augmented.gbwt' -m $pggb_refdir'HBV_44refs.seqwish_norm.min' -d $pggb_refdir'HBV_44refs.seqwish_norm.dist' -f $i*10knorm.fastq -o gam > $i\_giraffe.gam;
~/tools/vg depth --gam $i\_giraffe.gam $pggb_refdir'HBV_44refs.seqwish_norm.xg' > $i\_giraffe.depth;
done
#
depth_map=$(awk -F ' ' '{print $1}' $i\_giraffe.depth)
patches=$(bc -l <<< "scale=2;$depth_map/750" | awk '{printf("%d\n",$1 + 0.5)}')
#
############################################################################################################################
# SAVAGE + VG-Flow (+ref) Assembly
conda activate vg-flow-env
for each in /fastscratch/myscratch/dduchen/hbeag_referencetest/*.10knorm.fastq;
do export FNAME="${each##*/}";export BASE="${FNAME%%.*}"; export DATAPATH="/fastscratch/myscratch/dduchen/hbeag_referencetest/";
qsub -N "${BASE}" ~/Data/HBV/viral_assembly_qsub.sh $DATAPATH${FNAME}; done
# VG-Flow --> extend contigs + ref
workpath=/fastscratch/myscratch/dduchen/hbeag_referencetest/
for i in *.10knorm_SAVAGE/;do echo $i; export sample=${i%.10knorm_SAVAGE/};echo $sample;
for i in SRR7471502.10knorm_SAVAGE/;do echo $i; export sample=${i%.10knorm_SAVAGE/};echo $sample;
cd $i
~/miniconda3/envs/vg-flow-env/bin/python3 ~/tools/vg-flow/scripts/vg-flow.py -m 25 -c 50 node_abundance.txt contig_graph.final.gfa >$sample\_10knorm_VGflow_haps_log.txt 2>&1
perl -p -e "s/^>/>$sample-/g" haps.final.fasta > ${workpath}${sample}.haps.final.fasta
cd $workpath
done
#
# SRR7471513 error
# vg msga directly:
~/miniconda3/envs/vg-flow-env/bin/python3 ~/tools/vg-flow/scripts/build_graph_msga_edit.py -f /fastscratch/myscratch/dduchen/hbeag_referencetest/SRR7471513_1_clean.fastq.gz -r /fastscratch/myscratch/dduchen/hbeag_referencetest/SRR7471513_2_clean.fastq.gz -c ./contigs_stage_c_wRef.fasta -vg ~/tools/vg -t 4 >SRR7471513_10knorm_VGflow_build_log.txt 2>&1;
#
## viral haplotypes assembled for each sample --> along with genome_graph.gfa to ~/JHSPH/Research/HBV/Reference_Testing/real_reads/...
#
###---- create sample-specific consensus via gramtools
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling
# reference - best linear reference
REF=/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/reference/all44_refs/individual_refs/HBV_Ref_Sequence_B2_2_GU815637.fasta
#
# subsampled reads:
read_dir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons"
ll ${read_dir}/SRR7471499_1_qc_5k_subset.fastq
ll ${read_dir}/SRR7471499_2_qc_5k_subset.fastq
ml gcc python/3.7
#source ~/venv_gramtools/bin/activate
# SRR7471499
~/venv_gramtools/bin/gramtools build --gram_dir SRR7471499_gramtools --ref $REF --vcf SRR7471499_B2_2_GU815637.vcf --kmer_size 11 --force
~/venv_gramtools/bin/gramtools genotype -i SRR7471499_gramtools --sample_id SRR7471499_gramtools_personal --reads ${read_dir}/SRR7471499_1_qc_5k_subset.fastq --reads ${read_dir}/SRR7471499_2_qc_5k_subset.fastq -o SRR7471499_gramtools_build --force
# SRR7471500
~/venv_gramtools/bin/gramtools build --gram_dir SRR7471500_gramtools --ref $REF --vcf SRR7471500_B2_2_GU815637.vcf --kmer_size 11 --force
~/venv_gramtools/bin/gramtools genotype -i SRR7471500_gramtools --sample_id SRR7471500_gramtools_personal --reads ${read_dir}/SRR7471500_1_qc_5k_subset.fastq --reads ${read_dir}/SRR7471500_2_qc_5k_subset.fastq -o SRR7471500_gramtools_build --force
# SRR7471501
~/venv_gramtools/bin/gramtools build --gram_dir SRR7471501_gramtools --ref $REF --vcf SRR7471501_B2_2_GU815637.vcf --kmer_size 11 --force
~/venv_gramtools/bin/gramtools genotype -i SRR7471501_gramtools --sample_id SRR7471501_gramtools_personal --reads ${read_dir}/SRR7471501_1_qc_5k_subset.fastq --reads ${read_dir}/SRR7471501_2_qc_5k_subset.fastq -o SRR7471501_gramtools_build --force
# SRR7471502
~/venv_gramtools/bin/gramtools build --gram_dir SRR7471502_gramtools --ref $REF --vcf SRR7471502_B2_2_GU815637.vcf --kmer_size 11 --force
~/venv_gramtools/bin/gramtools genotype -i SRR7471502_gramtools --sample_id SRR7471502_gramtools_personal --reads ${read_dir}/SRR7471502_1_qc_5k_subset.fastq --reads ${read_dir}/SRR7471502_2_qc_5k_subset.fastq -o SRR7471502_gramtools_build --force
# SRR7471513
~/venv_gramtools/bin/gramtools build --gram_dir SRR7471513_gramtools --ref $REF --vcf SRR7471513_B2_2_GU815637.vcf --kmer_size 11 --force
~/venv_gramtools/bin/gramtools genotype -i SRR7471513_gramtools --sample_id SRR7471513_gramtools_personal --reads ${read_dir}/SRR7471513_1_qc_5k_subset.fastq --reads ${read_dir}/SRR7471513_2_qc_5k_subset.fastq -o SRR7471513_gramtools_build --force
#
# -- comparison of sample-specific consensus to ivar/bcftools
# move gramtools consensus fastas to consensus dir
gramdir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/"
consensus_dir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/consensus/"
#SRR7471499
cp ${gramdir}'SRR7471499_gramtools_build/genotype/personalised_reference.fasta' ${consensus_dir}SRR7471499_gramtools_reference.fasta
#SRR7471500
cp ${gramdir}'SRR7471500_gramtools_build/genotype/personalised_reference.fasta' ${consensus_dir}SRR7471500_gramtools_reference.fasta
#SRR7471501
cp ${gramdir}'SRR7471501_gramtools_build/genotype/personalised_reference.fasta' ${consensus_dir}SRR7471501_gramtools_reference.fasta
#SRR7471502
cp ${gramdir}'SRR7471502_gramtools_build/genotype/personalised_reference.fasta' ${consensus_dir}SRR7471502_gramtools_reference.fasta
#SRR7471513
cp ${gramdir}'SRR7471513_gramtools_build/genotype/personalised_reference.fasta' ${consensus_dir}SRR7471513_gramtools_reference.fasta
######################
######################
# --
# -- finally, extract the subset of reads which successfully aligned to the graph
ml samtools
read_dir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons"
cd $read_dir
ll $read_dir/*_subset_map.gam
for i in $(ls $read_dir/*_subset_map.gam); do echo $i;
export i_short=${i#/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/};
export i_short=${i_short%.gam}
graphdir=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
# surject to bamfile for filtering/extraction of mapped reads
~/work/dduchen3/tools/vg surject -x ${graphdir}HBV_44refs.seqwish_norm.xg -p B2_2_GU815637 -b $i -i > ${read_dir}/${i_short}'.bam'
# extact only the aligned reads
samtools view -b -F 4 ${read_dir}/${i_short}'.bam' > ${read_dir}/${i_short}'_mapped.bam'
# convert to fastq file
samtools bam2fq ${read_dir}/${i_short}'_mapped.bam' > ${read_dir}/${i_short}'.fastq'
done
#
gzip *_subset_map.fastq
#
# SRR7471499_subset_map.fastq.gz
# SRR7471500_subset_map.fastq.gz
# SRR7471501_subset_map.fastq.gz
# SRR7471502_subset_map.fastq.gz
# SRR7471513_subset_map.fastq.gz
#
# # Estimate depth across the bamfiles
cd $read_dir
ls *_mapped.bam > subset_B2_mapped_bams.txt
ls *B2_2_GU815637.bam >> subset_B2_mapped_bams.txt
for i in $(cat subset_B2_mapped_bams.txt); do echo $i;
samtools sort $i -o ${i%.bam}'.sorted.bam';
done
# filter graph alignments to only the B2_2_GU815637 reference
ls *_raw_qc_subset_B2_2_GU815637.sorted.bam > subset_B2_linear_ref_mapped_bams.txt
ls *_subset_map_mapped.sorted.bam > subset_B2_graph_ref_mapped_bams.txt
# -d 0 = no depth limit, mapping quality threshold
samtools depth -aa -d 0 -Q 13 -f subset_B2_linear_ref_mapped_bams.txt > subset_B2_linear_samtools_depth.tsv
samtools depth -aa -d 0 -Q 13 -f subset_B2_graph_ref_mapped_bams.txt > subset_B2_graph_samtools_depth.tsv
# R -- add colmumn names, filter graph depth file, combine
# 1: reference, 2: position, 3-->sample names
R
setwd("~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons")
library(data.table)
mapped_cols<-fread("subset_B2_linear_ref_mapped_bams.txt",header=F)
mapped_cols$V1<-gsub(".sorted.bam","",mapped_cols$V1)
mapped_cols$V1<-gsub("_raw_qc_subset_B2_2_GU815637","_LinearRef",mapped_cols$V1)
linear_mapped_cols<-c("ref","pos",mapped_cols$V1)
#
graph_cols<-fread("subset_B2_graph_ref_mapped_bams.txt",header=F)
graph_cols$V1<-gsub("_subset_map_mapped","_GraphRef",graph_cols$V1)
graph_cols$V1<-gsub(".sorted.bam","",graph_cols$V1)
graph_mapped_cols<-c("ref","pos",graph_cols$V1)
#
dat_linear<-fread("subset_B2_linear_samtools_depth.tsv",header=F)
colnames(dat_linear)<-linear_mapped_cols
dat_graph<-fread("subset_B2_graph_samtools_depth.tsv",header=F)
colnames(dat_graph)<-graph_mapped_cols
dat_graph<-dat_graph[dat_graph$ref %in% c("B2_2_GU815637"),]
all(dat_graph$pos==dat_linear$pos) #TRUE
dat<-cbind(dat_linear,dat_graph[,3:ncol(dat_graph)])
#
dat<-data.frame(dat)
#fwrite(dat,file="Linear_vs_Graph_B2_Depths.tsv",quote=F,col.names=T,row.names=F,sep="\t")
####
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads")
dat<-fread("Linear_vs_Graph_B2_Depths.tsv")
dat$ref<-NULL
dat<-t(dat)
dat<-dat[-1,]
dat<-data.frame(dat)
dat$reference<-gsub("^.*_", "", rownames(dat))
dat$sample<-gsub("_.*$","",rownames(dat))
dat$id<-rownames(dat)
library(reshape)
df_melted = melt(dat, id.vars = c('reference','sample','id'))
df_melted$locus<-gsub("X","",df_melted$variable); df_melted$locus<-as.numeric(df_melted$locus)
####
library(ggplot2)
library(ggpmisc)
library(ggrepel)
library(broom)
library(MetBrewer)
coverage<-ggplot(df_melted, aes(x=locus,y=value)) + geom_line(alpha=.75,aes(color=sample,linetype=reference)) + theme_bw() +
      ylab("Depth") + xlab("Reference Position (HBV Genotype: B2, GU815637)") +
      scale_color_manual(name="",values=c(met.brewer("Isfahan2", n=5,type="continuous"))) +
      theme(legend.position="right")
# Alignment quality > 13 (default of samtools mpileup)
png("Subsampled_Depth_Graph_vs_Linear_alns.png",type="cairo",width = 8, height = 3.5, units= 'in', res=1000)
coverage
dev.off()
#
# vg depth rather than surjected bam
graphdir=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons
for i in $(ls *_subset_map.gam); do echo $i;
~/work/dduchen3/tools/vg pack -x ${graphdir}'HBV_44refs.seqwish_norm.xg' -Q 13 -b 1 -g $i -o ${i%.gam}'.pack' ;
~/work/dduchen3/tools/vg depth ${graphdir}'HBV_44refs.seqwish_norm.vg' -m 100 -k ${i%.gam}'.pack' > ${i%.gam}'.depth' ;
# quick way to get number of paths covering each base
echo 'ref pos pack' > ${i%.gam}'.path_depth'
for j in $(cat paths.txt); do echo $j;
~/work/dduchen3/tools/vg depth ${graphdir}'HBV_44refs.seqwish_norm.vg' -p $j >> ${i%.gam}'.path_depth' ;
done
done
###########
#
# Max coverage across each position across all references
R
library(data.table)
samps<-list.files(pattern="_subset_map.depth")
samps<-as.list(samps);names(samps)<-list.files(pattern="_subset_map.depth")
samps_paths<-list.files(pattern="path_depth")
library(dplyr);library(plyr)
for(i in 1:length(samps)){
dat<-fread(names(samps)[i])
colnames(dat)<-c("ref","pos","pack")
sumdat<-ddply(dat, c("pos"), summarise,
           max_locus = max(pack))
samps[[i]]<-sumdat
}
dat_paths<-fread(samps_paths[1],header=F)
colnames(dat_paths)<-c("ref","pos","paths")
sumdat_paths<-ddply(dat_paths, c("pos"), summarise,
           max_locus = max(paths))
samps[[i+1]]<-sumdat_paths
names(samps)[i+1]<-"GraphPathCoverage"
save(samps,file="Graph_PseudoDepth.R")
# /scratch/groups/pduggal2/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/
# Plot things!
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads")
load("Graph_PseudoDepth.R")
dat<-merge(samps[[1]],samps[[2]],by="pos",all=T)
colnames(dat)[2:3]<-gsub("_.*$","",names(samps)[1:2])
dat2<-merge(samps[[3]],samps[[4]],by="pos",all=T)
colnames(dat2)[2:3]<-gsub("_.*$","",names(samps)[3:4])
dat<-merge(dat,dat2,by="pos",all=T)
dat<-merge(dat,samps[[5]],by="pos",all=T) ; colnames(dat)[length(dat)]<-gsub("_.*$","",names(samps)[5])
#
previous<-fread("Linear_vs_Graph_B2_Depths.tsv")
fulldat<-merge(dat,previous,by="pos",all=T)
fulldat$ref<-NULL
dat<-t(fulldat)
dat<-dat[-1,]
dat<-data.frame(dat)
dat$reference<-gsub("^.*_", "", rownames(dat))
dat$sample<-gsub("_.*$","",rownames(dat))
dat$reference<-ifelse(dat$reference==dat$sample,"Pangenome",dat$reference)
dat$id<-rownames(dat)
library(reshape)
df_melted = melt(dat, id.vars = c('reference','sample','id'))
df_melted$locus<-gsub("X","",df_melted$variable); df_melted$locus<-as.numeric(df_melted$locus)
####
library(ggplot2)
library(ggpmisc)
library(ggrepel)
library(broom)
library(MetBrewer)
df_melted<-df_melted[df_melted$locus<3215,]
df_melted<-df_melted[!is.na(df_melted$value),]
#
ggplot(df_melted[df_melted$reference != "Pangenome",], aes(x=locus,y=value)) +
      stat_smooth(data=df_melted[df_melted$reference=="Pangenome",],n=1000,span=0.025,se=F,method="loess",
            aes(x=locus,y=value,color=reference),size=1) +
            scale_color_manual(name="",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
      geom_line(alpha=0.5,aes(color=reference),size=1.25) + theme_bw() +
      ylab("Depth") + xlab("Reference Position (HBV Genotype: B2, GU815637)") +
      theme(legend.position="right") + facet_wrap(.~sample)



# Alignment quality > 13 (default of samtools mpileup)
png("Subsampled_Depth_Graph_vs_Linear_alns.png",type="cairo",width = 8, height = 3.5, units= 'in', res=1000)
coverage
dev.off()

####################
# rolling average:
library(zoo)
rollapply(as.numeric(dat[1,]), width = 160, by = 20, FUN = mean, na.rm = TRUE, align = "left")


###################################################################
# potential metrics of interest:
# number of informative sites from iVar consensus / number of Ns across references


###################################################################
# JHPCE
#cd /dcs04/duggal/data/dduchen_dat/hbv/reference_graph/consensus_testing
# MARCC
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing
#
~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/consensus/
SRR7471499_bcftools_A1_1_KP168423.fasta

ml R
conda activate R_4.1.2
options(stringsAsFactors=F);library(data.table);library(Biostrings)
# - split fasta files into specific directories
cons_path="~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/merged_150bp_reads/linear_ref/variant_calling/consensus/"
bcftools<-list.files(path=cons_path,pattern="_bcftools_multifasta.fasta")
for(i in 1:length(bcftools)){
  ref<-readDNAStringSet(paste0(cons_path,bcftools[i]),"fasta")
  for(j in 1:length(ref)){
    refsingle<-ref[j]
    fname<-paste0("./bcftools_consensus/",names(refsingle),'.fasta')
    writeXStringSet(refsingle,filepath=fname,format="fasta")
    }
}
# IVAR CONSENSUS SEQUENCES
ivar<-list.files(path=cons_path,pattern="_ivar_multifasta.fasta")
for(i in 1:length(ivar)){
  ref<-readDNAStringSet(paste0(cons_path,ivar[i]),"fasta")
  for(j in 1:length(ref)){
    refsingle<-ref[j]
    fname<-paste0("./ivar_consensus/",names(refsingle),'.fasta')
    writeXStringSet(refsingle,filepath=fname,format="fasta")
    }
}
# Reference-graph derived consensus
# MARCC:
graphdir="/scratch/groups/pduggal2/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4/C4_qc/graph44_ref/"
ref<-readDNAStringSet(paste0(graphdir,"graph_real_longitudinal_samples_consensus.fasta"))
for(j in 1:length(ref)){
  refsingle<-ref[j]
  names(refsingle)<-paste0("Graph_",names(refsingle))
  fname<-paste0("./ivar_consensus/",names(refsingle),'.fasta')
  writeXStringSet(refsingle,filepath=fname,format="fasta")
  fname<-paste0("./bcftools_consensus/",names(refsingle),'.fasta')
  writeXStringSet(refsingle,filepath=fname,format="fasta")
}
########################
# gramtools consensus
########################
gramtools<-list.files(path=cons_path,pattern="gramtools_reference.fasta")
for(i in 1:length(gramtools)){
  ref<-readDNAStringSet(paste0(cons_path,gramtools[i]),"fasta")
  names(ref)<-gsub(".fasta","",gramtools[i])
  fname<-paste0("./ivar_consensus/",names(ref),'.fasta')
  writeXStringSet(ref,filepath=fname,format="fasta")
  fname<-paste0("./bcftools_consensus/",names(ref),'.fasta')
  writeXStringSet(ref,filepath=fname,format="fasta")
}
####
# -- mapped reads for mash comparisons
read_dir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons"
# SRR7471499_subset_map.fastq.gz
# SRR7471500_subset_map.fastq.gz
# SRR7471501_subset_map.fastq.gz
# SRR7471502_subset_map.fastq.gz
# SRR7471513_subset_map.fastq.gz
#
#################################################################
# --- limit de novo assembled haplotypes to those with frequency >1%
#################################################################
R
library(Biostrings); library(data.table);options(stringsAsFactors=F)
tmp_files<-list.files(pattern="haps.final.fasta")
for(i in 1:length(tmp_files)){
  hapseq<-readDNAStringSet(tmp_files[i])
  haps<-data.frame(names(hapseq))
  haps$sample<-gsub("-.*$","",names(hapseq))
  haps$freqs<-gsub("^.*freq=","",names(hapseq))
  haps$length<-width(hapseq)
  haps$freqs<-as.numeric(haps$freq)
  haps<-haps[haps$freqs>0.01,]
  hapseq<-hapseq[names(hapseq) %in% haps[,1],]
  newfilename<-gsub(".fasta","_edit.fasta",tmp_files[i])
  writeXStringSet(hapseq, newfilename)
}
#
#############################################################################################################
#############################################################################################################
##############################
# Comparisons of consensus sequences
#
conda activate pyseer # for MASH
#
# MARCC
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing
#
# -- file lists
ls $PWD/bcftools_consensus/Graph_Consensus_SRR7471499.fasta > SRR7471499_bcftools_files
ls $PWD/bcftools_consensus/Graph_Consensus_SRR7471500.fasta > SRR7471500_bcftools_files
ls $PWD/bcftools_consensus/Graph_Consensus_SRR7471501.fasta > SRR7471501_bcftools_files
ls $PWD/bcftools_consensus/Graph_Consensus_SRR7471502.fasta > SRR7471502_bcftools_files
ls $PWD/bcftools_consensus/Graph_Consensus_SRR7471513.fasta > SRR7471513_bcftools_files
#
ls $PWD/ivar_consensus/Graph_Consensus_SRR7471499.fasta > SRR7471499_ivar_files
ls $PWD/ivar_consensus/Graph_Consensus_SRR7471500.fasta > SRR7471500_ivar_files
ls $PWD/ivar_consensus/Graph_Consensus_SRR7471501.fasta > SRR7471501_ivar_files
ls $PWD/ivar_consensus/Graph_Consensus_SRR7471502.fasta > SRR7471502_ivar_files
ls $PWD/ivar_consensus/Graph_Consensus_SRR7471513.fasta > SRR7471513_ivar_files
#
# -- add linear reference-based consensus files
ls -d $PWD/bcftools_consensus/SRR7471499* >> SRR7471499_bcftools_files
ls -d $PWD/ivar_consensus/SRR7471499* >> SRR7471499_ivar_files
ls -d $PWD/bcftools_consensus/SRR7471500* >> SRR7471500_bcftools_files
ls -d $PWD/ivar_consensus/SRR7471500* >> SRR7471500_ivar_files
ls -d $PWD/bcftools_consensus/SRR7471501* >> SRR7471501_bcftools_files
ls -d $PWD/ivar_consensus/SRR7471501* >> SRR7471501_ivar_files
ls -d $PWD/bcftools_consensus/SRR7471502* >> SRR7471502_bcftools_files
ls -d $PWD/ivar_consensus/SRR7471502* >> SRR7471502_ivar_files
ls -d $PWD/bcftools_consensus/SRR7471513* >> SRR7471513_bcftools_files
ls -d $PWD/ivar_consensus/SRR7471513* >> SRR7471513_ivar_files
#
# for pairwise distance matrices, uncomment this for mash sketch --> mash dist
# add viral haplotype files
# JHPCE
#echo '/dcs04/duggal/data/dduchen_dat/hbv/reference_graph/consensus_testing/SRR7471###.haps.final.fasta' >> SRR7471###_bcftools_files
#echo '/dcs04/duggal/data/dduchen_dat/hbv/reference_graph/consensus_testing/SRR7471###.haps.final.fasta' >> SRR7471###_ivar_files
# MARCC
echo $PWD/SRR7471499.haps.final_edit.fasta >> SRR7471499_bcftools_files
echo $PWD/SRR7471499.haps.final_edit.fasta >> SRR7471499_ivar_files
echo $PWD/SRR7471500.haps.final_edit.fasta >> SRR7471500_bcftools_files
echo $PWD/SRR7471500.haps.final_edit.fasta >> SRR7471500_ivar_files
echo $PWD/SRR7471501.haps.final_edit.fasta >> SRR7471501_bcftools_files
echo $PWD/SRR7471501.haps.final_edit.fasta >> SRR7471501_ivar_files
echo $PWD/SRR7471502.haps.final_edit.fasta >> SRR7471502_bcftools_files
echo $PWD/SRR7471502.haps.final_edit.fasta >> SRR7471502_ivar_files
echo $PWD/SRR7471513.haps.final_edit.fasta >> SRR7471513_bcftools_files
echo $PWD/SRR7471513.haps.final_edit.fasta >> SRR7471513_ivar_files
#
######### for mapping comparisons:
# combine all info for the haplotype fasta files
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing
ls ${PWD}/*final_edit.fasta > C4_haplotypes.txt
cat *haps.final_edit.fasta > C4_haplotypes.fasta
#
# --- add the haplotypes to the reference graph --> for visualization!
# MARCC:
# 44 refs (fasta): ~/work/dduchen3/projects/HBV/reference/all44_refs/HBV_ref_sequences_6-30-2020.fasta
# can also add haplotype fastas to the graph directly
graphdir=~/work/dduchen3/projects/HBV/reference/pggb_ref/HBV_44Refs_pggb/
graphdir_circ=~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/HBV_44refs_msga/
# add haplotypes then normalize+circularize
C4_haps="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing/C4_haplotypes.fasta"
~/work/dduchen3/tools/vg paths -Fv ${graphdir}'HBV_44refs.seqwish_norm.vg' > HBV_44references.fasta
cat HBV_44references.fasta $C4_haps > HBV_44references_C4haplotypes.fasta
# map contigs to reference graph
~/work/dduchen3/tools/vg map -d ${graphdir}'HBV_44refs.seqwish_norm' -m long -F $C4_haps -D > ./HBV_44refs.seqwish_norm.CR_haps.gam
~/work/dduchen3/tools/vg map -d $graphdir_circ'McNaughton_HBV_44refs_circ_norm' -1 $graphdir_circ'McNaughton_HBV_44refs_circ_norm.augmented.gbwt' -F $C4_haps -D> HBV_44refs.seqwish_norm.CR_haps_circ.gam
#graph: McNaughton_HBV_44refs_circ_norm.vg/.xg...

# augment the graph with variation implied from GAM (except that implied by soft clips), saving to aug.vg.
# aug.gam contains the same reads as aln.gam but mapped to aug.vg
~/work/dduchen3/tools/vg augment ${graphdir}'HBV_44refs.seqwish_norm.vg' HBV_44refs.seqwish_norm.CR_haps.gam -A HBV_44refs.seqwish_norm.CR_haps_aug.gam -p > HBV_44refs.seqwish_norm.CR_haps_aug.vg
# Index our augmented graph
~/work/dduchen3/tools/vg index HBV_44refs.seqwish_norm.CR_haps_aug.vg -x HBV_44refs.seqwish_norm.CR_haps_aug.xg
~/work/dduchen3/tools/vg mod -snc HBV_44refs.seqwish_norm.CR_haps_aug.vg > HBV_44refs.seqwish_norm.CR_haps_aug_norm.vg
~/work/dduchen3/tools/vg prune -r HBV_44refs.seqwish_norm.CR_haps_aug_norm.vg > HBV_44refs.seqwish_norm.CR_haps_aug_norm_pruned.vg
~/work/dduchen3/tools/vg convert HBV_44refs.seqwish_norm.CR_haps_aug_norm.vg -f > HBV_44refs.seqwish_norm.CR_haps_aug_norm.gfa
~/work/dduchen3/tools/vg convert HBV_44refs.seqwish_norm.CR_haps_aug_norm_pruned.vg -f > HBV_44refs.seqwish_norm.CR_haps_aug_norm_pruned.gfa
#
# get refpos of the augmented/combined graph -- where do de novo haplotypes align
~/work/dduchen3/tools/vg annotate -a HBV_44refs.seqwish_norm.CR_haps.gam -x HBV_44refs.seqwish_norm.CR_haps_aug.xg -p > HBV_44refs.seqwish_norm.CR_haps.annotated.gam
vg view -aj HBV_44refs.seqwish_norm.CR_haps.annotated.gam | jq -r '[.name] + if .refpos != null then [.refpos[] | .name, if .offset != null then .offset else 0 end] else [] end | @tsv' > HBV_44refs.seqwish_norm.CR_haps.positions.tsv
# -- Plots!
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/unmapped_reads_from_alignments")
gff<-fread("~/JHSPH/Research/HBV/Reference_Testing/HBV_reference_B2_2_GU815637.gff",header=F)
colnames(gff)<-c("seqname","source","feature","start","end","strand","frame","score","attribute")
gff$gene<-gsub("^.*gene=","",gff$attribute)
gff$gene<-gsub(" .*$","",gff$gene)
gff$gene[1]<-NA
gff$orientation<-ifelse(gff$start<gff$end,1,-1)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205"),"-",gff$strand)
gff$strand<-ifelse(gff$feature=="CDS" & gff$start %in% c("1814","3205","1374"),"-",gff$strand)
library("gggenes") # https://github.com/wilkox/gggenes
library(gggenomes)
#
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/unmapped_reads_from_alignments")
graph_alns<-list.files(pattern="HBV_44refs.seqwish_norm.CR_haps.positions.tsv")
fulldat<-data.frame()
library(dplyr);library(plyr)
for(i in 1:length(graph_alns)){
  dat<-read.delim(file=graph_alns[i],sep="\t",header=F)
  dat_filt<-dat[!is.na(dat$V57),] # B2_2_GU815637 reference
  dat_filt$sample<-gsub("-.*$","",dat_filt$V1)
  fulldat<-rbind(fulldat,dat_filt)
}
# sample-specific maxima
mu <- ddply(fulldat, "sample", summarise, grp.max=density(V57,adjust=1/10)$x[which.max(density(V57,adjust=1/10)$y)])
#
library(ggplot2)
library(ggpmisc)
library(ggrepel)
library(broom)
library(MetBrewer)
test<-ggplot(fulldat, aes(x=V57)) +
 geom_density(alpha=.4,aes(fill=sample), adjust=1/15) + theme_bw() +
 theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) + #geom_density(aes(x=V57)) + #will add lines for all unmapped reads, not just when both pairs are unmapped
 theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
        geom_vline(data=mu, aes(xintercept=grp.max, color=sample),
           linetype="dashed") + guides(linetype="none",color="none") +
           xlim(c(0,3225)) +
  scale_fill_manual(name="",values=c(met.brewer("Isfahan2", n=5,type="continuous"))) +
  theme(legend.position="top")
p <- ggplot_build(test)
p<-p$data[[1]]
# get average density value across each group at each position x
library(dplyr)
mu_maxima <- ddply(p, .(x), summarize,
            mean_density=mean(density))
#
mu_maxima$V57<-mu_maxima$x
mu_maxima$density<-mu_maxima$mean_density
peaks<-ggplot(mu_maxima, aes(x=V57,y=density)) + #geom_line() +
  stat_peaks(data=mu_maxima[mu_maxima$mean_density>0.00075,], colour = "red") +
  stat_peaks(data=mu_maxima[mu_maxima$mean_density>0.00075,], geom = "text", colour = "red", angle = 66,
             hjust = -0.1) + xlim(c(0,3225)) + theme_bw() +
  stat_peaks(data=mu_maxima[mu_maxima$mean_density>0.00075,], geom = "rug", colour = "red", sides = "b")
peaks
#
annotations_lines<-ggplot_build(peaks)
annotations_lines<-as.numeric(annotations_lines[[1]][[3]]$label)
#
#
test<-ggplot(fulldat, aes(x=V57)) +
 geom_density(alpha=.4,aes(fill=sample), adjust=1/10) + theme_bw() +
 theme(axis.title.x=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()) +
 theme(axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank()) +
        geom_vline(xintercept=annotations_lines, color="red",
           linetype="dashed") + guides(linetype="none",color="none") +
           xlim(c(0,3225)) +
  scale_fill_manual(name="",values=c(met.brewer("Isfahan2", n=5,type="continuous"))) +
  theme(legend.position="top")  +
  stat_peaks(aes(y=density), data=mu_maxima[mu_maxima$mean_density>0.00075,], colour = "red", geom = "text", angle = 45,hjust=-0.1) #   stat_peaks(aes(y=density), data=mu_maxima[mu_maxima$mean_density>0.00075,], geom = "rug", colour = "red", sides = "b")
#
#
library(gggenomes);library(MetBrewer)
gff$seq_id<-"HBV"
ref_genome<-gggenomes(genes=gff[gff$feature=="CDS",]) +
    geom_gene(aes(fill=gene), position="sixframe",size=5,stroke=0.5) + #position="strandpile", position="pile"
    scale_fill_manual(name="HBV",values=c(met.brewer("Egypt", n=4,type="continuous"))) +
    scale_y_continuous(limits=c(0.8, 1.3), expand = c(0, 0)) +
    scale_x_continuous(limits=c(0, 3225), n.breaks=20) +
    geom_vline(xintercept=annotations_lines, color="red",
       linetype="dashed") + guides(linetype="none",color="none") +
    theme(legend.position="bottom")
#
#
library(gridExtra);library(grid)
bottom <- textGrob("De Novo assembled HBV contigs/haplotypes\nAlignment Positions", gp = gpar(fontsize = 15))
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/unmapped_reads_from_alignments")
#png("VG_Map_Assembled_Haplotypes_to_graph.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
  grid.arrange(test,ref_genome, nrow=2,heights=c(0.8, 0.25))
#dev.off()

#####################################
# -- depth of vg map vs. bwa mem -- #
SRR7471501_seqwish_map_sorted_depth.tsv


######################################################################
# -- MASH distances -- #
# -- estimate mash distance of each of these consensus files/haplotypes vs. cleaned fastq reads which align to the reference graph
# compare the consensus sequences + viral haplotypes to the mapped fastq reads
# # -- could also extract paths from sample-specific genome graphs - or from threads from GBWT (vg paths, -F output)
#
# VG Consensus sequences:
cp ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/HBV_44refs.seqwish_norm_SRR7471499_150bp_VG_calling_consensus.fasta ./SRR7471499_150bp_VG_calling_consensus.fasta
cp ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/HBV_44refs.seqwish_norm_SRR7471500_150bp_VG_calling_consensus.fasta ./SRR7471500_150bp_VG_calling_consensus.fasta
cp ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/HBV_44refs.seqwish_norm_SRR7471501_150bp_VG_calling_consensus.fasta ./SRR7471501_150bp_VG_calling_consensus.fasta
cp ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/HBV_44refs.seqwish_norm_SRR7471502_150bp_VG_calling_consensus.fasta ./SRR7471502_150bp_VG_calling_consensus.fasta
cp ~/work/dduchen3/projects/HBV/reference/pangenome_ref_tests/pggb_ref/all44_wfmash/HBV_44refs.seqwish_norm_SRR7471513_150bp_VG_calling_consensus.fasta ./SRR7471513_150bp_VG_calling_consensus.fasta
#
# JHPCE:
#cp /fastscratch/myscratch/dduchen/hbeag_referencetest/SRR7471499_cleaned.tar.gz /dcs04/duggal/data/dduchen_dat/hbv/reference_graph/consensus_testing/
#cp /fastscratch/myscratch/dduchen/baseline_hbeag/SRR7471500_cleaned.tar.gz /dcs04/duggal/data/dduchen_dat/hbv/reference_graph/consensus_testing/
#
# MARCC:
cd ~/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing
#
# For mash distance comparisons - sketch the read sets seperately
read_dir="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/vgmap_comparisons/"
conda activate pyseer
# SRR7471499
mash sketch -o SRR7471499_HBV_reads_mash -r ${read_dir}SRR7471499_subset_map.fastq.gz -s 10000 -k 7 -g 3k -m 2
mash sketch -o SRR7471499_bcftools_mash_comparisons -l SRR7471499_bcftools_files -s 10000 -k 7
mash sketch -o SRR7471499_ivar_mash_comparisons -l SRR7471499_ivar_files -s 10000 -k 7
mash sketch -o SRR7471499_150bp_VG_calling_consensus SRR7471499_150bp_VG_calling_consensus.fasta -s 10000 -k 7
rm SRR7471499_mash_sketch2.msh
mash paste SRR7471499_mash_sketch2 SRR7471499_HBV_reads_mash.msh SRR7471499_bcftools_mash_comparisons.msh SRR7471499_ivar_mash_comparisons.msh SRR7471499_150bp_VG_calling_consensus.msh
#mash dist SRR7471499_mash_sketch2.msh SRR7471499_mash_sketch2.msh | square_mash > SRR7471499_mash_distances_updated.tsv
mash dist SRR7471499_mash_sketch2.msh SRR7471499_mash_sketch2.msh  > SRR7471499_mash_distances_updated_nonsquare.tsv
#
# SRR7471500
mash sketch -o SRR7471500_HBV_reads_mash -r ${read_dir}SRR7471500_subset_map.fastq.gz -s 10000 -k 7 -g 3k -m 2
mash sketch -o SRR7471500_bcftools_mash_comparisons -l SRR7471500_bcftools_files -s 10000 -k 7
mash sketch -o SRR7471500_ivar_mash_comparisons -l SRR7471500_ivar_files -s 10000 -k 7
mash sketch -o SRR7471500_150bp_VG_calling_consensus SRR7471500_150bp_VG_calling_consensus.fasta -s 10000 -k 7
rm SRR7471500_mash_sketch2.msh
mash paste SRR7471500_mash_sketch2 SRR7471500_HBV_reads_mash.msh SRR7471500_bcftools_mash_comparisons.msh SRR7471500_ivar_mash_comparisons.msh SRR7471500_150bp_VG_calling_consensus.msh
#mash dist SRR7471500_mash_sketch2.msh SRR7471500_mash_sketch2.msh | square_mash > SRR7471500_mash_distances_updated.tsv
mash dist SRR7471500_mash_sketch2.msh SRR7471500_mash_sketch2.msh  > SRR7471500_mash_distances_updated_nonsquare.tsv
#
# SRR7471501
mash sketch -o SRR7471501_HBV_reads_mash -r ${read_dir}SRR7471501_subset_map.fastq.gz -s 10000 -k 7 -g 3k -m 2
mash sketch -o SRR7471501_bcftools_mash_comparisons -l SRR7471501_bcftools_files -s 10000 -k 7
mash sketch -o SRR7471501_ivar_mash_comparisons -l SRR7471501_ivar_files -s 10000 -k 7
mash sketch -o SRR7471501_150bp_VG_calling_consensus SRR7471501_150bp_VG_calling_consensus.fasta -s 10000 -k 7
rm SRR7471501_mash_sketch2.msh
mash paste SRR7471501_mash_sketch2 SRR7471501_HBV_reads_mash.msh SRR7471501_bcftools_mash_comparisons.msh SRR7471501_ivar_mash_comparisons.msh SRR7471501_150bp_VG_calling_consensus.msh
#mash dist SRR7471501_mash_sketch2.msh SRR7471501_mash_sketch2.msh | square_mash > SRR7471501_mash_distances_updated.tsv
mash dist SRR7471501_mash_sketch2.msh SRR7471501_mash_sketch2.msh  > SRR7471501_mash_distances_updated_nonsquare.tsv
#
# SRR7471502
mash sketch -o SRR7471502_HBV_reads_mash -r ${read_dir}SRR7471502_subset_map.fastq.gz -s 10000 -k 7 -g 3k -m 2
mash sketch -o SRR7471502_bcftools_mash_comparisons -l SRR7471502_bcftools_files -s 10000 -k 7
mash sketch -o SRR7471502_ivar_mash_comparisons -l SRR7471502_ivar_files -s 10000 -k 7
mash sketch -o SRR7471502_150bp_VG_calling_consensus SRR7471502_150bp_VG_calling_consensus.fasta -s 10000 -k 7
rm SRR7471502_mash_sketch2.msh
mash paste SRR7471502_mash_sketch2 SRR7471502_HBV_reads_mash.msh SRR7471502_bcftools_mash_comparisons.msh SRR7471502_ivar_mash_comparisons.msh SRR7471502_150bp_VG_calling_consensus.msh
#mash dist SRR7471502_mash_sketch2.msh SRR7471502_mash_sketch2.msh | square_mash > SRR7471502_mash_distances_updated.tsv
mash dist SRR7471502_mash_sketch2.msh SRR7471502_mash_sketch2.msh  > SRR7471502_mash_distances_updated_nonsquare.tsv
#
# SRR7471513
mash sketch -o SRR7471513_HBV_reads_mash -r ${read_dir}SRR7471513_subset_map.fastq.gz -s 10000 -k 7 -g 3k -m 2
mash sketch -o SRR7471513_bcftools_mash_comparisons -l SRR7471513_bcftools_files -s 10000 -k 7
mash sketch -o SRR7471513_ivar_mash_comparisons -l SRR7471513_ivar_files -s 10000 -k 7
mash sketch -o SRR7471513_150bp_VG_calling_consensus SRR7471513_150bp_VG_calling_consensus.fasta -s 10000 -k 7
rm SRR7471513_mash_sketch2.msh
mash paste SRR7471513_mash_sketch2 SRR7471513_HBV_reads_mash.msh SRR7471513_bcftools_mash_comparisons.msh SRR7471513_ivar_mash_comparisons.msh SRR7471513_150bp_VG_calling_consensus.msh
#mash dist SRR7471513_mash_sketch2.msh SRR7471513_mash_sketch2.msh | square_mash > SRR7471513_mash_distances_updated.tsv
mash dist SRR7471513_mash_sketch2.msh SRR7471513_mash_sketch2.msh  > SRR7471513_mash_distances_updated_nonsquare.tsv
#
#rm *reads_mash.msh *_comparisons.msh
#
R
# How representative is the reference sequence to real CHB infections, comparing the reference sequence to viral haplotypes obtained via SAVAGE/VG-Flow
# graph-derived consensus ~ on par with best reference vs. real CHB samples
#
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/distances")
library(ape);library(Biostrings);library(data.table)
SRR7471499<-fread("SRR7471499_mash_distances_updated_nonsquare.tsv",sep="\t");dat<-data.frame(SRR7471499)
SRR7471500<-fread("SRR7471500_mash_distances_updated_nonsquare.tsv",sep="\t");dat<-data.frame(SRR7471500)
SRR7471501<-fread("SRR7471501_mash_distances_updated_nonsquare.tsv",sep="\t");dat<-data.frame(SRR7471501)
SRR7471502<-fread("SRR7471502_mash_distances_updated_nonsquare.tsv",sep="\t");dat<-data.frame(SRR7471502)
SRR7471513<-fread("SRR7471513_mash_distances_updated_nonsquare.tsv",sep="\t");dat<-data.frame(SRR7471513)
dat$V1<-gsub("^.*\\/","",dat$V1);dat$V2<-gsub("^.*\\/","",dat$V2)
dat<-dat[grep("subset_map",dat$V1),]
dat$comparison<-""
dat$group<-""
dat[grep("bcftools",dat$V2),]$group<-"LoFreq"
dat[grep("iVar",dat$V2),]$group<-"iVar"
dat[grep("_subset_map",dat$V2),]$group<-"reference"
dat[grep("Graph_Consensus",dat$V2),]$group<-"graph"
dat[grep("gramtools_reference",dat$V2),]$group<-"graph"
dat[grep("VG_calling",dat$V2),]$group<-"graph"
dat[grep("haps.final_edit",dat$V2),]$group<-"graph"
dat[which(dat$group %in% c("iVar")),]$comparison<-gsub("^.*_iVar_","",dat[which(dat$group %in% c("iVar")),]$V2)
dat[which(dat$group %in% c("LoFreq")),]$comparison<-gsub("^.*_bcftools_","",dat[which(dat$group %in% c("LoFreq")),]$V2)
dat[which(dat$comparison!=""),]$comparison<-sub("^(\\w).*$", "\\1",dat[which(dat$comparison!=""),]$comparison)
dat[grep("_subset_map",dat$V2),]$comparison<-"QC-passed HBV reads"
dat[grep("Graph_Consensus",dat$V2),]$comparison<-"Best reference path"
dat[grep("gramtools_reference",dat$V2),]$comparison<-"Gramtools consensus"
dat[grep("haps.final_edit",dat$V2),]$comparison<-"HBV Haplotypes (>1%)"
dat[grep("VG_calling",dat$V2),]$comparison<-"VG alignment consensus"
dat[grep("_subset_map",dat$V2),]$comparison<-"reference"
#
dat_comp<-dat[dat$group %in% c("graph","iVar"),]
dat_comp$iVar_dist<-dat_comp$V3
dat_comp$matching<-gsub("^.*_iVar_","",dat_comp$V2)
dat_comp<-dat_comp[order(dat_comp$matching),]
dat_comp2<-dat[dat$group %in% c("graph","LoFreq"),]
dat_comp2$LoFreq_dist<-dat_comp2$V3
dat_comp2$matching<-gsub("^.*_bcftools_","",dat_comp2$V2)
dat_comp2<-dat_comp2[order(dat_comp2$matching),]
all(dat_comp$matching==dat_comp2$matching)
dat_comp$LoFreq_dist<-dat_comp2$LoFreq_dist
#
dat_comp<-dat_comp[-which(dat_comp$comparison %in% c("Gramtools consensus")),]
#
# SRR7471499<-dat_comp
# SRR7471500<-dat_comp
# SRR7471501<-dat_comp
# SRR7471502<-dat_comp
# SRR7471513<-dat_comp
#
distances_v_reads<-ggplot(dat_comp,aes(x=iVar_dist,y=LoFreq_dist)) + geom_point(aes(color=comparison),size=ifelse(dat_comp$group=="graph",5,2.5),alpha=0.5)  +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. HBV reads\n(Mash distance)") + ylab("LoFreq Consensus vs. HBV reads\n(Mash distance)") +
              guides(color = guide_legend("",override.aes = list(size=c(2,2,5,2,2,2,2,2,2,5,2,2,5))))

#
distances_v_reads
#png("MashDistances_HBV_SRR7471499_05032022.png",type="cairo",width = 8, height = 6, units= 'in', res=1000)
#png("MashDistances_HBV_SRR7471500_05032022.png",type="cairo",width = 8, height = 6, units= 'in', res=1000)
#png("MashDistances_HBV_SRR7471501_05032022.png",type="cairo",width = 8, height = 6, units= 'in', res=1000)
#png("MashDistances_HBV_SRR7471502_05032022.png",type="cairo",width = 8, height = 6, units= 'in', res=1000)
#png("MashDistances_HBV_SRR7471513_05032022.png",type="cairo",width = 8, height = 6, units= 'in', res=1000)
distances_v_reads
dev.off()
##################################
# -- combine into single plot -- #
dat<-rbind(SRR7471499,SRR7471500,SRR7471501,SRR7471502,SRR7471513)
dat$sample<-gsub("_.*$","",dat$V1)
#
library(gridExtra);library(grid);library(ggpubr)
library(cowplot)
#get legend:
p<-ggplot(dat[dat$sample=="SRR7471499",],aes(x=iVar_dist,y=LoFreq_dist)) + geom_point(aes(color=comparison),size=ifelse(dat[dat$sample=="SRR7471499",]$group=="graph",5,2.5),alpha=0.5)  +
    theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
    xlab("iVar Consensus vs. HBV reads\n(Mash distance)") + ylab("LoFreq Consensus vs. HBV reads\n(Mash distance)") +
    guides(color = guide_legend("",override.aes = list(size=c(2,2,5,2,2,2,2,2,2,5,2,2,5)))) +
    theme(legend.background=element_rect(fill = alpha("white", 0)))
    # ^ manually set graph-based/haplotypes larger
p_facet<-ggplot(dat,aes(x=iVar_dist,y=LoFreq_dist)) + geom_point(aes(color=comparison),size=ifelse(dat$group=="graph",5,2.5),alpha=0.5)  +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. HBV reads\n(Mash distance)") + ylab("LoFreq Consensus vs. HBV reads\n(Mash distance)") +
              facet_wrap(.~sample,scale="free") + theme(legend.position="none")
#
legend_combined <- get_legend(p + theme(legend.position=c(-5,0.3)))
#
p_complete<-plot_grid(p_facet, legend_combined, rel_widths = c(3, 0.1))
#
# png("Mash_Distances_AllSamples_050422.png",type="cairo",width = 10.5, height = 7, units= 'in', res=1000)
p_complete
dev.off()
#
library(plyr);library(dplyr)
dat[dat$comparison %in% "HBV Haplotypes (>1%)",]$group<-"haplotypes"
dat[dat$comparison %in% "Best reference path",]$group<-"graph surjection"
sumdat_mash<-ddply(dat, c("sample","group"), summarise,
                   min_iVar_dist = min(iVar_dist),
                   max_iVar_dist = max(iVar_dist),
                   min_LoFreq_dist = min(LoFreq_dist),
                   max_LoFreq_dist = max(LoFreq_dist))

#
# difference between best reference path and same linear reference
SRR7471499[SRR7471499$matching=="B2_2_GU815637.fasta",]$iVar_dist-SRR7471499[SRR7471499$comparison=="Best reference path",]$iVar_dist[1]
# 0
SRR7471500[SRR7471500$matching=="B2_2_GU815637.fasta",]$iVar_dist-SRR7471500[SRR7471500$comparison=="Best reference path",]$iVar_dist[1]
# 0
SRR7471501[SRR7471501$matching=="B2_2_GU815637.fasta",]$iVar_dist-SRR7471501[SRR7471501$comparison=="Best reference path",]$iVar_dist[1]
# 0
SRR7471502[SRR7471502$matching=="B2_2_GU815637.fasta",]$iVar_dist-SRR7471502[SRR7471502$comparison=="Best reference path",]$iVar_dist[1]
# 0
SRR7471513[SRR7471513$matching=="B2_2_GU815637.fasta",]$iVar_dist-SRR7471513[SRR7471513$comparison=="Best reference path",]$iVar_dist[1]
# 0
# --- no difference in mash distances between linear surjection + same linear reference







library(harrietr)
# set-up dataset
SRR7471499<-fread("SRR7471499_mash_distances.tsv",sep="\t")
SRR7471499<-data.frame(SRR7471499)
rownames(SRR7471499)<-SRR7471499$V1
SRR7471499<-SRR7471499[,-1]
SRR7471499<-as.matrix(SRR7471499)
dist_comp <- melt_dist(SRR7471499)
dist_comp$sample<-"SRR7471499"
dist_comp$iso1<-gsub("^SRR7471499$","SRR7471499_HBV_Haplotypes",dist_comp$iso1)
dist_comp$iso2<-gsub("^SRR7471499$","SRR7471499_HBV_Haplotypes",dist_comp$iso2)
dist_comp$cons_method_1<-""
dist_comp$cons_method_2<-""
dist_comp[grep("bcftools",dist_comp$iso1),]$cons_method_1<-"bcftools"
dist_comp[grep("bcftools",dist_comp$iso2),]$cons_method_2<-"bcftools"
dist_comp[grep("iVar",dist_comp$iso1),]$cons_method_1<-"iVar"
dist_comp[grep("iVar",dist_comp$iso2),]$cons_method_2<-"iVar"
dist_comp[grep("_subset_map",dist_comp$iso1),]$cons_method_1<-"QC-passed HBV reads"
dist_comp[grep("_subset_map",dist_comp$iso2),]$cons_method_2<-"QC-passed HBV reads"
dist_comp[grep("Graph_Consensus",dist_comp$iso1),]$cons_method_1<-"Best reference path"
dist_comp[grep("Graph_Consensus",dist_comp$iso2),]$cons_method_2<-"Best reference path"
dist_comp[grep("gramtools_reference",dist_comp$iso1),]$cons_method_1<-"Graph-derived consensus"
dist_comp[grep("gramtools_reference",dist_comp$iso2),]$cons_method_2<-"Graph-derived consensus"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso1),]$cons_method_1<-"HBV Haplotypes (>1%)"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso2),]$cons_method_2<-"HBV Haplotypes (>1%)"
dist_comp$genotype_1<-dist_comp$cons_method_1
dist_comp$genotype_2<-dist_comp$cons_method_2
dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$iso1))
dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$iso1))
dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$iso2))
dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$iso2))
# combine but avoid conflict in order for comparisons
f = function(x,y) {paste(sort(c(x, y)), collapse = " - ")}
f = Vectorize(f)
# apply function to your dataset
dist_comp<-dist_comp %>% mutate(pairwise_comparison = f(genotype_1, genotype_2))
# separate by consensus generation technique, but include graph-based methods
dist_comp_ivar<-dist_comp[dist_comp$cons_method_1 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
dist_comp_bcftools<-dist_comp[dist_comp$cons_method_1 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
# subset the table of ALL pairwise distances to relevant comparisons: vs. real reads, vs. haplotypes
dist_comp_ivar$iso_filt1<-gsub("SRR7471499_iVar_","",dist_comp_ivar$iso1)
dist_comp_ivar$iso_filt2<-gsub("SRR7471499_iVar_","",dist_comp_ivar$iso2)
dist_comp_ivar<-dist_comp_ivar %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
dist_comp_bcftools$iso_filt1<-gsub("SRR7471499_bcftools_","",dist_comp_bcftools$iso1)
dist_comp_bcftools$iso_filt2<-gsub("SRR7471499_bcftools_","",dist_comp_bcftools$iso2)
dist_comp_bcftools<-dist_comp_bcftools %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
all(dist_comp_ivar$pairwise_iso_comparison %in% dist_comp_bcftools$pairwise_iso_comparison) # TRUE
dist_comp_ivar<-dist_comp_ivar[order(dist_comp_ivar$pairwise_iso_comparison),]
dist_comp_bcftools<-dist_comp_bcftools[order(dist_comp_bcftools$pairwise_iso_comparison),]
all(dist_comp_ivar$pairwise_iso_comparison==dist_comp_bcftools$pairwise_iso_comparison) #TRUE
colnames(dist_comp_ivar)<-paste0(colnames(dist_comp_ivar),"_iVar")
colnames(dist_comp_bcftools)<-paste0(colnames(dist_comp_bcftools),"_bcftools")
#
dist_comp_filt<-cbind(dist_comp_ivar[,c("sample_iVar","pairwise_comparison_iVar","pairwise_iso_comparison_iVar","dist_iVar","genotype_1_iVar","genotype_2_iVar")],dist_comp_bcftools$dist_bcftools)
colnames(dist_comp_filt)[7]<-"dist_bcftools"
dist_comp_filt$group<-ifelse(dist_comp_filt$genotype_1_iVar==dist_comp_filt$genotype_2_iVar,dist_comp_filt$genotype_2_iVar,dist_comp_filt$pairwise_comparison_iVar)
dist_comp_filt$reads<-0 ; dist_comp_filt[grep("QC-passed HBV reads",dist_comp_filt$group),]$reads<-1
dist_comp_filt$haplotypes<-0 ; dist_comp_filt[grep("Haplotypes",dist_comp_filt$group),]$haplotypes<-1
dist_comp_filt$graphcons<-0;dist_comp_filt[grep("Graph-derived consensus",dist_comp_filt$group),]$graphcons<-1
#
dist_comp_filt$group2<-dist_comp_filt$group
dist_comp_filt[dist_comp_filt$reads==1,]$group2<-gsub(" - QC-passed HBV reads","",dist_comp_filt[dist_comp_filt$reads==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub(" - HBV Haplotypes \\(>1%\\)","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub("HBV Haplotypes \\(>1%\\) - ","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub("Graph-derived consensus - ","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub(" - Graph-derived consensus","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
#
dist_comp_filt$group3<-rowSums(dist_comp_filt[,c("reads", "haplotypes","graphcons")])
dist_comp_filt[dist_comp_filt$group3==2,]$group2<-dist_comp_filt[dist_comp_filt$group3==2,]$group
# --
#
reads_SRR7471499<-ggplot(dist_comp_filt[dist_comp_filt$reads==1,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2,),
              #size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group2 %in% c("Best reference path","Graph-derived consensus - QC-passed HBV reads","HBV Haplotypes (>1%) - QC-passed HBV reads"),5,2.5),alpha=0.5)  +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. QC-passed HBV reads\n(Mash distance)") + ylab("bcftools Consensus vs. QC-passed HBV reads\n(Mash distance)")
#
haplo_SRR7471499<-ggplot(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2),
              #size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group2 %in% c("Best reference path","Graph-derived consensus - HBV Haplotypes (>1%)"),5,2.5),alpha=0.5) +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. HBV Haplotypes\n(Mash distance)") + ylab("bcftools Consensus vs. HBV Haplotypes\n(Mash distance)")
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/distances")
png("MashDistances_HBVHaplotypes_SRR7471499.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
haplo_SRR7471499
dev.off()
png("MashDistances_HBVReads_SRR7471499.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
reads_SRR7471499
dev.off()
# ----
#######################################################
#######################################################
# set-up dataset
SRR7471500<-fread("SRR7471500_mash_distances.tsv",sep="\t")
SRR7471500<-data.frame(SRR7471500)
rownames(SRR7471500)<-SRR7471500$V1
SRR7471500<-SRR7471500[,-1]
SRR7471500<-as.matrix(SRR7471500)
dist_comp <- melt_dist(SRR7471500)
dist_comp$sample<-"SRR7471500"
dist_comp$iso1<-gsub("^SRR7471500$","SRR7471500_HBV_Haplotypes",dist_comp$iso1)
dist_comp$iso2<-gsub("^SRR7471500$","SRR7471500_HBV_Haplotypes",dist_comp$iso2)
dist_comp$cons_method_1<-""
dist_comp$cons_method_2<-""
dist_comp[grep("bcftools",dist_comp$iso1),]$cons_method_1<-"bcftools"
dist_comp[grep("bcftools",dist_comp$iso2),]$cons_method_2<-"bcftools"
dist_comp[grep("iVar",dist_comp$iso1),]$cons_method_1<-"iVar"
dist_comp[grep("iVar",dist_comp$iso2),]$cons_method_2<-"iVar"
dist_comp[grep("_subset_map",dist_comp$iso1),]$cons_method_1<-"QC-passed HBV reads"
dist_comp[grep("_subset_map",dist_comp$iso2),]$cons_method_2<-"QC-passed HBV reads"
dist_comp[grep("Graph_Consensus",dist_comp$iso1),]$cons_method_1<-"Best reference path"
dist_comp[grep("Graph_Consensus",dist_comp$iso2),]$cons_method_2<-"Best reference path"
dist_comp[grep("gramtools_reference",dist_comp$iso1),]$cons_method_1<-"Graph-derived consensus"
dist_comp[grep("gramtools_reference",dist_comp$iso2),]$cons_method_2<-"Graph-derived consensus"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso1),]$cons_method_1<-"HBV Haplotypes (>1%)"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso2),]$cons_method_2<-"HBV Haplotypes (>1%)"
dist_comp$genotype_1<-dist_comp$cons_method_1
dist_comp$genotype_2<-dist_comp$cons_method_2
dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$iso1))
dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$iso1))
dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$iso2))
dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$iso2))
# combine but avoid conflict in order for comparisons
f = function(x,y) {paste(sort(c(x, y)), collapse = " - ")}
f = Vectorize(f)
# apply function to your dataset
dist_comp<-dist_comp %>% mutate(pairwise_comparison = f(genotype_1, genotype_2))
# separate by consensus generation technique, but include graph-based methods
dist_comp_ivar<-dist_comp[dist_comp$cons_method_1 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
dist_comp_bcftools<-dist_comp[dist_comp$cons_method_1 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
# subset the table of ALL pairwise distances to relevant comparisons: vs. real reads, vs. haplotypes
dist_comp_ivar$iso_filt1<-gsub("SRR7471500_iVar_","",dist_comp_ivar$iso1)
dist_comp_ivar$iso_filt2<-gsub("SRR7471500_iVar_","",dist_comp_ivar$iso2)
dist_comp_ivar<-dist_comp_ivar %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
dist_comp_bcftools$iso_filt1<-gsub("SRR7471500_bcftools_","",dist_comp_bcftools$iso1)
dist_comp_bcftools$iso_filt2<-gsub("SRR7471500_bcftools_","",dist_comp_bcftools$iso2)
dist_comp_bcftools<-dist_comp_bcftools %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
all(dist_comp_ivar$pairwise_iso_comparison %in% dist_comp_bcftools$pairwise_iso_comparison) # TRUE
dist_comp_ivar<-dist_comp_ivar[order(dist_comp_ivar$pairwise_iso_comparison),]
dist_comp_bcftools<-dist_comp_bcftools[order(dist_comp_bcftools$pairwise_iso_comparison),]
all(dist_comp_ivar$pairwise_iso_comparison==dist_comp_bcftools$pairwise_iso_comparison) #TRUE
colnames(dist_comp_ivar)<-paste0(colnames(dist_comp_ivar),"_iVar")
colnames(dist_comp_bcftools)<-paste0(colnames(dist_comp_bcftools),"_bcftools")
#
dist_comp_filt<-cbind(dist_comp_ivar[,c("sample_iVar","pairwise_comparison_iVar","pairwise_iso_comparison_iVar","dist_iVar","genotype_1_iVar","genotype_2_iVar")],dist_comp_bcftools$dist_bcftools)
colnames(dist_comp_filt)[7]<-"dist_bcftools"
dist_comp_filt$group<-ifelse(dist_comp_filt$genotype_1_iVar==dist_comp_filt$genotype_2_iVar,dist_comp_filt$genotype_2_iVar,dist_comp_filt$pairwise_comparison_iVar)
dist_comp_filt$reads<-0 ; dist_comp_filt[grep("QC-passed HBV reads",dist_comp_filt$group),]$reads<-1
dist_comp_filt$haplotypes<-0 ; dist_comp_filt[grep("Haplotypes",dist_comp_filt$group),]$haplotypes<-1
dist_comp_filt$graphcons<-0;dist_comp_filt[grep("Graph-derived consensus",dist_comp_filt$group),]$graphcons<-1
#
dist_comp_filt$group2<-dist_comp_filt$group
dist_comp_filt[dist_comp_filt$reads==1,]$group2<-gsub(" - QC-passed HBV reads","",dist_comp_filt[dist_comp_filt$reads==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub(" - HBV Haplotypes \\(>1%\\)","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub("HBV Haplotypes \\(>1%\\) - ","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub("Graph-derived consensus - ","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub(" - Graph-derived consensus","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
#
dist_comp_filt$group3<-rowSums(dist_comp_filt[,c("reads", "haplotypes","graphcons")])
dist_comp_filt[dist_comp_filt$group3==2,]$group2<-dist_comp_filt[dist_comp_filt$group3==2,]$group
# --
#
reads_SRR7471500<-ggplot(dist_comp_filt[dist_comp_filt$reads==1,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2,),
              #size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group2 %in% c("Best reference path","Graph-derived consensus - QC-passed HBV reads","HBV Haplotypes (>1%) - QC-passed HBV reads"),5,2.5),alpha=0.5)  +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. QC-passed HBV reads\n(Mash distance)") + ylab("bcftools Consensus vs. QC-passed HBV reads\n(Mash distance)")
#
haplo_SRR7471500<-ggplot(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2),
              #size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group2 %in% c("Best reference path","Graph-derived consensus - HBV Haplotypes (>1%)"),5,2.5),alpha=0.5) +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. HBV Haplotypes\n(Mash distance)") + ylab("bcftools Consensus vs. HBV Haplotypes\n(Mash distance)")
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/distances")
png("MashDistances_HBVHaplotypes_SRR7471500.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
haplo_SRR7471500
dev.off()
png("MashDistances_HBVReads_SRR7471500.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
reads_SRR7471500
dev.off()
#######################################################
#######################################################
# set-up dataset
SRR7471501<-fread("SRR7471501_mash_distances.tsv",sep="\t")
SRR7471501<-data.frame(SRR7471501)
rownames(SRR7471501)<-SRR7471501$V1
SRR7471501<-SRR7471501[,-1]
SRR7471501<-as.matrix(SRR7471501)
dist_comp <- melt_dist(SRR7471501)
dist_comp$sample<-"SRR7471501"
dist_comp$iso1<-gsub("^SRR7471501$","SRR7471501_HBV_Haplotypes",dist_comp$iso1)
dist_comp$iso2<-gsub("^SRR7471501$","SRR7471501_HBV_Haplotypes",dist_comp$iso2)
dist_comp$cons_method_1<-""
dist_comp$cons_method_2<-""
dist_comp[grep("bcftools",dist_comp$iso1),]$cons_method_1<-"bcftools"
dist_comp[grep("bcftools",dist_comp$iso2),]$cons_method_2<-"bcftools"
dist_comp[grep("iVar",dist_comp$iso1),]$cons_method_1<-"iVar"
dist_comp[grep("iVar",dist_comp$iso2),]$cons_method_2<-"iVar"
dist_comp[grep("_subset_map",dist_comp$iso1),]$cons_method_1<-"QC-passed HBV reads"
dist_comp[grep("_subset_map",dist_comp$iso2),]$cons_method_2<-"QC-passed HBV reads"
dist_comp[grep("Graph_Consensus",dist_comp$iso1),]$cons_method_1<-"Best reference path"
dist_comp[grep("Graph_Consensus",dist_comp$iso2),]$cons_method_2<-"Best reference path"
dist_comp[grep("gramtools_reference",dist_comp$iso1),]$cons_method_1<-"Graph-derived consensus"
dist_comp[grep("gramtools_reference",dist_comp$iso2),]$cons_method_2<-"Graph-derived consensus"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso1),]$cons_method_1<-"HBV Haplotypes (>1%)"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso2),]$cons_method_2<-"HBV Haplotypes (>1%)"
dist_comp$genotype_1<-dist_comp$cons_method_1
dist_comp$genotype_2<-dist_comp$cons_method_2
dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$iso1))
dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$iso1))
dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$iso2))
dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$iso2))
# combine but avoid conflict in order for comparisons
f = function(x,y) {paste(sort(c(x, y)), collapse = " - ")}
f = Vectorize(f)
# apply function to your dataset
dist_comp<-dist_comp %>% mutate(pairwise_comparison = f(genotype_1, genotype_2))
# separate by consensus generation technique, but include graph-based methods
dist_comp_ivar<-dist_comp[dist_comp$cons_method_1 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
dist_comp_bcftools<-dist_comp[dist_comp$cons_method_1 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
# subset the table of ALL pairwise distances to relevant comparisons: vs. real reads, vs. haplotypes
dist_comp_ivar$iso_filt1<-gsub("SRR7471501_iVar_","",dist_comp_ivar$iso1)
dist_comp_ivar$iso_filt2<-gsub("SRR7471501_iVar_","",dist_comp_ivar$iso2)
dist_comp_ivar<-dist_comp_ivar %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
dist_comp_bcftools$iso_filt1<-gsub("SRR7471501_bcftools_","",dist_comp_bcftools$iso1)
dist_comp_bcftools$iso_filt2<-gsub("SRR7471501_bcftools_","",dist_comp_bcftools$iso2)
dist_comp_bcftools<-dist_comp_bcftools %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
all(dist_comp_ivar$pairwise_iso_comparison %in% dist_comp_bcftools$pairwise_iso_comparison) # TRUE
dist_comp_ivar<-dist_comp_ivar[order(dist_comp_ivar$pairwise_iso_comparison),]
dist_comp_bcftools<-dist_comp_bcftools[order(dist_comp_bcftools$pairwise_iso_comparison),]
all(dist_comp_ivar$pairwise_iso_comparison==dist_comp_bcftools$pairwise_iso_comparison) #TRUE
colnames(dist_comp_ivar)<-paste0(colnames(dist_comp_ivar),"_iVar")
colnames(dist_comp_bcftools)<-paste0(colnames(dist_comp_bcftools),"_bcftools")
#
dist_comp_filt<-cbind(dist_comp_ivar[,c("sample_iVar","pairwise_comparison_iVar","pairwise_iso_comparison_iVar","dist_iVar","genotype_1_iVar","genotype_2_iVar")],dist_comp_bcftools$dist_bcftools)
colnames(dist_comp_filt)[7]<-"dist_bcftools"
dist_comp_filt$group<-ifelse(dist_comp_filt$genotype_1_iVar==dist_comp_filt$genotype_2_iVar,dist_comp_filt$genotype_2_iVar,dist_comp_filt$pairwise_comparison_iVar)
dist_comp_filt$reads<-0 ; dist_comp_filt[grep("QC-passed HBV reads",dist_comp_filt$group),]$reads<-1
dist_comp_filt$haplotypes<-0 ; dist_comp_filt[grep("Haplotypes",dist_comp_filt$group),]$haplotypes<-1
dist_comp_filt$graphcons<-0;dist_comp_filt[grep("Graph-derived consensus",dist_comp_filt$group),]$graphcons<-1
#
dist_comp_filt$group2<-dist_comp_filt$group
dist_comp_filt[dist_comp_filt$reads==1,]$group2<-gsub(" - QC-passed HBV reads","",dist_comp_filt[dist_comp_filt$reads==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub(" - HBV Haplotypes \\(>1%\\)","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub("HBV Haplotypes \\(>1%\\) - ","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub("Graph-derived consensus - ","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub(" - Graph-derived consensus","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
#
dist_comp_filt$group3<-rowSums(dist_comp_filt[,c("reads", "haplotypes","graphcons")])
dist_comp_filt[dist_comp_filt$group3==2,]$group2<-dist_comp_filt[dist_comp_filt$group3==2,]$group
# --
#
reads_SRR7471501<-ggplot(dist_comp_filt[dist_comp_filt$reads==1,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2,),
              #size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group2 %in% c("Best reference path","Graph-derived consensus - QC-passed HBV reads","HBV Haplotypes (>1%) - QC-passed HBV reads"),5,2.5),alpha=0.5)  +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. QC-passed HBV reads\n(Mash distance)") + ylab("bcftools Consensus vs. QC-passed HBV reads\n(Mash distance)")
#
haplo_SRR7471501<-ggplot(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2),
              #size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group2 %in% c("Best reference path","Graph-derived consensus - HBV Haplotypes (>1%)"),5,2.5),alpha=0.5) +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. HBV Haplotypes\n(Mash distance)") + ylab("bcftools Consensus vs. HBV Haplotypes\n(Mash distance)")
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/distances")
png("MashDistances_HBVHaplotypes_SRR7471501.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
haplo_SRR7471501
dev.off()
png("MashDistances_HBVReads_SRR7471501.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
reads_SRR7471501
dev.off()
#######################################################
#######################################################
# set-up dataset
SRR7471502<-fread("SRR7471502_mash_distances.tsv",sep="\t")
SRR7471502<-data.frame(SRR7471502)
rownames(SRR7471502)<-SRR7471502$V1
SRR7471502<-SRR7471502[,-1]
SRR7471502<-as.matrix(SRR7471502)
dist_comp <- melt_dist(SRR7471502)
dist_comp$sample<-"SRR7471502"
dist_comp$iso1<-gsub("^SRR7471502$","SRR7471502_HBV_Haplotypes",dist_comp$iso1)
dist_comp$iso2<-gsub("^SRR7471502$","SRR7471502_HBV_Haplotypes",dist_comp$iso2)
dist_comp$cons_method_1<-""
dist_comp$cons_method_2<-""
dist_comp[grep("bcftools",dist_comp$iso1),]$cons_method_1<-"bcftools"
dist_comp[grep("bcftools",dist_comp$iso2),]$cons_method_2<-"bcftools"
dist_comp[grep("iVar",dist_comp$iso1),]$cons_method_1<-"iVar"
dist_comp[grep("iVar",dist_comp$iso2),]$cons_method_2<-"iVar"
dist_comp[grep("_subset_map",dist_comp$iso1),]$cons_method_1<-"QC-passed HBV reads"
dist_comp[grep("_subset_map",dist_comp$iso2),]$cons_method_2<-"QC-passed HBV reads"
dist_comp[grep("Graph_Consensus",dist_comp$iso1),]$cons_method_1<-"Best reference path"
dist_comp[grep("Graph_Consensus",dist_comp$iso2),]$cons_method_2<-"Best reference path"
dist_comp[grep("gramtools_reference",dist_comp$iso1),]$cons_method_1<-"Graph-derived consensus"
dist_comp[grep("gramtools_reference",dist_comp$iso2),]$cons_method_2<-"Graph-derived consensus"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso1),]$cons_method_1<-"HBV Haplotypes (>1%)"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso2),]$cons_method_2<-"HBV Haplotypes (>1%)"
dist_comp$genotype_1<-dist_comp$cons_method_1
dist_comp$genotype_2<-dist_comp$cons_method_2
dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$iso1))
dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$iso1))
dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$iso2))
dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$iso2))
# combine but avoid conflict in order for comparisons
f = function(x,y) {paste(sort(c(x, y)), collapse = " - ")}
f = Vectorize(f)
# apply function to your dataset
dist_comp<-dist_comp %>% mutate(pairwise_comparison = f(genotype_1, genotype_2))
# separate by consensus generation technique, but include graph-based methods
dist_comp_ivar<-dist_comp[dist_comp$cons_method_1 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
dist_comp_bcftools<-dist_comp[dist_comp$cons_method_1 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
# subset the table of ALL pairwise distances to relevant comparisons: vs. real reads, vs. haplotypes
dist_comp_ivar$iso_filt1<-gsub("SRR7471502_iVar_","",dist_comp_ivar$iso1)
dist_comp_ivar$iso_filt2<-gsub("SRR7471502_iVar_","",dist_comp_ivar$iso2)
dist_comp_ivar<-dist_comp_ivar %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
dist_comp_bcftools$iso_filt1<-gsub("SRR7471502_bcftools_","",dist_comp_bcftools$iso1)
dist_comp_bcftools$iso_filt2<-gsub("SRR7471502_bcftools_","",dist_comp_bcftools$iso2)
dist_comp_bcftools<-dist_comp_bcftools %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
all(dist_comp_ivar$pairwise_iso_comparison %in% dist_comp_bcftools$pairwise_iso_comparison) # TRUE
dist_comp_ivar<-dist_comp_ivar[order(dist_comp_ivar$pairwise_iso_comparison),]
dist_comp_bcftools<-dist_comp_bcftools[order(dist_comp_bcftools$pairwise_iso_comparison),]
all(dist_comp_ivar$pairwise_iso_comparison==dist_comp_bcftools$pairwise_iso_comparison) #TRUE
colnames(dist_comp_ivar)<-paste0(colnames(dist_comp_ivar),"_iVar")
colnames(dist_comp_bcftools)<-paste0(colnames(dist_comp_bcftools),"_bcftools")
#
dist_comp_filt<-cbind(dist_comp_ivar[,c("sample_iVar","pairwise_comparison_iVar","pairwise_iso_comparison_iVar","dist_iVar","genotype_1_iVar","genotype_2_iVar")],dist_comp_bcftools$dist_bcftools)
colnames(dist_comp_filt)[7]<-"dist_bcftools"
dist_comp_filt$group<-ifelse(dist_comp_filt$genotype_1_iVar==dist_comp_filt$genotype_2_iVar,dist_comp_filt$genotype_2_iVar,dist_comp_filt$pairwise_comparison_iVar)
dist_comp_filt$reads<-0 ; dist_comp_filt[grep("QC-passed HBV reads",dist_comp_filt$group),]$reads<-1
dist_comp_filt$haplotypes<-0 ; dist_comp_filt[grep("Haplotypes",dist_comp_filt$group),]$haplotypes<-1
dist_comp_filt$graphcons<-0;dist_comp_filt[grep("Graph-derived consensus",dist_comp_filt$group),]$graphcons<-1
#
dist_comp_filt$group2<-dist_comp_filt$group
dist_comp_filt[dist_comp_filt$reads==1,]$group2<-gsub(" - QC-passed HBV reads","",dist_comp_filt[dist_comp_filt$reads==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub(" - HBV Haplotypes \\(>1%\\)","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub("HBV Haplotypes \\(>1%\\) - ","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub("Graph-derived consensus - ","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub(" - Graph-derived consensus","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
#
dist_comp_filt$group3<-rowSums(dist_comp_filt[,c("reads", "haplotypes","graphcons")])
dist_comp_filt[dist_comp_filt$group3==2,]$group2<-dist_comp_filt[dist_comp_filt$group3==2,]$group
# --
#
reads_SRR7471502<-ggplot(dist_comp_filt[dist_comp_filt$reads==1,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2,),
              #size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group2 %in% c("Best reference path","Graph-derived consensus - QC-passed HBV reads","HBV Haplotypes (>1%) - QC-passed HBV reads"),5,2.5),alpha=0.5)  +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. QC-passed HBV reads\n(Mash distance)") + ylab("bcftools Consensus vs. QC-passed HBV reads\n(Mash distance)")
#
haplo_SRR7471502<-ggplot(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2),
              #size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group2 %in% c("Best reference path","Graph-derived consensus - HBV Haplotypes (>1%)"),5,2.5),alpha=0.5) +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. HBV Haplotypes\n(Mash distance)") + ylab("bcftools Consensus vs. HBV Haplotypes\n(Mash distance)")
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/distances")
png("MashDistances_HBVHaplotypes_SRR7471502.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
haplo_SRR7471502
dev.off()
png("MashDistances_HBVReads_SRR7471502.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
reads_SRR7471502
dev.off()
#######################################################
#######################################################
# set-up dataset
SRR7471513<-fread("SRR7471513_mash_distances.tsv",sep="\t")
SRR7471513<-data.frame(SRR7471513)
rownames(SRR7471513)<-SRR7471513$V1
SRR7471513<-SRR7471513[,-1]
SRR7471513<-as.matrix(SRR7471513)
dist_comp <- melt_dist(SRR7471513)
dist_comp$sample<-"SRR7471513"
dist_comp$iso1<-gsub("^SRR7471513$","SRR7471513_HBV_Haplotypes",dist_comp$iso1)
dist_comp$iso2<-gsub("^SRR7471513$","SRR7471513_HBV_Haplotypes",dist_comp$iso2)
dist_comp$cons_method_1<-""
dist_comp$cons_method_2<-""
dist_comp[grep("bcftools",dist_comp$iso1),]$cons_method_1<-"bcftools"
dist_comp[grep("bcftools",dist_comp$iso2),]$cons_method_2<-"bcftools"
dist_comp[grep("iVar",dist_comp$iso1),]$cons_method_1<-"iVar"
dist_comp[grep("iVar",dist_comp$iso2),]$cons_method_2<-"iVar"
dist_comp[grep("_subset_map",dist_comp$iso1),]$cons_method_1<-"QC-passed HBV reads"
dist_comp[grep("_subset_map",dist_comp$iso2),]$cons_method_2<-"QC-passed HBV reads"
dist_comp[grep("Graph_Consensus",dist_comp$iso1),]$cons_method_1<-"Best reference path"
dist_comp[grep("Graph_Consensus",dist_comp$iso2),]$cons_method_2<-"Best reference path"
dist_comp[grep("gramtools_reference",dist_comp$iso1),]$cons_method_1<-"Graph-derived consensus"
dist_comp[grep("gramtools_reference",dist_comp$iso2),]$cons_method_2<-"Graph-derived consensus"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso1),]$cons_method_1<-"HBV Haplotypes (>1%)"
dist_comp[grep("HBV_Haplotypes",dist_comp$iso2),]$cons_method_2<-"HBV Haplotypes (>1%)"
dist_comp$genotype_1<-dist_comp$cons_method_1
dist_comp$genotype_2<-dist_comp$cons_method_2
dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_1 %in% c("bcftools")),]$iso1))
dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$genotype_1<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_1 %in% c("iVar")),]$iso1))
dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_bcftools_","",dist_comp[which(dist_comp$cons_method_2 %in% c("bcftools")),]$iso2))
dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$genotype_2<-sub("^(\\w).*$", "\\1", gsub("^.*_iVar_","",dist_comp[which(dist_comp$cons_method_2 %in% c("iVar")),]$iso2))
# combine but avoid conflict in order for comparisons
f = function(x,y) {paste(sort(c(x, y)), collapse = " - ")}
f = Vectorize(f)
# apply function to your dataset
dist_comp<-dist_comp %>% mutate(pairwise_comparison = f(genotype_1, genotype_2))
# separate by consensus generation technique, but include graph-based methods
dist_comp_ivar<-dist_comp[dist_comp$cons_method_1 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("iVar","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
dist_comp_bcftools<-dist_comp[dist_comp$cons_method_1 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads") & dist_comp$cons_method_2 %in% c("bcftools","Graph-derived consensus","HBV Haplotypes (>1%)","Best reference path","QC-passed HBV reads"),]
# subset the table of ALL pairwise distances to relevant comparisons: vs. real reads, vs. haplotypes
dist_comp_ivar$iso_filt1<-gsub("SRR7471513_iVar_","",dist_comp_ivar$iso1)
dist_comp_ivar$iso_filt2<-gsub("SRR7471513_iVar_","",dist_comp_ivar$iso2)
dist_comp_ivar<-dist_comp_ivar %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
dist_comp_bcftools$iso_filt1<-gsub("SRR7471513_bcftools_","",dist_comp_bcftools$iso1)
dist_comp_bcftools$iso_filt2<-gsub("SRR7471513_bcftools_","",dist_comp_bcftools$iso2)
dist_comp_bcftools<-dist_comp_bcftools %>% mutate(pairwise_iso_comparison = f(iso_filt1, iso_filt2))
all(dist_comp_ivar$pairwise_iso_comparison %in% dist_comp_bcftools$pairwise_iso_comparison) # TRUE
dist_comp_ivar<-dist_comp_ivar[order(dist_comp_ivar$pairwise_iso_comparison),]
dist_comp_bcftools<-dist_comp_bcftools[order(dist_comp_bcftools$pairwise_iso_comparison),]
all(dist_comp_ivar$pairwise_iso_comparison==dist_comp_bcftools$pairwise_iso_comparison) #TRUE
colnames(dist_comp_ivar)<-paste0(colnames(dist_comp_ivar),"_iVar")
colnames(dist_comp_bcftools)<-paste0(colnames(dist_comp_bcftools),"_bcftools")
#
dist_comp_filt<-cbind(dist_comp_ivar[,c("sample_iVar","pairwise_comparison_iVar","pairwise_iso_comparison_iVar","dist_iVar","genotype_1_iVar","genotype_2_iVar")],dist_comp_bcftools$dist_bcftools)
colnames(dist_comp_filt)[7]<-"dist_bcftools"
dist_comp_filt$group<-ifelse(dist_comp_filt$genotype_1_iVar==dist_comp_filt$genotype_2_iVar,dist_comp_filt$genotype_2_iVar,dist_comp_filt$pairwise_comparison_iVar)
dist_comp_filt$reads<-0 ; dist_comp_filt[grep("QC-passed HBV reads",dist_comp_filt$group),]$reads<-1
dist_comp_filt$haplotypes<-0 ; dist_comp_filt[grep("Haplotypes",dist_comp_filt$group),]$haplotypes<-1
dist_comp_filt$graphcons<-0;dist_comp_filt[grep("Graph-derived consensus",dist_comp_filt$group),]$graphcons<-1
#
dist_comp_filt$group2<-dist_comp_filt$group
dist_comp_filt[dist_comp_filt$reads==1,]$group2<-gsub(" - QC-passed HBV reads","",dist_comp_filt[dist_comp_filt$reads==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub(" - HBV Haplotypes \\(>1%\\)","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2<-gsub("HBV Haplotypes \\(>1%\\) - ","",dist_comp_filt[dist_comp_filt$haplotypes==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub("Graph-derived consensus - ","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
dist_comp_filt[dist_comp_filt$graphcons==1,]$group2<-gsub(" - Graph-derived consensus","",dist_comp_filt[dist_comp_filt$graphcons==1,]$group2)
#
dist_comp_filt$group3<-rowSums(dist_comp_filt[,c("reads", "haplotypes","graphcons")])
dist_comp_filt[dist_comp_filt$group3==2,]$group2<-dist_comp_filt[dist_comp_filt$group3==2,]$group
# --
#
reads_SRR7471513<-ggplot(dist_comp_filt[dist_comp_filt$reads==1,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2,),
              #size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$reads==1,]$group2 %in% c("Best reference path","Graph-derived consensus - QC-passed HBV reads","HBV Haplotypes (>1%) - QC-passed HBV reads"),5,2.5),alpha=0.5)  +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. QC-passed HBV reads\n(Mash distance)") + ylab("bcftools Consensus vs. QC-passed HBV reads\n(Mash distance)")
#
haplo_SRR7471513<-ggplot(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,],aes(x=dist_iVar,y=dist_bcftools)) + geom_jitter(aes(color=group2),
              #size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group3=="2",5,2.5),alpha=0.75) +
              size=ifelse(dist_comp_filt[dist_comp_filt$haplotypes==1 & dist_comp_filt$reads==0,]$group2 %in% c("Best reference path","Graph-derived consensus - HBV Haplotypes (>1%)"),5,2.5),alpha=0.5) +
              theme_bw() + theme(legend.position="right") + guides(color=guide_legend("Consensus/Comparison"), size = "none") +
              xlab("iVar Consensus vs. HBV Haplotypes\n(Mash distance)") + ylab("bcftools Consensus vs. HBV Haplotypes\n(Mash distance)")
setwd("~/JHSPH/Research/HBV/Reference_Testing/real_reads/distances")
png("MashDistances_HBVHaplotypes_SRR7471513.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
haplo_SRR7471513
dev.off()
png("MashDistances_HBVReads_SRR7471513.png",type="cairo",width = 12.5, height = 8.5, units= 'in', res=1000)
reads_SRR7471513
dev.off()


######### EXPLO ###########
cd /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4
#
# use the bifrost package to build gfa
# map the graph-rescued reads to the gfa and color them
#
graph_rescued_SRR7471499="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/SRR7471499_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz"
graph_rescued_SRR7471500="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/SRR7471500_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz"
graph_rescued_SRR7471501="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/SRR7471501_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz"
graph_rescued_SRR7471502="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/SRR7471502_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz"
graph_rescued_SRR7471513="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/SRR7471513_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt.gz"
# cp $graph_rescued_SRR7471499 ./
# cp $graph_rescued_SRR7471500 ./
# cp $graph_rescued_SRR7471501 ./
# cp $graph_rescued_SRR7471502 ./
# cp $graph_rescued_SRR7471513 ./
#gunzip *_nodes.txt.gz
# remove duplicate read rows
awk '!seen[$1]++' SRR7471499_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt > graph_rescued_SRR7471499_reads_seqs_nodes.txt
awk '!seen[$1]++' SRR7471500_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt > graph_rescued_SRR7471500_reads_seqs_nodes.txt
awk '!seen[$1]++' SRR7471501_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt > graph_rescued_SRR7471501_reads_seqs_nodes.txt
awk '!seen[$1]++' SRR7471502_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt > graph_rescued_SRR7471502_reads_seqs_nodes.txt
awk '!seen[$1]++' SRR7471513_raw_qc_B2_2_GU815637_unmapped.reads.alignments_wSequence_nodes.txt > graph_rescued_SRR7471513_reads_seqs_nodes.txt
# extract sequences - dump into new fasta
R
samps<-c("SRR7471499","SRR7471500","SRR7471501","SRR7471502","SRR7471513")
for(j in 1:length(unique(samps))){
fname<-paste0("graph_rescued_",samps[j],"_reads_seqs_nodes.txt")
dat<-fread(fname)
reads_fname<-paste0("/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_exact_",samps[j],".txt")
reads<-fread(reads_fname,header=F)
dat<-dat[dat$V1 %in% reads$V1,]
newfasta<-paste(paste0(">",dat[1,1]),dat[1,2],sep="\n")
for(i in 2:nrow(dat)){
newfasta<-c(newfasta,paste(paste0(">",dat[i,1]),dat[i,2],sep="\n"))
}
fastaname<-paste0("graph_rescued_",samps[j],"_reads.fasta")
write.table(newfasta,fastaname,quote=F,row.names=F,col.names=F)
dat<-fread(fname)
reads_fname<-paste0("/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/qc_reads/linear_ref/unmapped_reads/VG_Map_remapped_PE_reads_ids_",samps[j],".txt")
reads<-fread(reads_fname,header=F)
dat<-dat[dat$V1 %in% reads$V1,]
newfasta<-paste(paste0(">",dat[1,1]),dat[1,2],sep="\n")
for(i in 2:nrow(dat)){
newfasta<-c(newfasta,paste(paste0(">",dat[i,1]),dat[i,2],sep="\n"))
}
fastaname<-paste0("graph_rescued_",samps[j],"_reads_broad.fasta")
write.table(newfasta,fastaname,quote=F,row.names=F,col.names=F)
}
cat graph_rescued_*reads.fasta > C4_rescued_reads.fasta
cat graph_rescued_*_reads_broad.fasta > C4_rescued_reads_broad.fasta
#
cd /home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/C4
ml bbmap
#
conda activate bifrost
C4_haps="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing/C4_haplotypes.fasta"
references44="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing/HBV_44references.fasta"
haps_and_refs="/home-1/dduchen3@jhu.edu/work/dduchen3/projects/HBV/Longitudinal_CHB_SRP152039/NonSeroconverters/alignment/C4/consensus_testing/HBV_44references_C4haplotypes.fasta"
# colored compacted DBGs
Bifrost build -k 31 -d -i -y -c -s $C4_haps -r $references44 -o C4_filt_haplotypes_and_refs
Bifrost build -k 31 -d -i -y -c -r $references44 -o References_only_graph
Bifrost build -k 21 -d -i -y -c -s $C4_haps -r $references44 -o C4_filt_haplotypes_and_refs_k21
Bifrost build -k 21 -d -i -y -c -r $references44 -o References_only_graph_k21
#
# Query the compacted de Bruijn graphs for presence/absence of queries in the graph
#
Bifrost query -t 4 -e 0.8 -n -g C4_filt_haplotypes_and_refs.gfa -q C4_rescued_reads.fasta -f C4_filt_haplotypes_and_refs.bfg_colors -o C4_filt_haplotypes_and_ref_rescuedqueries
Bifrost query -t 4 -e 0.8 -n -g C4_filt_haplotypes_and_refs.gfa -q C4_rescued_reads_broad.fasta -f C4_filt_haplotypes_and_refs.bfg_colors -o C4_filt_haplotypes_and_ref_rescuedqueries_broad
# filter reads again that successfully 'align'
R
library(stringi);library(Biostrings);library(data.table)
rescued<-readDNAStringSet("C4_rescued_reads.fasta")
dbg_colors<-fread("C4_filt_haplotypes_and_ref_rescuedqueries.tsv")
colnames(dbg_colors)<-gsub("^.*/","",colnames(dbg_colors))
dbg_colors<-dbg_colors[dbg_colors$C4_haplotypes.fasta %in% c(1) | dbg_colors$HBV_44references.fasta %in% c(1) ,]
dbg_colors$samples<-gsub("\\..*$","",dbg_colors$query_name)
table(dbg_colors$samples)
# SRR7471499 SRR7471500 SRR7471501 SRR7471502 SRR7471513
#         47         26         15         52         64
writeXStringSet(rescued[names(rescued) %in% dbg_colors$query_name,], "C4_rescued_reads_filt.fasta")
rescued_broad<-readDNAStringSet("C4_rescued_reads_broad.fasta")
dbg_colors<-fread("C4_filt_haplotypes_and_ref_rescuedqueries_broad.tsv")
colnames(dbg_colors)<-gsub("^.*/","",colnames(dbg_colors))
dbg_colors<-dbg_colors[dbg_colors$C4_haplotypes.fasta %in% c(1) | dbg_colors$HBV_44references.fasta %in% c(1) ,]
dbg_colors$samples<-gsub("\\..*$","",dbg_colors$query_name)
table(dbg_colors$samples)
# SRR7471499 SRR7471500 SRR7471501 SRR7471502 SRR7471513
#        636        308        266        599        603
writeXStringSet(rescued_broad[names(rescued_broad) %in% dbg_colors$query_name,], "C4_rescued_reads_broad_filt.fasta")
#
#
# -- for manuscript:
# graph: C4_filt_haplotypes_and_refs_k21.gfa
# BLAST query: C4_rescued_reads.fasta
#
#
